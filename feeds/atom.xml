<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>GoCalf Blog</title><link href="https://blog.gocalf.com/" rel="alternate"></link><link href="https://blog.gocalf.com/feeds/atom.xml" rel="self"></link><id>https://blog.gocalf.com/</id><updated>2019-09-30T16:00:00+08:00</updated><subtitle>1/100 ALGO&amp;amp;MATH; 1/100 IT&amp;amp;GAME; 1/100 INFO&amp;amp;SHARING; 1/100 WHO KNOWS</subtitle><entry><title>自描述语句</title><link href="https://blog.gocalf.com/self-descriptive-sentence" rel="alternate"></link><published>2014-08-28T17:15:00+08:00</published><updated>2014-08-28T23:25:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2014-08-28:/self-descriptive-sentence</id><summary type="html">&lt;p class="first last"&gt;自描述语句（Self-Descriptive Sentence），也叫做 autogram，是一种自己描述自己的语句，今天就介绍一种简单的生成这种句子的方法。&lt;/p&gt;
</summary><content type="html">
&lt;p&gt;自描述语句（Self-Descriptive Sentence），也叫做 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Autogram"&gt;autogram&lt;/a&gt;，是一种自己描述自己的语句。&lt;/p&gt;
&lt;p&gt;我在 2004 年的时候（时光飞逝啊）看到这种句子，想了一个简单的方法来用程序生成，效果还可以，但还有很大的不足。后来也没在做什么改进，今天就把这陈年老事拿出来晒晒太阳。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt;介绍&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;先举个简单的自描述语句的例子。十年前好友 &lt;a class="reference external" href="http://www.truevue.org/"&gt;@gdh&lt;/a&gt; 发邮件来说在网上看到有人发了这样一个句子，号称是用来折腾 Visual Studio 2003 的，但是没有更具体的信息，就想问问我有没有什么想法。句子是这样的：&lt;/p&gt;
&lt;blockquote&gt;
聪明的张先生生成的这个句子一共有一百一十三个字，其中有二个 “百”，三个 “有”，二个 “子”，七个 “三”，三个 “生”，十五个 “二”，二个 “先”，二个 “字”，一个 “八”，二个 “七”，一个 “四”，二个 “明”，一个 “六”，二个 “成”，一个 “零”，二个 “张”，二个 “中”，二个 “其”，二个 “共”，二个 “这”，五个 “十”，二个 “句”，十个 “一”，三十一个 “个”，三个 “的”，二个 “聪”，一个 “九”，三个 “五”。&lt;/blockquote&gt;
&lt;p&gt;特点很明显，不考虑标点符号的话，一数便知，这句话一共有 113 个汉字，跟句子中声明的一致。另外，句子中出现过的每一个汉字，句子自身都给出了这个汉字的总出现次数。比如“聪”字一共出现两次，第一次是句子开头“聪明的”那里，第二次是声明“聪”字个数的时候说的“二个‘聪’”。再比如“个”字，数一数，包括“三十一个‘个’”中出现的两次，确确实实总共出现了 31 次。&lt;/p&gt;
&lt;p&gt;这样的句子就是自描述语句的一种，它自己对自己做了一番统计，表明了自身的总字数，以及所包含的每一个汉字的次数。当然如果愿意的话，还可以让它把包含的每一个标点符号也都统计出来。&lt;/p&gt;
&lt;p&gt;再来一个例子：&lt;/p&gt;
&lt;blockquote&gt;
你看到的这个句子一共有九十个字，其中有二个“你”，二个“看”，二个“到”，二个“的”，二个“这”，二十六个“个”，二个“句”，二个“子”，二个“共”，三个“有”，二个“字”，二个“其”，二个“中”，四个“一”，十七个“二”，二个“三”，四个“四”，一个“五”，二个“六”，二个“七”，一个“八”，二个“九”，四个“十”。&lt;/blockquote&gt;
&lt;p&gt;这么有意思的东西，如果你也是刚刚见到，不妨停下来自己想一想，看看有什么好的办法来构造出这样的句子。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;直接的思路&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;当时看到这样的句子，其实我也没什么思路，开始也没想要写程序来生成，只是顺着一点儿模糊的想法在纸上打打草稿。结果因为自己的小学数学基本功太差，加加减减的时候总是会出错，越算越头疼，只好写个程序来帮我算，没想到程序就直接把结果算出来了。&lt;/p&gt;
&lt;p&gt;这中句子的结构就是一个前缀（如“你看到的这个句子”），跟着对总字数的声明（“一共有 XX 个字”），然后是对句子中包含的每一个汉字的次数的声明。那首先就得知道可能会包含哪些汉字啊。显然前缀子句和其他句子结构中出现的汉字都在其中，另外所有的数词（零一二三等）都有可能会出现。&lt;/p&gt;
&lt;p&gt;再想想每个字可能的次数。既不是数词也不在词频统计部分重复出现的字（如上面示例中的“个”字），它们的出现的次数应该是固定的，即除了在前缀等地方出现已知的次数外，还会在声明它的词频时再出现一次。比如上面第二个例子中的“你”字，它就应该是出现两次，一次是作为句子的成分（前缀部分）出现一次，另一次就是声明它的词频的时候。而数词的次数就没法直接确定了，明显能感觉到它们是牵一发而动其全身的。&lt;/p&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id22"&gt;初始化&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;那么先把句子模板确定下来，然后往里面套总字数和完整的词频分布。这里我对句子结构做了些简化，假设我想要生成的句子是这样的：&lt;/p&gt;
&lt;blockquote&gt;
这一句话一共有__个字，__个“__”，__个“__”，……。&lt;/blockquote&gt;
&lt;p&gt;先确定可能会出现的汉字集合，显然目前能看到的有“这”、“一”、“句”、“话”、“共”、“有”、“个”、“字”。另外预计会出现的就是所有的数词了。因为字数比较少，所以暂时就不用考虑“零”、“百”、“千”等字，只要考虑“一”到“十”即可。&lt;/p&gt;
&lt;p&gt;关于把数字用中文表示出来的方法，参见之前的博文 &lt;a class="reference external" href="https://blog.gocalf.com/number-to-chinese"&gt;将整数数字转换成中文&lt;/a&gt; ，非常简单的程序，这里不再重复。&lt;/p&gt;
&lt;p&gt;如果你的心算笔算能力还不错，下面的过程用一张纸和一支笔就能搞定了。首先列出所有可能出现的汉字，并且所有字的初始计数均为 0。总字数也要记录在案，初始值也是 0。列出来就是这样的表格，其中最后一列“TC”表示总字数。&lt;/p&gt;
&lt;style&gt;
    table.docutils thead {text-align: center;}
    table.docutils tbody {text-align: center;}
&lt;/style&gt;&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;一&lt;/th&gt;
&lt;th class="head"&gt;二&lt;/th&gt;
&lt;th class="head"&gt;三&lt;/th&gt;
&lt;th class="head"&gt;四&lt;/th&gt;
&lt;th class="head"&gt;五&lt;/th&gt;
&lt;th class="head"&gt;六&lt;/th&gt;
&lt;th class="head"&gt;七&lt;/th&gt;
&lt;th class="head"&gt;八&lt;/th&gt;
&lt;th class="head"&gt;九&lt;/th&gt;
&lt;th class="head"&gt;十&lt;/th&gt;
&lt;th class="head"&gt;个&lt;/th&gt;
&lt;th class="head"&gt;这&lt;/th&gt;
&lt;th class="head"&gt;句&lt;/th&gt;
&lt;th class="head"&gt;话&lt;/th&gt;
&lt;th class="head"&gt;共&lt;/th&gt;
&lt;th class="head"&gt;有&lt;/th&gt;
&lt;th class="head"&gt;字&lt;/th&gt;
&lt;th class="head"&gt;TC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id23"&gt;第一次迭代&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;接下来对句子模板做第一次扫描，并根据情况更新相应汉字的字数和总字数。处理的方法很简单，每看到一个汉字，就要给它的计数加 1，总字数加 1。任何一个汉字，如果计数从 0 变成 1，即第一次遇到它，就要再给它的计数和总字数加 1，同时对“个”字执行同样的操作。把这个过程叫做“increase”操作，即：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def increase(character c):
    if c.count == 0:
        c.count += 2
        total.count += 2
        increase('个')
    else:
        c.count += 1
        total.count += 1
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;比如首先看到“这”字，当前计数为 0，执行 increase 操作给它的个数加 2，总字数加 2，再对“个”字执行 increase 操作。由于“个”字此时的计数也是 0，因此它的计数直接加到 2，总字数加 2，这时注意还要再对“个”字执行一次 increase 操作。但第二次对“个”字执行 increase 操作时，由于其当前计数是 2 不是 0，所以直接给计数和总字数分别加 1 就行了。处理完第一个字“这”之后，计数情况为：2 个“这”，3 个“个”，总字数 5。&lt;/p&gt;
&lt;p&gt;然后是“一”字，同样执行 increase 操作，计数增加 2，总字数增加 2，再对“个”字执行 increase，效果是其字数和总字数又分别加 1。完成后的计数情况为：2 个“这”，4 个“个”，2 个“一”，总字数 7。&lt;/p&gt;
&lt;p&gt;用类似的办法把后面的“句”、“话”、“一”、“共”、“有”、“个”、和“字”都处理完，最后得到如下的计数情况：&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;一&lt;/th&gt;
&lt;th class="head"&gt;二&lt;/th&gt;
&lt;th class="head"&gt;三&lt;/th&gt;
&lt;th class="head"&gt;四&lt;/th&gt;
&lt;th class="head"&gt;五&lt;/th&gt;
&lt;th class="head"&gt;六&lt;/th&gt;
&lt;th class="head"&gt;七&lt;/th&gt;
&lt;th class="head"&gt;八&lt;/th&gt;
&lt;th class="head"&gt;九&lt;/th&gt;
&lt;th class="head"&gt;十&lt;/th&gt;
&lt;th class="head"&gt;个&lt;/th&gt;
&lt;th class="head"&gt;这&lt;/th&gt;
&lt;th class="head"&gt;句&lt;/th&gt;
&lt;th class="head"&gt;话&lt;/th&gt;
&lt;th class="head"&gt;共&lt;/th&gt;
&lt;th class="head"&gt;有&lt;/th&gt;
&lt;th class="head"&gt;字&lt;/th&gt;
&lt;th class="head"&gt;TC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id24"&gt;第二次迭代&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;下一轮就把所有的计数都翻译成中文，并统计它们所带来的计数改变。比如第一个计数是 3，就要对“三”字执行 increase 操作。然后是 10，对“十”字做 increase 操作。……。最后总字数 25，分别对“二”、“十”和“五”操作即可。处理完后得到新的一轮计数：&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;一&lt;/th&gt;
&lt;th class="head"&gt;二&lt;/th&gt;
&lt;th class="head"&gt;三&lt;/th&gt;
&lt;th class="head"&gt;四&lt;/th&gt;
&lt;th class="head"&gt;五&lt;/th&gt;
&lt;th class="head"&gt;六&lt;/th&gt;
&lt;th class="head"&gt;七&lt;/th&gt;
&lt;th class="head"&gt;八&lt;/th&gt;
&lt;th class="head"&gt;九&lt;/th&gt;
&lt;th class="head"&gt;十&lt;/th&gt;
&lt;th class="head"&gt;个&lt;/th&gt;
&lt;th class="head"&gt;这&lt;/th&gt;
&lt;th class="head"&gt;句&lt;/th&gt;
&lt;th class="head"&gt;话&lt;/th&gt;
&lt;th class="head"&gt;共&lt;/th&gt;
&lt;th class="head"&gt;有&lt;/th&gt;
&lt;th class="head"&gt;字&lt;/th&gt;
&lt;th class="head"&gt;TC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id25"&gt;第三次迭代&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;对比这两组计数，发现：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;“一”、“这”、“句”等字的计数没有发生变化，并且这些数字对应的汉字已经全部统计过了，所以不必对它们做别的处理。&lt;/li&gt;
&lt;li&gt;“二”、“三”、“十”等字，计数从没有变成了若干个，就要用跟刚才一样的方法，把这些数字翻译成中文并增加相应汉字的计数。&lt;/li&gt;
&lt;li&gt;“个”字和总字数，我本来是想加入 10 和 25，但现在分别是 14 和 44，所以要把刚才加入的 10 和 25 都去掉，换成 14 和 25。比如把 10 换成 14，先对 “十”字做 decrease 操作，然后分别对“十”和“四”字执行 increase 操作。decrease 的过程如下所示，注意，由于每个字的计数都是直接从 0 涨到 2 的，所以也会直接从 2 降到 0。&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def decrease(character c):
    if c.count == 2:
        c.count -= 2
        total.count -= 2
        decrease('个')
    else:
        c.count -= 1
        total.count -= 1
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;这样处理完后得到的新一轮计数为：&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;col width="6%"/&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;一&lt;/th&gt;
&lt;th class="head"&gt;二&lt;/th&gt;
&lt;th class="head"&gt;三&lt;/th&gt;
&lt;th class="head"&gt;四&lt;/th&gt;
&lt;th class="head"&gt;五&lt;/th&gt;
&lt;th class="head"&gt;六&lt;/th&gt;
&lt;th class="head"&gt;七&lt;/th&gt;
&lt;th class="head"&gt;八&lt;/th&gt;
&lt;th class="head"&gt;九&lt;/th&gt;
&lt;th class="head"&gt;十&lt;/th&gt;
&lt;th class="head"&gt;个&lt;/th&gt;
&lt;th class="head"&gt;这&lt;/th&gt;
&lt;th class="head"&gt;句&lt;/th&gt;
&lt;th class="head"&gt;话&lt;/th&gt;
&lt;th class="head"&gt;共&lt;/th&gt;
&lt;th class="head"&gt;有&lt;/th&gt;
&lt;th class="head"&gt;字&lt;/th&gt;
&lt;th class="head"&gt;TC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;51&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id26"&gt;周而复始&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;之后用同样的方法一轮一轮地迭代，结果如下（包含从初始化开始的每次迭代，第一列 ID 表示迭代次数）：&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;ID&lt;/th&gt;
&lt;th class="head"&gt;一&lt;/th&gt;
&lt;th class="head"&gt;二&lt;/th&gt;
&lt;th class="head"&gt;三&lt;/th&gt;
&lt;th class="head"&gt;四&lt;/th&gt;
&lt;th class="head"&gt;五&lt;/th&gt;
&lt;th class="head"&gt;六&lt;/th&gt;
&lt;th class="head"&gt;七&lt;/th&gt;
&lt;th class="head"&gt;八&lt;/th&gt;
&lt;th class="head"&gt;九&lt;/th&gt;
&lt;th class="head"&gt;十&lt;/th&gt;
&lt;th class="head"&gt;个&lt;/th&gt;
&lt;th class="head"&gt;这&lt;/th&gt;
&lt;th class="head"&gt;句&lt;/th&gt;
&lt;th class="head"&gt;话&lt;/th&gt;
&lt;th class="head"&gt;共&lt;/th&gt;
&lt;th class="head"&gt;有&lt;/th&gt;
&lt;th class="head"&gt;字&lt;/th&gt;
&lt;th class="head"&gt;TC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;51&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;54&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;57&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;59&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;59&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;59&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;很高兴地发现，第十次的结果和第十一次的结果是完全一致的，这时候就没有任何操作可做了，实际上算法也就终止了。显然，通过这组数据生成的句子就是符合要求的自我统计的句子：&lt;/p&gt;
&lt;blockquote&gt;
这一句话一共有五十九个字，四个“一”，十一个“二”，二个“三”，三个“四”，二个“五”，二个“七”，二个“九”，四个“十”，十七个“个”，二个“这”，二个“句”，二个“话”，二个“共”，二个“有”，二个“字”。&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id27"&gt;算法&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;总的看来，一轮一轮迭代的处理方法是这样的：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;所有汉字的计数和总字数均初始化为 0；&lt;/li&gt;
&lt;li&gt;遍历句子模板中的每一个汉字，对其计数做“increase”操作，得到一组新的计数；&lt;/li&gt;
&lt;li&gt;比较当前计数数组与前一轮计数数组中的每一项：&lt;ol class="arabic"&gt;
&lt;li&gt;如果二者一致，无操作；&lt;/li&gt;
&lt;li&gt;否则，对前一轮的数值对应的每个汉字执行 decrease 操作（0 除外），对当前数值对应的每个汉字执行 increase 操作（0 除外）；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;重复步骤 3，直到相邻两轮计数数组完全一致。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中 increase 和 decrease 操作均如前所述，不再重复了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id28"&gt;初遇困境&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id29"&gt;问题&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;换一个例子看看，把上面的句子模板开头的“这一句话”换成“新的一句话”，即：&lt;/p&gt;
&lt;blockquote&gt;
新的一句话一共有__个字，__个“__”，__个“__”，……。&lt;/blockquote&gt;
&lt;p&gt;按照同样的算法一轮一轮迭代处理，却永远都无法终止。仔细看了看，发现计数数组会在几组值之间不断地反复，却怎么都无法收敛。具体的数据就不列出来了。&lt;/p&gt;
&lt;p&gt;想想也是，上面的算法只是保证了，如果收敛，得到的一定是满足条件的解，却完全无法保证收敛。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id30"&gt;解决&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;想到一个比较简单的变通方法就是修改之前的 decrease 操作。本来一个汉字如果是第一次出现，计数就直接从 0 涨到 2，如果要去掉，也直接从 2 回到 0。这样避免了出现“一个 XX”的情况。这其实不是必须的，如果把条件放宽，允许出现“一个 XX”（仍然符合自我统计的要求，只是显得有点儿多余），可以让 decrease 操作把计数从 2 降到 1。写出来大概是这样：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def decrease(character c):
    c.count -= 1
    total.count -= 1
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;根据这个规则重新迭代计算，结果如下表示，发现到第 9 次迭代后就收敛完毕。&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;ID&lt;/th&gt;
&lt;th class="head"&gt;一&lt;/th&gt;
&lt;th class="head"&gt;二&lt;/th&gt;
&lt;th class="head"&gt;三&lt;/th&gt;
&lt;th class="head"&gt;四&lt;/th&gt;
&lt;th class="head"&gt;五&lt;/th&gt;
&lt;th class="head"&gt;六&lt;/th&gt;
&lt;th class="head"&gt;七&lt;/th&gt;
&lt;th class="head"&gt;八&lt;/th&gt;
&lt;th class="head"&gt;九&lt;/th&gt;
&lt;th class="head"&gt;十&lt;/th&gt;
&lt;th class="head"&gt;个&lt;/th&gt;
&lt;th class="head"&gt;新&lt;/th&gt;
&lt;th class="head"&gt;的&lt;/th&gt;
&lt;th class="head"&gt;句&lt;/th&gt;
&lt;th class="head"&gt;话&lt;/th&gt;
&lt;th class="head"&gt;共&lt;/th&gt;
&lt;th class="head"&gt;有&lt;/th&gt;
&lt;th class="head"&gt;字&lt;/th&gt;
&lt;th class="head"&gt;TC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;49&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;59&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;62&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这样得到的自统计句子是：&lt;/p&gt;
&lt;blockquote&gt;
新的一句话一共有六十六个字，五个“一”，十一个“二”，三个“三”，二个“四”，二个“五”，三个“六”，一个“八”，二个“九”，四个“十”，十九个“个”，二个“新”，二个“的”，二个“句”，二个“话”，二个“共”，二个“有”，二个“字”。&lt;/blockquote&gt;
&lt;p&gt;其中比较特殊的就是“一个‘八’”，句子中确实只有这个地方出现了 1 个“八”字，其他字的个数和总字数也都没错，但这个“一个‘八’”没有什么实际的意义。不引入这种“一个 XX”能否找到符合这个模板的解呢？目前我还没有明确的答案。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id31"&gt;再遇困境&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id14"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id32"&gt;问题&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;很快就又遇到了新的麻烦，比如把句子模板开头换成“这句话”，即：&lt;/p&gt;
&lt;blockquote&gt;
这句话一共有__个字，__个“__”，__个“__”，……。&lt;/blockquote&gt;
&lt;p&gt;算一下就会发现，不论是像开始那样直接从 2 减到 0，还是像刚才那样从 2 减到 1，全都会陷入无法终止的迭代。&lt;/p&gt;
&lt;p&gt;实际上随便想一个句子模板出来，十有八九会是这样的，能像前两个例子那样收敛出结果的非常少。这可怎么办呢？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id33"&gt;解决&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;想了一个简单粗暴的办法，效果还不错。前面提到 decrease 操作有两个方案，区别在于对于计数 2 做 decrease 的时候，要么直接减到 0，要么减到 1。那么一个直接的想法就是不要那么死板，让这个抉择可以随机的使用，即有一半的概率会直接减到 0，另一半的概率是减到 1。这个不确定性因素实际上是给迭代过程带来了一点儿干扰。如果按照某个确定的方案，迭代过程很容易陷入无穷尽的震荡，这时候如果引入一下随机的干扰，就有可能打破稳定的震荡，使得迭代过程偏离当前的动态平衡点，或许就刚好落在一个收敛的位置上了。&lt;/p&gt;
&lt;p&gt;改造后的 decrease 操作大致是这样的：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def decrease(character c):
    if c.count == 2 and random.choice(0, 1) == 0:
        c.count -= 2
        total.count -= 2
        decrease('个')
    else:
        c.count -= 1
        total.count -= 1
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;用上面遇到问题的模板来说，以 3 作为随机数种子时可以得到这样的迭代过程，其中第 9 次和第 10 次的结果一致，是一个可行解。&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;col width="5%"/&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;ID&lt;/th&gt;
&lt;th class="head"&gt;一&lt;/th&gt;
&lt;th class="head"&gt;二&lt;/th&gt;
&lt;th class="head"&gt;三&lt;/th&gt;
&lt;th class="head"&gt;四&lt;/th&gt;
&lt;th class="head"&gt;五&lt;/th&gt;
&lt;th class="head"&gt;六&lt;/th&gt;
&lt;th class="head"&gt;七&lt;/th&gt;
&lt;th class="head"&gt;八&lt;/th&gt;
&lt;th class="head"&gt;九&lt;/th&gt;
&lt;th class="head"&gt;十&lt;/th&gt;
&lt;th class="head"&gt;个&lt;/th&gt;
&lt;th class="head"&gt;这&lt;/th&gt;
&lt;th class="head"&gt;句&lt;/th&gt;
&lt;th class="head"&gt;话&lt;/th&gt;
&lt;th class="head"&gt;共&lt;/th&gt;
&lt;th class="head"&gt;有&lt;/th&gt;
&lt;th class="head"&gt;字&lt;/th&gt;
&lt;th class="head"&gt;TC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;49&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;53&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;56&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;59&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;59&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;把计数结果带入到模板中，得到一个自统计句子：&lt;/p&gt;
&lt;blockquote&gt;
这句话一共有五十八个字，三个“一”，十一个“二”，三个“三”，二个“四”，二个“五”，二个“七”，二个“八”，四个“十”，十七个“个”，二个“这”，二个“句”，二个“话”，二个“共”，二个“有”，二个“字”。&lt;/blockquote&gt;
&lt;p&gt;思考一下随机干扰对迭代收敛的作用，可以想见，这个随机选择进行的越频繁，迭代过程就越不稳定，遇到收敛点的概率相对也就越大。但如果迭代已经陷入到一个稳定震荡的状态，在整个振荡周期内却始终没有用到这个随机干扰，那还是没有办法跳出死循环。所以实际的程序会通过某种方式（最简单的就是设置最大迭代次数）判断是否陷入死循环并强制终止当前的迭代过程，从头开始重新走一遍。由于早期计数比较小，很容易遇到需要从 2 减到 0 或 1 的情况，大量的随机干扰可能会使得整个迭代过程完全变样，有可能会得到收敛的解。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id16"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id34"&gt;三碗不过岗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;引入随机扰动后，大部分问题都能搞定了。但对于过于复杂的模板依旧无能为力，模板复杂之后，能够遇到从 2 减到 0 或 1 的次数很少，很难跳出死循环。&lt;/p&gt;
&lt;p&gt;有时候很简单的模板也无法得到结果，比如&lt;/p&gt;
&lt;blockquote&gt;
一三五七一共有__个字，__个 “__”，__个 “__”，……。&lt;/blockquote&gt;
&lt;p&gt;这里可能有两个问题，一个是我的算法只能保证收敛得到的结果是正确的，无法保证一定收敛。加入随机干扰可能在一定程度上加大收敛的概率，却也没有本质的提升。另一个是任意给定一个模板，是否一定有解？这方面也还没有太多的思路。&lt;/p&gt;
&lt;p&gt;相关的程序 &lt;a class="reference external" href="https://github.com/calfzhou/self-descriptive-sentence"&gt;在 github 上&lt;/a&gt;，目前除了可以生成中文的句子，还可以生成基于数字的句子。比如：&lt;/p&gt;
&lt;blockquote&gt;
1 employs 11 digits, 4 1's, 3 2's, 2 3's, 2 4's.&lt;/blockquote&gt;
&lt;p&gt;以后可能会在两个方面做改进，一是模板化，一是迭代算法。现在是按照语言分的，其实语言只是模板的一个因素。模板化之后可以用同样的方法构造出更多更有趣的句子来。迭代算法方面，目前想到的是利用遗传算法，不过具体怎么操作还没有太多的想法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id17"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id35"&gt;后记&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;说来也巧，刚才无意间又找到了十年前我所看到的文章，原来是 &lt;a class="reference external" href="http://blog.joycode.com/zee/"&gt;@zee&lt;/a&gt; 在 2004 年 8 月的一篇博文 &lt;a class="reference external" href="http://blog.joycode.com/zee/archives/2004/08/04/29469.joy"&gt;《以前玩出来的几个句子，怀旧一下》&lt;/a&gt;。摘录原文如下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一年多前写程序生成的，当时好像 VS2K3 刚出来，写这个程序的主要目的是为了玩弄 2K3&lt;/p&gt;
&lt;p&gt;聪明的张先生生成的这个句子一共有一百一十三个字其中有二个百三个有二个子七个三三个生十五个二二个先二个字一个八二个七一个四二个明一个六二个成一个零二个张二个中二个其二个共二个这五个十二个句十个一三十一个个三个的二个聪一个九三个五&lt;/p&gt;
&lt;p&gt;你看到的这个句子一共有九十个字。其中有：二个“你”，二个“看”，二个“到”，二个“的”，二个“这”，二十六个“个”，二个“句”，二个“子”，二个“共”，三个“有”，二个“字”，二个“其”，二个“中”，四个“一”，十七个“二”，二个“三”，四个“四”，一个“五”，二个“六”，二个“七”，一个“八”，二个“九”，四个“十”。&lt;/p&gt;
&lt;p&gt;这个句子一共有七十五个字。其中有四个“十”；二个“子”；四个“三”；十二个“二”；二个“字”；一个“八”；三个“四”；一个“六”；二个“七”；二个“中”；二个“其”；二个“共”；二个“这”；二个“句”；五个“一”；二十二个“个”；三个“有”；一个“九”；三个“五”。&lt;/p&gt;
&lt;p&gt;现在是既没有心情也没有时间玩这些东东了............&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;谨以此纪念逝去的岁月。&lt;/p&gt;
&lt;/div&gt;
</content><category term="算法"></category><category term="Puzzle"></category><category term="Natural Language"></category></entry><entry><title>迁移 WordPress 博客</title><link href="https://blog.gocalf.com/move-wordpress-blog" rel="alternate"></link><published>2014-07-31T11:16:00+08:00</published><updated>2014-07-31T11:16:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2014-07-31:/move-wordpress-blog</id><summary type="html">&lt;p class="first last"&gt;记录一下前些日子迁移一个 WordPress 博客的过程。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;之前一直害怕折腾 WordPress 搭出来的博客，主要是对 PHP 和 MySql 都不太熟悉，对相关的备份啊、迁移啊也不太熟悉。前段时间，不得不对一个 WordPress 博客做了迁移，从一台服务器挪到了另外一台上，还挺顺利的，记录一下。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;准备好目标环境&lt;/h2&gt;
&lt;p&gt;现在目标机器上装好相关的环境，PHP、MySQL 之类的，然后安装 WordPress。我已经把源机器上的 WordPress 升级到最新版本了，所以在目标机器上也装上最新版本就行了。&lt;/p&gt;
&lt;p&gt;没试过在不同版本的 WordPress 之间做数据迁移，感觉如果没有特别的原因，还是尽量保持两边的版本一致吧。&lt;/p&gt;
&lt;p&gt;当然需要给 WordPress 创建一个数据库（比如叫做 &lt;tt class="docutils literal"&gt;my_wordpress&lt;/tt&gt;）以及用户（比如 &lt;tt class="docutils literal"&gt;wp_user&lt;/tt&gt;）：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mysql -uroot -p
mysql&amp;gt; CREATE DATABASE my_wordpress;
mysql&amp;gt; GRANT ALL PRIVILEGES ON my_wordpress.* TO wp_user@localhost IDENTIFIED BY &amp;quot;use-your-real-password&amp;quot;;
mysql&amp;gt; FLUSH PRIVILEGES;
mysql&amp;gt; EXIT
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;暂停博客&lt;/h2&gt;
&lt;p&gt;在对源博客数据打包前，先要暂停它的服务，避免不必要的数据错误或者遗失。我选择了 &lt;a class="reference external" href="http://sivel.net/2009/06/wordpress-maintenance-mode-without-a-plugin/"&gt;最省事的方法&lt;/a&gt;，直接在博客根目录下创建一个名为 &lt;tt class="docutils literal"&gt;.maintenance&lt;/tt&gt; 的文件，内容为：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nv"&gt;$upgrading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;这样再访问源博客的时候，页面会提示“正在执行例行维护，请一分钟后回来”。当然了，这里的“一分钟”是写死的，什么时候来看都是同样的提示。&lt;/p&gt;
&lt;p&gt;原理是 WordPress 会检查根目录下是否存在名为 &lt;tt class="docutils literal"&gt;.maintenance&lt;/tt&gt; 的文件，如果存在，则会检查当前时刻与该文件提供的 &lt;tt class="docutils literal"&gt;$upgrading&lt;/tt&gt; 数值之间的差异，如果当前时刻减去 &lt;tt class="docutils literal"&gt;$upgrading&lt;/tt&gt; 小于十分钟，则会显示正在维护，否则就正常访问。现在 &lt;tt class="docutils literal"&gt;$upgrading&lt;/tt&gt; 的值永远跟当前时刻一致，计算出来的差值一直都是 0，所以会一致在维护状态中。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;打包源博客数据&lt;/h2&gt;
&lt;p&gt;WordPress 博客的文章、评论等数据都保存在数据库中，直接 dump 出来就可以做备份或者迁移。我就直接用 mysqldump 命令来导出现有的数据：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysqldump -uDB_USER_NAME -pDB_USER_PASSWORD DB_NAME &lt;span class="p"&gt;|&lt;/span&gt; gzip &amp;gt; my-worpress.sql.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;命令中大写的部分需要用自己的用户名、密码和数据库名替换。导出的文件用 gzip 压缩一下以便通过网络复制到目标机器。&lt;/p&gt;
&lt;p&gt;附件、插件、主题等都保存在 wp-content 目录中，直接压缩打包：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -zcf content.tar.gz wp-content
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;在目标机器恢复数据&lt;/h2&gt;
&lt;p&gt;上面打包好的两个文件可以通过 scp、ftp 等工具传送到新的机器上，然后分别将数据恢复出来即可。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunzip &amp;lt; my-worpress.sql.gz &lt;span class="p"&gt;|&lt;/span&gt; mysql -uwp_user -pYOUR_PASSWORD my_wordpress
tar -zxf content.tar.gz
cp -Rp wp-content/* PATH-TO-YOUR-WORDPRESS-wp-content-FOLDER
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;配置文件&lt;/h2&gt;
&lt;p&gt;如果源博客的 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wp-config.php&lt;/span&gt;&lt;/tt&gt; 里面做过一些特别的修改，把它们也写到新博客的配置文件里即可。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;善后&lt;/h2&gt;
&lt;p&gt;最后把目标机器上的 web server 配置好，把域名解析切换过去就好了。&lt;/p&gt;
&lt;/div&gt;
</content><category term="建站"></category><category term="WordPress"></category><category term="Blog"></category></entry><entry><title>在苹果系统上打造舒服的开发环境</title><link href="https://blog.gocalf.com/make-mac-better-for-development" rel="alternate"></link><published>2014-07-26T11:00:00+08:00</published><updated>2014-07-26T11:00:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2014-07-26:/make-mac-better-for-development</id><summary type="html">&lt;p class="first last"&gt;对 Mac OS X 做一番处理，使之更加适合程序开发。&lt;/p&gt;
</summary><content type="html">
&lt;p&gt;用苹果系统已经有一段时间了，越来越喜欢这个系统，不管是一般的使用、做设计、做开发，都非常适合。最近也对系统做了一些调整，使得开发环境更加的舒服，记录下来，免得忘了。&lt;/p&gt;
&lt;p&gt;实际的过程是漫长而曲折的，跟下面所写的顺序完全没有关系。如果按照下面的步骤操作，中间难免会遇到一些问题（大多是由于墙导致的），那时再自行 Google 吧。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;基础设施&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="iterm"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;iTerm&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;对于几乎离不开 shell 的开发者来说，一款优秀的终端程序是基础的基础。&lt;/p&gt;
&lt;p&gt;毫无疑问，我用的是 &lt;a class="reference external" href="http://www.iterm2.com/"&gt;iTerm2&lt;/a&gt;。如果说访问互联网世界的入口是 Chrome，那么访问程序世界的入口就是 iTerm 了。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="iterm2_logo" src="https://blog.gocalf.com/images/2014/07/iterm2_logo.png"/&gt;
&lt;/div&gt;
&lt;p&gt;字体选择一款好看的等宽字体即可，比如常用的 Consolas、 Curier New 等。我用的是 &lt;a class="reference external" href="https://github.com/adobe/source-code-pro"&gt;Source Code Pro&lt;/a&gt;。中文使用 Microsoft YaHei 字体。&lt;/p&gt;
&lt;p&gt;配色当然首选 &lt;a class="reference external" href="https://github.com/altercation/solarized"&gt;Solarized&lt;/a&gt; 的暗色系，在 Github 上可以找到专门提供给 iTerm2 用的配色文件 &lt;a class="reference external" href="https://github.com/altercation/solarized/blob/master/iterm2-colors-solarized/Solarized%20Dark.itermcolors"&gt;Solarized Dark.itemcolors&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="homebrew"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;Homebrew&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://brew.sh/"&gt;Homebrew&lt;/a&gt; installs the stuff you need that Apple didn't.&lt;/p&gt;
&lt;p&gt;我电脑上的大部分工具都是通过 homebrew 安装和管理的，非常方便。虽然提供类似功能的还有 &lt;a class="reference external" href="http://www.finkproject.org/"&gt;Fink&lt;/a&gt; 和 &lt;a class="reference external" href="http://www.macports.org/"&gt;macports&lt;/a&gt;，但我认为 Homebrew 是最方便的。具体的就不在这里比较了，大家可以自行调研。当然，至少选择一个来帮助自己安装盒管理软件包，会让很多事情变得更容易。&lt;/p&gt;
&lt;p&gt;安装 Homebrew 非常方便，首先要安装 &lt;a class="reference external" href="https://developer.apple.com/downloads/index.action"&gt;Command Line Tools for Xcode&lt;/a&gt;，然后运行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ruby -e &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在使用 Homebrew 的过程中，要注意经常更新它。在 brew 的世界中，24 小时就已经是非常久了。所以在安装某个包或者做其他操作之前，一般都要运行 &lt;tt class="docutils literal"&gt;brew update&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;brew doctor&lt;/tt&gt;，前者用于更新 Homebrew 自身和各个软件包，后者用于排查可能会遇到的问题。我之前没注意这个（也是因为那时候还没太依赖于 Homebrew），有一次安装一个程序，总是提示我有一个依赖没有装，但那个依赖明明就在那儿，百思不得其解，还跑到 github 上发 issue 去问，被拍了一顿。其实只要 brew update 一下就知道，我安装的那个依赖包太老了，升级了就好了。&lt;/p&gt;
&lt;p&gt;在安装某个程序前，我一般也要先 &lt;tt class="docutils literal"&gt;brew info $FORMULA&lt;/tt&gt; 一下看看，了解一下有没有什么值得注意的参数，安装后有什么需要手动进行的后续操作。&lt;/p&gt;
&lt;p&gt;Homebrew 默认会掌控系统中的 &lt;tt class="docutils literal"&gt;/usr/local&lt;/tt&gt; 目录，目前我这个目录也就只是给 Homebrew 用了，其他的东西都不往里放。在使用 Homebrew 的过程中，一般都避免使用 sudo 进行操作，实际上现在的版本用了 sudo 也就没法使了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;Python&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;苹果系统自带了好几个版本的 Python，装在 /Library/Python 中。不过版本都不新，为了便于维护，还是自己装一个 Python 吧。用 &lt;tt class="docutils literal"&gt;brew install python&lt;/tt&gt; 可以安装最新的 Python 2.x，用 &lt;tt class="docutils literal"&gt;brew install python3&lt;/tt&gt; 可以安装最新的 Python 3.x。&lt;/p&gt;
&lt;p&gt;Homebrew 的 Python 已经安装了 pip，用于管理 Python 的软件包。根据 &lt;tt class="docutils literal"&gt;brew info python&lt;/tt&gt; 提供的提示，运行下列命令对 pip 进行更新：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install --upgrade setuptools
pip install --upgrade pip
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;我现在使用 &lt;a class="reference external" href="http://virtualenv.readthedocs.org/en/latest/"&gt;virtualenv&lt;/a&gt; 来管理 Python 的环境，用 &lt;a class="reference external" href="http://virtualenvwrapper.readthedocs.org/en/latest/"&gt;virtualenvwrapper&lt;/a&gt; 来方便地使用 virtualenv。分别用 pip 进行安装：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install virtualenv
pip install virtualenvwrapper
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;virtualenvwrapper 提供了很多方便的命令，还支持命令的 tab completion，这些都包含在 virtualenvwrapper.sh 文件中。在 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.bash_profile&lt;/span&gt;&lt;/tt&gt; 中引入该文件来激活相关的命令和功能：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;VIRTUAL_ENV_DISABLE_PROMPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.virtualenvs
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PROJECT_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/projects
&lt;span class="o"&gt;[&lt;/span&gt; -f &lt;span class="s2"&gt;"/usr/local/bin/virtualenvwrapper.sh"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"/usr/local/bin/virtualenvwrapper.sh"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;准备好后就可以用 &lt;tt class="docutils literal"&gt;mkvirtualenv ENVNAME&lt;/tt&gt; 来创建一个新的 virtualenv，用 &lt;tt class="docutils literal"&gt;workon&lt;/tt&gt; 命令来切换环境，用 &lt;tt class="docutils literal"&gt;deactive&lt;/tt&gt; 退出虚拟环境。更多的命令可以查看 &lt;a class="reference external" href="http://virtualenvwrapper.readthedocs.org/en/latest/"&gt;virtualenvwrapper&lt;/a&gt; 的文档。&lt;/p&gt;
&lt;p&gt;另外，&lt;a class="reference external" href="http://ipython.org/"&gt;ipython&lt;/a&gt; 是非常好用的 Python 的交互式终端，比 Python 自身的命令行提供了更丰富和方便的功能，建议使用。通过 &lt;tt class="docutils literal"&gt;pip install ipython&lt;/tt&gt; 即可安装。不过目前我还没想清楚要不要把它装在某个虚拟环境中。按理说应该是要在任何一个虚拟环境中都能用 ipython 的，否则就要给每个虚拟环境都装一次，岂不是很浪费空间？这个问题以后再考虑吧。&lt;/p&gt;
&lt;p&gt;ipython 除了 shell console 外，还提供 Qt console，详细的信息查看官方的介绍吧。&lt;/p&gt;
&lt;!-- 科学上网
- - - - - - - -

由于一些众所周不知的原因，这个世界上存在着一些不存在的网站。本来不应该为不存在的事物所烦恼，但对于开发人员来说，不存在的世界中却存在着一些非常有价值的资源。所以，需要用科学的方法访问互联网。

我目前主要用到了 `goagent`_、SSH tunnel、`proxychains-ng`_、`dnscrypt-proxy`_ 和 `unbound`_。

goagent 需要在 Google App Engine 上用自己的账号安装服务端，在本地用 python 运行客户端。具体的安装方法参见官网介绍。我创建一个 virtualenv 给它使用，在这个虚拟环境中安装相关的 Python 依赖。

.. code-block:: bash

    mkvirtualenv goagent
    pip install pyopenssl
    pip install pycrypto
    pip install gevent

用 goagent 访问 HTTPS 网站的时候，需要安装证书。现在的 goagent 已经可以自动安装证书了（需要用 sudo 权限运行）。如果是第一次使用 goagent，可以先将 goagent 的 local 目录中的 ca.cer、ca.key 和 certs 目录内的文件都删除，删除浏览器或系统中的 goagent ca 证书，然后用 sudo 权限启动 goagent，它会自行安装证书到系统中。我建议一直使用 sudo 权限运行 goagent。

在 Mac 系统中，利用系统的 launchd 来控制 goagent 的随系统（以 root 权限）启动。可以在 /Library/LaunchDaemons 中创建一个扩展名为. plist 的文件，内容为（需要根据你的实际环境进行调整）：

.. code-block:: xml

    &lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
    &lt;plist version="1.0"&gt;
    &lt;dict&gt;
        &lt;key&gt;Label&lt;/key&gt;
        &lt;string&gt;com.github.calfzhou.goagent.local&lt;/string&gt;
        &lt;key&gt;ProgramArguments&lt;/key&gt;
        &lt;array&gt;
            &lt;string&gt;YOUR_OWN_PATH/.virtualenvs/goagent/bin/python&lt;/string&gt;
            &lt;string&gt;proxy.py&lt;/string&gt;
        &lt;/array&gt;
        &lt;key&gt;RunAtLoad&lt;/key&gt;
        &lt;true/&gt;
        &lt;key&gt;ServiceDescription&lt;/key&gt;
        &lt;string&gt;Goagnet proxy&lt;/string&gt;
        &lt;key&gt;StandardErrorPath&lt;/key&gt;
        &lt;string&gt;/dev/null&lt;/string&gt;
        &lt;key&gt;StandardOutPath&lt;/key&gt;
        &lt;string&gt;/dev/null&lt;/string&gt;
        &lt;key&gt;WorkingDirectory&lt;/key&gt;
        &lt;string&gt;YOUR_OWN_PATH/goagent/local&lt;/string&gt;
    &lt;/dict&gt;
    &lt;/plist&gt;

给系统的网络连接设置代理，进入 System Preferences -&gt; Network，选择使用的网络，点击 Advanced...，在 Proxies 页中勾选“Automatic Proxy Configuration”，在 URL 内填入“http://127.0.0.1:8086/proxy.pac”，保存生效。

对于 Chrome 浏览器，推荐使用 `Proxy SwichySharp`_ 插件。鉴于 Google 所有的服务都访问不顺畅，这个链接可能不太容易访问到，可以考虑使用 `chrome extension downloader`_ 网站来直接下载插件的. crx 文件。用非 Chrome 浏览器打开该网站，输入 Proxy SwichySharp 的 ID（dpplabbmogkhghncfbfdeeokoefdjegm），下载保存，然后在 Chrome 的 extensions 页面中把 .crx 文件拖进去即可。goagent 里也提供了该插件的 .crx 文件以及配置文件，可以直接使用（作者想的真周到啊）。

系统的网络连接代理和 Chrome 的代理插件基本能解决大部分网页访问的需求，比如苹果自带的 Safari 就会默认通过系统的代理，也就能科学地上网了。不过 wget、curl 等 shell 命令却无法直接使用这些代理，它们会根据环境变量 ``http_proxy`` 和 ``https_proxy`` 来访问网络。为了方便，在 ``~/.bash_profile`` 中添加：

.. code-block:: bash

    # Setup or dismiss (goagent) proxy for curl, wget, etc.
    alias gaproxy='export http_proxy=http://127.0.0.1:8087 https_proxy=http://127.0.0.1:8087'
    alias noproxy='unset http_proxy https_proxy'

在需要 wget 或者 curl 某个不存在的网页前，通过 ``gaproxy`` 命令开启代理，使用完毕后通过 ``noproxy`` 关闭代理即可。

有的时候 goagent 会抽疯，一个备选的代理是必需的。我一般会利用 SSH 隧道，通过 gocalf 网站所在的主机建立 socks 代理。如果你也有一台在国外的服务器，可以通过这个命令在本地开启 socks5 代理服务：

.. code-block:: bash

    ssh -D LOCAL_PORT(7070) -p REMOTE_SSH_PORT(22) USER_NAME@SERVER_ADDRESS

对于不支持 ``http_proxy`` 和 ``https_proxy`` 的程序，我会使用 `proxychains-ng`_。通过 ``brew install proxychains-ng`` 即可安装，运行的命令是 ``proxychains4``。这个有点儿像 Windows 里的 SocksCap，但是更强大些，比如想从一个不存在的 svn 站点下载代码，可以用 ``proxychains4 svn checkout xxxx`` 实现。

最近发现 `Dropbox`_ 的客户端即使设置上 goagent 代理也不好使（网页倒是没问题），所幸 Dropbox（还有 Facebook 等）不存在的原因只是域名解析被人为破坏了，只要能解析出正确的 ID 地址，不用代理也能够访问。为了防止域名解析被恶意破坏，我又祭出了 `dnscrypt-proxy`_ 这个法宝。不幸的是，dnscrytp-proxy 的下载站点本身就是不存在的，要用前面提到的 ``gaproxy`` 激活代理后才能下载成功：

.. code-block:: bash

    gaproxy
    brew install dnscrypt-proxy
    noproxy

安装后根据提示设置成开机自动启动即可。默认的话它会监听 127.0.0.1 的 53 端口提供 DNS 服务，上游使用 OpenDNS 服务（可自行配置），并使用加密通信来防止 DNS 污染。将网络连接的 DNS 设置为 127.0.0.1（System Preferences -&gt; Network -&gt; 当前使用的网络 -&gt; Advanced... -&gt; DNS -&gt; DNS Servers），就会发现即使没有 goagent，Dropbox、Facebook 等网站也变得存在了。

dnscrypt-proxy 有个缺点就是没有缓存功能，每次来个域名都要去远程服务器上解析一次，速度很慢，非常影响上网的体验，建议配合具备 DNS 缓存的工具一起使用，比如 `unbound`_、`dnsmasq`_ 等。二者都可以通过 Homebrew 安装，非常方便。当然要配合使用，就需要一些配置，在性能方面也需要做一些优化，这里就不再仔细说了。 --&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="shell"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;友好的 Shell&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;有了 iTerm 还不够，要让 shell 变得好用，还需要再做一些配置。&lt;/p&gt;
&lt;div class="section" id="bash-profile"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;Bash Profile&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.bash_profile&lt;/span&gt;&lt;/tt&gt; 的作用就不用我多说了，在这里可以对 shell 进行很多的个性化配置。参考 &lt;a class="reference external" href="https://github.com/mathiasbynens/dotfiles"&gt;mathiasbynens 的 dotfiles&lt;/a&gt; 项目，我也为自己打造了舒适的 shell 环境，相关的配置保存在 &lt;a class="reference external" href="https://github.com/calfzhou/dotfiles/tree/master/bash"&gt;GitHub - calfzhou - dotfiles - bash&lt;/a&gt; 里面，对 Mac 和 Linux 都是可以的，让我在不同的服务器上也有相同的操作体验。涉及到的内容很多，就不逐一介绍了，比较重要的几点下面会提到。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dir-colors"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;Dir Colors&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;虽然 iTerm 本身已经设置好了 Solarized 配色，但是 ls 的时候并不一定有颜色。ls 没有颜色绝对是让人难以忍受的，在 &lt;a class="reference external" href="https://github.com/calfzhou/dotfiles/blob/master/bash/bash_inc/aliases"&gt;bash_inc/alias&lt;/a&gt; 里除了根据系统中 ls 支持的参数让 ls 的输出显示出颜色外，还通过配置 &lt;tt class="docutils literal"&gt;LS_COLOR&lt;/tt&gt; 让色彩更丰富，可以让不同类型的文件有不同的颜色，看起来非常的清晰。推荐使用 &lt;a class="reference external" href="https://github.com/seebi/dircolors-solarized"&gt;dircolors-solarized&lt;/a&gt; 提供的配色文件，在 Mac OS X 的采用了 Solarized Dark 配色的 iTerm2 里看起来会是这个样子：&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="dircolors-solaized-dark" src="https://blog.gocalf.com/images/2014/07/dircolors_solarized_dark.png"/&gt;
&lt;p class="caption"&gt;iTerm2 中 Solarized Dark 系的 dircolors 效果&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bash-prompt"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;Bash Prompt&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在使用 shell 的过程中，命令提示符会一直陪伴着我们，是时候扔掉默认的提示符了。&lt;a class="reference external" href="https://github.com/calfzhou/dotfiles/blob/master/bash/bash_inc/bash_prompt"&gt;我的命令提示符&lt;/a&gt; 用不同的颜色分别显示出当前时刻、当前用户、当前主机（通过颜色标识是否通过是通过 SSH 登录的）、当前使用的 Python virtualenv（如果有的话）、当前目录、当前目录所在的 git 分支和状态（如果是 git 项目的目录的话）。&lt;/p&gt;
&lt;p&gt;关于主机名，Mac 系统下默认应该是 localhost，可以通过 scutil 命令修改成想要的值：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo scutil --set HostName MYNAME
$ hostname
MYNAME
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;配合上 iTerm 的配色、ls 的颜色等，我的 shell 看起来是这样的：&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="my-shell-demo" src="https://blog.gocalf.com/images/2014/07/my-shell-demo.png"/&gt;
&lt;p class="caption"&gt;我的 iTerm2 的效果&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bash-completion"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;Bash Completion&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在 shell 里面输入命令的时候，如果只记得开头几个字母，后面的记不清楚了也没关系，输入几个字母后，按 TAB 键就可以自动补全或者提示出所有可行的命令。在输入文件名的时候也可以通过 TAB 键自动补全或者提示出有效的文件文来，这个功能是非常方便的。Homebrew 又额外提供了一些 bash completion 功能，可以通过 &lt;tt class="docutils literal"&gt;brew install &lt;span class="pre"&gt;bash-completion&lt;/span&gt;&lt;/tt&gt; 进行安装，并会生成 &lt;tt class="docutils literal"&gt;/usr/local/etc/bash_completion&lt;/tt&gt; 文件，在 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.bash_profile&lt;/span&gt;&lt;/tt&gt; 中 source 一下这个文件，就可以把 Homebrew 提供的命令补全包含进来。如果通过 Homebrew 安装了别的工具包，比如 git、svn 等，它们也会有各自相应的命令补全文件，存放在 &lt;tt class="docutils literal"&gt;/usr/local/etc/bash_completion.d&lt;/tt&gt; 目录中，都会被刚才那个文件自动引入。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="shell-commands"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;Shell Commands&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;用惯了 Linux（CentOS）里面的 shell 命令，就无法忍受 Mac 系统中那些落后的 shell 命令了，像 ls、date、ps、echo、grep 等等，功能都特别少。在忍无可忍之后，终于决定用 &lt;a class="reference external" href="http://www.gnu.org/software/coreutils/"&gt;GNU Coreutils&lt;/a&gt; 替换它们。用 &lt;tt class="docutils literal"&gt;brew install coreutils&lt;/tt&gt; 就可以搞定了，安装完成后，根据提示，将 &lt;tt class="docutils literal"&gt;/usr/local/opt/coreutils/libexec/gnubin&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;/usr/local/opt/coreutils/libexec/gnuman&lt;/tt&gt; 分别添加到 &lt;tt class="docutils literal"&gt;$PATH&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;$MANPATH&lt;/tt&gt; 中即可。&lt;/p&gt;
&lt;p&gt;grep 命令不在 coreutils，可以通过 &lt;tt class="docutils literal"&gt;brew install grep &lt;span class="pre"&gt;--default-names&lt;/span&gt;&lt;/tt&gt; 搞定（如果说找不到 grep 可以先 &lt;tt class="docutils literal"&gt;brew tap homebrew/dupes&lt;/tt&gt;）。当然还有很多其他特别有用的命令，就不一一细说了，反正想到什么，只要用 &lt;tt class="docutils literal"&gt;brew info&lt;/tt&gt; 或者 &lt;tt class="docutils literal"&gt;brew search&lt;/tt&gt; 找找看就行。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ide"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;编辑器和 IDE&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="vim"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id19"&gt;VIM&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;其实我也不是 VIM 重度使用者，现在写超过两个文件的 Python 代码、Java 代码等都会使用专门的 IDE。我看很多人都喜欢用 VIM 来写复杂的项目代码，但他们的 VIM 都没有做任何额外的设置，自身对 VIM 的快捷键和命令也不熟悉，只是把 VIM 当成一个连移动光标都很费劲的编辑器来用，写代码的效率可想而知。而且像 Python 这种脚本语言，很多错误只有到运行到那句话的时候才会有效果，VIM 没有足够的只能针对某一个语言做太多的静态分析。&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.vimrc&lt;/span&gt;&lt;/tt&gt; 用于对 VIM 进行各种设置，如果没有这个文件，赶紧创建一个吧。复杂的语法高亮、配色、插件等都可以放在 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.vim&lt;/span&gt;&lt;/tt&gt; 里面。VIM 自身对插件没有很好地管理，我选择了 &lt;a class="reference external" href="https://github.com/tpope/vim-pathogen"&gt;vim-pathogen&lt;/a&gt; 来管理所需要的 VIM 扩展。只要把 &lt;a class="reference external" href="https://github.com/tpope/vim-pathogen/blob/master/autoload/pathogen.vim"&gt;pathogen.vim&lt;/a&gt; 放在 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.vim/autoload&lt;/span&gt;&lt;/tt&gt; 目录中，把所需的扩展包放在 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.vim/bundle&lt;/span&gt;&lt;/tt&gt; 目录下即可。&lt;/p&gt;
&lt;p&gt;同样地，我也把自己的 VIM 设置和依赖放在 GitHub 上（&lt;a class="reference external" href="https://github.com/calfzhou/dotfiles/tree/master/vim"&gt;GitHub - calfzhou - dotfiles - vim&lt;/a&gt;），在别的 server 上直接 clone 下来保持一致的操作体验。&lt;/p&gt;
&lt;p&gt;我现在使用 &lt;a class="reference external" href="https://github.com/Rykka/riv.vim"&gt;riv.vim&lt;/a&gt; 扩展来写 reStructuredText 文件（.rst），操作起来非常方便。&lt;/p&gt;
&lt;p&gt;如果不满意苹果系统自带的较低版本的 VIM，或者想用 GUI 界面的 VIM，可以利用 Homebrew 进行安装，Formula 是 &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;macvim&lt;/tt&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sublime-text"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;Sublime Text&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; 是我现在主要使用的 GUI 编辑器，但看其首页的动画演示就会觉得非常 cool。以前还经常用 Ultra Edit 和 Notepad++，现在基本都不用了。在 GUI 程序中，我一般会使用 Solarized Light 配色方案，总感觉大部分 GUI 程序用暗色系就很丑（PyCharm 系列除外）。&lt;/p&gt;
&lt;p&gt;具体的配置也就不多说了。注意 Sublime Text 原生不支持 GBK 编码的文件，需要安装扩展包，即使这样，在编辑 GBK 编码的文件时，它会生成一个临时文件进行操作，保存的时候再写回去，体验上还是有些不爽。&lt;/p&gt;
&lt;p&gt;还有一个地方我也一直没搞清楚，就是中文字体不是刚刚好跟两个英文字母一样宽。在编辑 reStructuredText 文件的时候，还是会比较麻烦的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-ide"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id21"&gt;Python IDE&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;以前一直用 VIM 做 Python 开发，是因为没找到好用的 Python IDE，现在我用 &lt;a class="reference external" href="http://www.jetbrains.com/"&gt;JetBrains&lt;/a&gt; 出的 &lt;a class="reference external" href="http://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;。不要跟我争，这绝对是世界上最好用的 Python IDE，没有之一。&lt;/p&gt;
&lt;p&gt;PyCharm 里强烈推荐自带的 Darcula 配色，感觉在 GUI 界面中，这个配色比 Solarized Dark 要舒服一些。PyCharm 的默认配置基本就很好用了，它对 Python 代码的可读性检测方面要求还是比较严格的，空行、空格不合适都会有提示。如果 Python 项目中包含其他类型的文件（如 shell 脚本、html 页面等），它也有相应的插件可以对这些文件进行语法高亮。&lt;/p&gt;
&lt;p&gt;一直觉得如果 JetBrains 出一个通用的编辑器，应该能把 Sublime Text 甩出好几条街去。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="java-ide"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id22"&gt;Java IDE&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;好多人都用 Eclipse 写 Java 代码（包括 Android 开发），真想不通为什么那么难用的 IDE 还那么受欢迎。可能学校里交 Java 的时候都用的 Eclipse 吧，就像直到现在都还有很多人用 VS6 做 C++ 开发一样。对于 Android 开发，可能跟之前 Google 推 Eclipse with ADT 有关吧。不过现在 Google 也认识到了 Eclipse 的不足，转身投入 &lt;a class="reference external" href="http://www.jetbrains.com/"&gt;JetBrains&lt;/a&gt; 的 &lt;a class="reference external" href="http://www.jetbrains.com/idea/"&gt;IntelliJ IDEA&lt;/a&gt; 的怀抱了。JetBrains 出品的个个都是精品啊，微软里面很多项目组也都在使用 JetBrains 出的 &lt;a class="reference external" href="http://www.jetbrains.com/resharper/"&gt;ReSharper&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我现在也是用 IntelliJ IDEA 来做 Java 开发，使用体验跟 PyCharm 类似。Java 项目的依赖管理用 Maven，Homebrew 里也提供了安装。建议目前使用 Maven 3.0.*：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew tap homebrew/versions
brew install maven30
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;当然如果要用最新的 3.2.*，可以直接 &lt;tt class="docutils literal"&gt;brew install maven&lt;/tt&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id23"&gt;版本控制&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="git"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id24"&gt;Git&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;用 Homebrew 可以方便地安装最新的 Git。如果像上面介绍的那样，用 Homebrew 安装并使用了 bash-completion，那么装好 git 后，git 指令也会按 TAB 键补全了，再也不动担心记不住 git 指令。&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.gitconfig&lt;/span&gt;&lt;/tt&gt; 可以用来定义很多个性化的设置，可以直接编辑或者通过 &lt;tt class="docutils literal"&gt;git config &lt;span class="pre"&gt;--global&lt;/span&gt;&lt;/tt&gt; 进行设置。类似的，我也把我的配置文件保存在 GitHub 上（&lt;a class="reference external" href="https://github.com/calfzhou/dotfiles/tree/master/git"&gt;GitHub - calfzhou - dotfiles - git&lt;/a&gt;），以便在不同的地方有同样的操作体验。&lt;/p&gt;
&lt;p&gt;顺便提一下，用 git 管理项目版本的话，推荐使用 &lt;a class="reference external" href="https://github.com/nvie/gitflow"&gt;git-flow&lt;/a&gt; 管理分支和版本，通过 Homebrew 可以直接安装它，同样也会带有 TAB 自动补全功能。关于这种分支管理的模型，可以阅读 &lt;a class="reference external" href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;A successful Git branching model&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果想在公开的 git 仓库中保存一些比较隐私的信息，可以利用 &lt;a class="reference external" href="https://github.com/shadowhand/git-encrypt"&gt;git-encrypt&lt;/a&gt; 来加密其中的一部分文件。这个也可以直接通过 Homebrew 安装。大致的介绍在之前的文章 &lt;a class="reference external" href="https://blog.gocalf.com/git-encrypt"&gt;用 Git 和云存储保存隐私信息&lt;/a&gt; 中略有介绍。&lt;/p&gt;
&lt;p&gt;如果还想用个 GUI 的 Git 客户端，我用的是 &lt;a class="reference external" href="http://rowanj.github.io/gitx/"&gt;GitX-dev&lt;/a&gt;，主要用来直观地观察分支的演化情况。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="gitx-dev" src="https://blog.gocalf.com/images/2014/07/gitx-dev.png"/&gt;
&lt;p class="caption"&gt;GitX-dev 界面演示&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="svn"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id25"&gt;SVN&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;用了 Git，就再也不想用 SVN 了。不过有时候也难免会需要用，用 Homebrew 安装个新版本的 SVN 吧，同样也会有 TAB 键补全哦。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="程序开发"></category><category term="Mac Develop"></category><category term="Homebrew"></category></entry><entry><title>将整数数字转换成中文</title><link href="https://blog.gocalf.com/number-to-chinese" rel="alternate"></link><published>2014-01-28T09:30:00+08:00</published><updated>2014-01-28T09:30:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2014-01-28:/number-to-chinese</id><summary type="html">&lt;p class="first last"&gt;一个简单的开发问题，（用 Python）编写一段程序，将一个任意给定的整数转换成对应的中文读法。比如输入数字 -12345，输出字符串“负一万二千三百四十五”。&lt;/p&gt;
</summary><content type="html">
&lt;p&gt;今天来看一个简单的程序开发问题，（用 Python）编写一段程序，将一个任意给定的整数（可正可负）转换成对应的中文读法。比如输入数字 -12345，输出字符串“负一万二千三百四十五”。&lt;/p&gt;
&lt;p&gt;同时也会稍微涉及到数据驱动的测试（data driven test）。&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;实际上，对于同一个数字，用中文的读法可能不唯一，在不同的场合也可能会有不同的习惯。我这里采用 Google 拼音输入法提供的读法。&lt;/p&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;准备工作&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;基本的方法很简单，从高位到低位依次把每个数字映射成对应的汉字，再把位数对应的汉字加上就可以了。如果是负数，则在前面加一个“负”即可。&lt;/p&gt;
&lt;p&gt;先把用中文读一个数字所需要的汉字都找出来，它们是“负零一二三四五六七八九十百千万亿兆”等。注意这里的“兆”表示 10 的 12 次方，而不是计算机领域的 10 的 6 次方。在开始之前，先要把这些汉字分分类，比如一二三四之间的差异跟十百千就不一样，跟万亿兆也不一样。&lt;/p&gt;
&lt;p&gt;最特殊的字是“负”，用一个单独的常量保存它。&lt;/p&gt;
&lt;p&gt;然后是“零”。在计数体系中，“零”跟其他数字可是有着本质区别的，在中文表达的时候，这种特殊性也非常明显，所以也单独分配一个常量。&lt;/p&gt;
&lt;p&gt;数字“一二三四五六七八九”是十进制数字中，除零之外的基本字符，对应了除“0”之外的全部九个阿拉伯数字符号。用一个常量数组保存。它们的特点是构成了一个差值为 1 的等差数列。&lt;/p&gt;
&lt;p&gt;“十百千”是每个万组内的数位标识，是一个比值为 10 的等比数列。在这里大家可以看出为什么不把“十”跟上一组汉字放在一起。&lt;/p&gt;
&lt;p&gt;最后是“万亿兆”，是比值为 10^4 的等比数列。实际上后面还可以继续写下去（参见 &lt;a class="reference external" href="http://www.douban.com/group/topic/5404723/"&gt;个十百千万亿兆后面是什么&lt;/a&gt;），比如 10^16 用“京”表示，再往后依次是“垓”、“杼”、“穰”、“溝”、“澗”、“正”、“載”、“極”（10^48）。如果还要写下去，还有“恆河沙”、“阿僧祇”、“那由他”、“不可思議”、“無量”、“大數”（10^72）。这种计数体系称为中法，是万进系统，以万递进。当然扯远了，程序中我们只用到“兆”，如果想要支持后面的字，只要修改常量就可以，对程序逻辑没有影响（除非要修改计数体系）。&lt;/p&gt;
&lt;p&gt;又啰嗦了。看一下这部分的代码（Python 2.7.x）。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="n"&gt;CHINESE_NEGATIVE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'负'&lt;/span&gt;
&lt;span class="n"&gt;CHINESE_ZERO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'零'&lt;/span&gt;
&lt;span class="n"&gt;CHINESE_DIGITS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'一'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'二'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'三'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'四'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'五'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'六'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'七'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'八'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'九'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;CHINESE_UNITS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'十'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'百'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'千'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;CHINESE_GROUP_UNITS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'万'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'亿'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'兆'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;初始版本&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;常量定义好之后，就先写个最简单的处理方法。负数和零就不多说了，只看正数的情况。&lt;/p&gt;
&lt;p&gt;比如数字是 12345，输出应该是“一万二千三百四十五”，在这种最普通的情况下，操作方法就是把每个数字对应的汉字和该数位所对应的汉字拼在一起，然后每个万组还要加上该万组的单位（即“万亿兆”）。&lt;/p&gt;
&lt;p&gt;因此首先需要从高位到低位枚举每一位数字，要同时知道数字和对应的数位（比如个位是 0，十亿位是 9，等等）。下面这段简单的程序是从低位开始枚举，使用的时候只要反转（reverse）一下就可以了。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_enumerate_digits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;:type number: int|long&lt;/span&gt;
&lt;span class="sd"&gt;:rtype: collections.Iterable[int, int]&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;//=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt;
    &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;然后来写第一个版本的目标函数，translate_number_to_chinese。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;translate_number_to_chinese&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;:type number: int|long&lt;/span&gt;
&lt;span class="sd"&gt;:rtype: string&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;long&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'number must be integer'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;CHINESE_ZERO&lt;/span&gt;

&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHINESE_NEGATIVE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;

&lt;span class="c1"&gt;# Begin core loop.&lt;/span&gt;
&lt;span class="c1"&gt;# Version 0.1&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_enumerate_digits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;))):&lt;/span&gt;
    &lt;span class="n"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHINESE_UNITS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHINESE_UNITS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHINESE_DIGITS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHINESE_UNITS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHINESE_GROUP_UNITS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# End core loop.&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;啊，由于工作原因，代码风格有所调整。以前在 Python 里函数名采用驼峰方式，首字母大写。现在改用小写加下划线了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;单元测试&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;显然上面的代码是有问题的，比如如果数字中有 0，有些结果就不太对。对于 11 到 19 的处理也有问题。因此需要做单元测试，多准备各种情况的测试用例尽可能覆盖更多的特殊情况。&lt;/p&gt;
&lt;p&gt;这里不详细说怎么创建和编写单元测试，只说一下数据驱动的测试（Data Driven Test）。&lt;/p&gt;
&lt;p&gt;一般在 Python 里写单元测试，比如想测试一下输入 10 时，程序输出是否正确。那就添加一个测试方法（test method），调用函数得到实际的输出值（现在应该是“一十”），跟期望的输出（应该是“十”）作比较。&lt;/p&gt;
&lt;p&gt;这样做的缺点是，如果想增加一个用例，就要添加一段代码，而新添加的代码整个逻辑是一样的，只是其中的输入和期望输出变了，代码重复度太高，而且也太麻烦了。&lt;/p&gt;
&lt;p&gt;对于这种情况会比较多的测试，一般会把各种需要测试的输入和期望输出写在一个数据文件里。于是可以在测试方法中读入文件中的每一组数据，用 for 循环依次进行测试。如果所有的测试用例都能成功也就没什么问题，但如果有些用例会失败，一旦某个用例失败，测试方法就会停止，后面的数据就不会再被测到。这样每次都只能看到第一个出现的错误，无法得到完整的测试结果。在改 bug 的时候，也很容易出现按住葫芦浮起瓢的事情。&lt;/p&gt;
&lt;p&gt;以前用 C# 的时候，做数据驱动的测试非常方便，只要给测试方法添加 &lt;a class="reference external" href="http://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.datasourceattribute.aspx"&gt;DataSource Attribute&lt;/a&gt; 就可以了。在 Python 里没有发现直接的方法，不过可以自己写一个简单的函数来处理，原理就是用数据文件中的每一个测试用例给测试类动态添加一个测试方法。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;foo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;translate_number_to_chinese&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestTranslateNumberToChinese&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_number_test_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_test_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;translate_number_to_chinese&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_test_method&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_tests&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;number_data_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'number_data.txt'&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number_data_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;data_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;number_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestTranslateNumberToChinese&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'test_number_&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="n"&gt;create_number_test_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;add_tests&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;上面的示意中，假设测试用例保存在一个叫做“number_data.txt” 的 TSV 文件中。每行用 TAB 分割为两列，分别是阿拉伯数字和期望的中文读法。&lt;/p&gt;
&lt;p&gt;“add_tests”方法对每一个测试用例，调用“create_number_test_function”创建一个测试方法，添加到测试类“TestTranslateNumberToChinese”中。&lt;/p&gt;
&lt;p&gt;假设这段测试代码所在的文件叫做“test_translate_number_to_chinese.py”，那么在命令行运行如下命令就可以把所有的测试用例都测一遍。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m unittest test_translate_number_to_chinese
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;大刀阔斧进行修改&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;准备好测试方法和足够的测试用例后，就可以放心地对代码进行修改了。每次修改一点儿，都可以跑一下单元测试，看看又成功或者失败了几个用例，总结出规律，继续改进。&lt;/p&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;特殊的“0”&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;目前主要的问题在于对“0”的处理上，上面的程序忽略了所有的“0”。&lt;/p&gt;
&lt;p&gt;实际上，在一个万组内，末尾所有连续的“0”都不用读，如 500：五百、20：二十。这方面刚好上面的代码就是这样处理的。注意这个规则不仅仅针对数字最末尾的“0”，而是对每一个万组都有效的。比如 2005678：二百万五千六百七十八（不加“零”）。&lt;/p&gt;
&lt;p&gt;在一个万组内，如果两个非零数字之间有一个或者多个“0”，都需要（且只需要）读一个“零”。如 201：二百零一、3006：三千零六、1020：一千零二十。&lt;/p&gt;
&lt;p&gt;一个万组内，如果高位数字是 0，那么是否需要读出来就看更高的万组是什么情况了。如果没有更高的万组，就不用读，否则就需要。比如 0200（实际上首位的 0 就不出现了）：二百、10200：一万零二百。&lt;/p&gt;
&lt;p&gt;添加两个局部变量来记录一下状态，一个是“group_is_zero”记录当前处理的万组是否仍然是全 0，另一个是“need_zero”记录是否需要添加一个“零”。&lt;/p&gt;
&lt;p&gt;把上面 translate_number_to_chinese 中的 core loop 修改一下，得到：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Begin core loop.&lt;/span&gt;
&lt;span class="c1"&gt;# Version 0.2&lt;/span&gt;
&lt;span class="n"&gt;group_is_zero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;need_zero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_enumerate_digits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;))):&lt;/span&gt;
    &lt;span class="n"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHINESE_UNITS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHINESE_UNITS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;need_zero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHINESE_ZERO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHINESE_DIGITS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHINESE_UNITS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;group_is_zero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;group_is_zero&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHINESE_GROUP_UNITS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;need_zero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;group_is_zero&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;group_is_zero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# End core loop.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;全零的万组&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;接下来遇到的问题是，如果一个万组完全是 0，就不要再添加对应的单位了，比如 100000000：一亿（现在会输出“一亿万”）。&lt;/p&gt;
&lt;p&gt;解决方法很简单，把上面的 &lt;tt class="docutils literal"&gt;if unit == 0:&lt;/tt&gt; 改成 &lt;tt class="docutils literal"&gt;if unit == 0 and not group_is_zero:&lt;/tt&gt; 即可。完整代码略。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;麻烦的“1”&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;最后一种特殊的情况是由数字“1”引起的。&lt;/p&gt;
&lt;p&gt;在一个万组内，如果千位和百位都是“0”，十位是“1”，那么这个“一”就不用读出来，比如 10：十、14：十四。&lt;/p&gt;
&lt;p&gt;但如果千位或者百位不是“0”，这个“一”就需要读出来，比如 213：二百一十三、2013：二千零一十三。&lt;/p&gt;
&lt;p&gt;当更高的万组存在时，即使当前万组的千位和百位都为“0”，也需要读出“一”，比如 20010：二万零一十。&lt;/p&gt;
&lt;p&gt;解决的方法是在上面的 &lt;tt class="docutils literal"&gt;words.append(CHINESE_DIGITS[digit])&lt;/tt&gt; 前面增加条件：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;group_is_zero&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;need_zero&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;最后完整的 core loop 代码为：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Begin core loop.&lt;/span&gt;
&lt;span class="c1"&gt;# Version 0.4&lt;/span&gt;
&lt;span class="n"&gt;group_is_zero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;need_zero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_enumerate_digits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;))):&lt;/span&gt;
    &lt;span class="n"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHINESE_UNITS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHINESE_UNITS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;need_zero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHINESE_ZERO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;group_is_zero&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;need_zero&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHINESE_DIGITS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHINESE_UNITS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;group_is_zero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;group_is_zero&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;group_is_zero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHINESE_GROUP_UNITS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;need_zero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;group_is_zero&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;group_is_zero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# End core loop.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;试试看&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;代码介绍完了，下面放一个用 JavaScript 实现的版本，可以随便输入一些数字试试看。源代码参见 &lt;a class="reference external" href="http://jsfiddle.net/calfzhou/tGEz7/"&gt;http://jsfiddle.net/calfzhou/tGEz7/&lt;/a&gt;。&lt;/p&gt;
&lt;script type="text/javascript"&gt;
function translateNumber(numberText) {
    var CHINESE_NEGATIVE = "负";
    var CHINESE_ZERO = "零";
    var CHINESE_DIGITS = ["", "一", "二", "三", "四", "五", "六", "七", "八", "九"];
    var CHINESE_UNITS = ["", "十", "百", "千"];
    var CHINESE_GROUP_UNITS = ["", "万", "亿", "兆", "京", "垓", "杼", "穰", "溝", "澗", "正", "載", "極"];
    if (numberText === "") {
        return "";
    }
    numberText = numberText.replace(/^0+/g, "");
    numberText = numberText.replace(/^-0+/g, "-");
    if (numberText === "" || numberText === "-") {
        return CHINESE_ZERO;
    }
    var result = "";
    if (numberText[0] === "-") {
        result += CHINESE_NEGATIVE;
        numberText = numberText.substring(1);
    }

    var groupIsZero = true;
    var needZero = false;
    for (var i = 0; i &lt; numberText.length; ++i) {
        var position = numberText.length - 1 - i;
        var digit = parseInt(numberText[i]);
        var unit = position % CHINESE_UNITS.length;
        var group = (position - unit) / CHINESE_UNITS.length;

        if (digit !== 0) {
            if (needZero) {
                result += CHINESE_ZERO;
            }

            if (digit !== 1 || unit !== 1 || !groupIsZero || (group === 0 &amp;&amp; needZero)) {
                result += CHINESE_DIGITS[digit];
            }

            result += CHINESE_UNITS[unit];
        }

        groupIsZero = groupIsZero &amp;&amp; (digit === 0);

        if (unit === 0 &amp;&amp; !groupIsZero) {
            result += CHINESE_GROUP_UNITS[group];
        }

        needZero = (digit === 0 &amp;&amp; (unit !== 0 || groupIsZero));

        if (unit === 0) {
            groupIsZero = true;
        }
    }
    return result;
}
function doNumberTranslation() {
    numberText = document.getElementById('number-input').value;
    chinese = translateNumber(numberText);
    document.getElementById('chinese-output').value = chinese;
}
&lt;/script&gt;
&lt;form action="javascript:doNumberTranslation();"&gt;
&lt;div class="input-group"&gt;
&lt;input class="form-control" id="number-input" maxlength="52" pattern="-?[0-9]+" placeholder="Enter an integer then click Go" type="text"/&gt;
&lt;span class="input-group-btn"&gt;
&lt;button class="btn btn-default" type="submit"&gt;Go!&lt;/button&gt;
&lt;/span&gt;
&lt;/div&gt;
&lt;/form&gt;
&lt;div&gt;
&lt;textarea class="form-control" id="chinese-output" readonly="readonly" rows="3" type="text"&gt;&lt;/textarea&gt;
&lt;/div&gt;&lt;/div&gt;
</content><category term="程序开发"></category><category term="Python"></category><category term="Unit Test"></category><category term="Natural Language"></category></entry><entry><title>用 Git 和云存储保存隐私信息</title><link href="https://blog.gocalf.com/git-encrypt" rel="alternate"></link><published>2013-12-17T14:07:00+08:00</published><updated>2013-12-17T14:07:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2013-12-17:/git-encrypt</id><summary type="html">&lt;p class="first last"&gt;网络越来越发达，各式各样的网盘、云存储也走进日常生活，我也开始在 Dropbox 和 GitHub 中存储一些个人文件和代码。但如果涉及到隐私的信息非要放上去就必须要加密处理，今天我说一下如何用 git 来保存这些隐私信息。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;网络越来越发达，各式各样的网盘、云存储也走进日常生活，我也开始在 &lt;a class="reference external" href="https://www.dropbox.com/"&gt;Dropbox&lt;/a&gt; 和 &lt;a class="reference external" href="https://github.com/"&gt;GitHub&lt;/a&gt; 中存储一些个人文件和代码。隐私问题比较麻烦，会有一些特别隐私的信息（比如银行密码、心情日记等）是不适合直接存放在云端的。但又确实想要借助云平台的便利性，就必须要做加密处理。操作的方法很多，今天我说一下用 Git 来保存这些隐私信息。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;等等，你说什么？还有 115 网盘、百度云盘、金山快盘等等国内知名云存储，空间又大、速度又快、功能又强。如果你这么觉得，那么再见，bye bye，さようなら。&lt;/p&gt;
&lt;p&gt;我是不会用国内的云存储存放任何个人相关的东西的，最多放少量的网上下载的图书视频软件之类的。&lt;/p&gt;
&lt;p&gt;好吧，言归正传，说咱们的加密。&lt;/p&gt;
&lt;p&gt;当然你可以用虚拟加密磁盘（比如 &lt;a class="reference external" href="http://www.truecrypt.org/"&gt;TrueCrypt&lt;/a&gt;）之类的工具，或者直接用设置了密码的压缩包（我之前就是这么干的），但是在用起来都还是有些麻烦。比如我那些打了加密压缩包的东西，我就懒得再去看了，尤其懒得修改，实在太麻烦了。&lt;/p&gt;
&lt;p&gt;我选择用 Git 来保存个人文档的另一个原因是，可以方便地进行版本控制，尤其如果需要在不同的电脑上进行操作，又难以完全实时进行同步的话。而且今天介绍的这个方法可以透明地对指定文件进行加密和解密（transparent encryption），也就是你在本地操作的时候根本不需要每次阅读前都解密，做了修改之后还要再做加密处理。工具会保证最终存在云端的那份是妥善加密的。&lt;/p&gt;
&lt;p&gt;找到了两个实现此功能的工具，分别是&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;git-crypt: &lt;a class="reference external" href="https://www.agwa.name/projects/git-crypt/"&gt;https://www.agwa.name/projects/git-crypt/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;git-encrypt: &lt;a class="reference external" href="https://github.com/shadowhand/git-encrypt"&gt;https://github.com/shadowhand/git-encrypt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分别是用 C++ 和 Shell 写的。最后我选择了后者，当然以后也许会改变，反正加密解密算法跟工具是分离的，换工具并不会带来太多问题。&lt;/p&gt;
&lt;p&gt;简单介绍一下如何使用，更准确的操作方式就直接去看项目的官方文档好了。&lt;/p&gt;
&lt;p&gt;首先安装，我选择的 git-encrypt 是用 Shell 写的，所谓安装就是 clone 一下它的 repo，建立一个符号链接使得通过 $PATH 可以找到它即可。当然，你的系统中必须安装了 OpenSSL，它是加密解密的核心啊。&lt;/p&gt;
&lt;p&gt;项目中有两个脚本文件，我只用其中的“gitcrypt”，另一个感觉不太好用。&lt;/p&gt;
&lt;p&gt;假设云端存储用 Dropbox，在本地对应的目录是 &lt;tt class="docutils literal"&gt;~/dropbox&lt;/tt&gt;。（以下操作都是针对 Linux 平台的，Windows 的话可以去看一下官方文档）。先进入 dropbox 目录并创建一个新的 git 仓库（如果没有一个现成的）：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/dropbox
mkdir myrepo.git
&lt;span class="nb"&gt;cd&lt;/span&gt; myrepo.git
git init --bare
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;这个仓库将会被同步到云端，任何提交到该仓库的隐私信息都应该是被加密过的。当然千万不要把密钥也存在这里。&lt;/p&gt;
&lt;p&gt;然后去工作目录，比如叫 &lt;tt class="docutils literal"&gt;~/personal&lt;/tt&gt;，创建一个本地仓库（或者从 dropbox 中 clone 一个过来）：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/personal
mkdir myrepo
&lt;span class="nb"&gt;cd&lt;/span&gt; myrepo
git init
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;然后就要做好加密解密的准备工作了，直接在本地仓库的根目录运行 &lt;tt class="docutils literal"&gt;gitcrypt init&lt;/tt&gt; 命令，根据提示输入相应的信息。它首先会问你是否需要生成一个随机的 salt 值和密码，你可以同意或拒绝，拒绝的话就自己提供 salt 值和密码。如果你只有这个本地仓库，那建议直接使用随机生成的，那样足够复杂，更安全些。如果还需要在别的机器上 clone 这个仓库，那还是自己设置一下，免得忘了密码。然后选择加密算法，默认的是 aes-256-ecb（ECB 加密模式比较简单，相对容易破解，推荐使用 aes-256-cbc；当然 OpenSSL 提供了很多加密算法，大家可以自行选择；另外，发现一篇很直观的文章，可以看看，&lt;a class="reference external" href="http://blog.csdn.net/aaaaatiger/article/details/2525561"&gt;分组对称加密模式&lt;/a&gt;）。接下来会问你是否使用 &lt;tt class="docutils literal"&gt;.git/info/attribute&lt;/tt&gt;，选择是就好了。最后问你需要对什么文件进行加密，默认是 &lt;tt class="docutils literal"&gt;*&lt;/tt&gt; 表示所有文件。你可以根据需要进行设置，比如我这里让它加密所有以“private-”开头的文件，就输入 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;private-*&lt;/span&gt;&lt;/tt&gt;。&lt;/p&gt;
&lt;p&gt;好了，完成了。接下来就正常地在仓库里提交各种文件，但只要文件名是以“private-”开头的，都会被加密后再被提交。&lt;/p&gt;
&lt;p&gt;有一点要提一下，前面设置的 salt 值和密码，都是明文存储在 &lt;tt class="docutils literal"&gt;.git/config&lt;/tt&gt; 中的，如果你的本地仓库也不那么安全的话，就牢记这两个信息，并在不需要的时候把仓库或者这个信息删掉，等到下次要用的时候再加上。&lt;/p&gt;
&lt;p&gt;假设我创建两个文件，分别叫做 &lt;tt class="docutils literal"&gt;diary.txt&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;private-diary.txt&lt;/span&gt;&lt;/tt&gt;。其中后者是绝对不想让别人看到的。假设内容分别如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat diary.txt
今天天气不错，挺风和日丽的。
我心情也还好，没有什么烦心事。
$ cat private-diary.txt
一点儿都不开心，那个人烦死了，老骚扰我。
我想暴走啊，想暴走。
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;好，然后将这两个文件都提交到仓库中，并将修改推到云端：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add *.txt
git commit -m &lt;span class="s1"&gt;&amp;#39;Add some diaries.&amp;#39;&lt;/span&gt;
git remote add origin ~/dropbox/myrepo.git
git push origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;有人会问，不对啊，还没给私密日记加密啊。好，我们来把云端仓库再 clone 一份看看。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone ~/dropbox/myrepo.git ~/personal/myrepo2
$ cd ~/personal/myrepo2
$ ls
diary.txt  private-diary.txt
$ cat diary.txt
今天天气不错，挺风和日丽的。
我心情也还好，没有什么烦心事。
$ cat private-diary.txt
U2FsdGVkX1/lfLd83fEEk8Gnaiixe5hdSPR7qgP+SFD9PSX6yNSX8osvd73gKqQG
Q4ndGa6A0RAuClmMO1E5tRnxKhk2jIHmiR6qyGKjx73BR2164PHnf3NioZM0tN25
88FtrD+Mqhq+b3MEsXLu2A==
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;可见，如果别人 clone 了你的云端仓库，他也只能看到加密后的信息。&lt;/p&gt;
&lt;p&gt;如果这份 clone 的主人也是你，你现在想在这里查看或者修改你的文档，只要再运行一次 &lt;tt class="docutils literal"&gt;gitcrypt init&lt;/tt&gt;，输入同样的 salt 和密码，保持其它设置也都一致，最后再运行一次 &lt;tt class="docutils literal"&gt;git reset &lt;span class="pre"&gt;--hard&lt;/span&gt; HEAD&lt;/tt&gt; 就好了。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gitcrypt init
blah blah (use the exact same configuration)
$ git reset --hard HEAD
HEAD is now at 10c8613 Add some diaries.
$ cat private-diary.txt
一点儿都不开心，那个人烦死了，老骚扰我。
我想暴走啊，想暴走。
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;关于 salt 和密码。解密的时候只要有密码就够了，加密的时候则需要同时提供 salt 和密码。用 salt 一方面可以在密码太简单的情况下加大破解难度（参见 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Rainbow_table"&gt;Rainbow table&lt;/a&gt;），另一方面使用相同的 salt 可以让每次加密得到的密文是一致的。如果你在第二次 clone 后改用不同的 salt，并不会影响密文的解密，但是 git 会认为那些文件被修改了，而 diff 的时候去看不到任何差异。我觉得这个不太合理啊，期待这个工具的更新。&lt;/p&gt;
&lt;p&gt;最后，一些关于 transparent git encryption 的讨论：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://syncom.appspot.com/papers/git_encryption.txt"&gt;GIT transparent encryption&lt;/a&gt; or &lt;a class="reference external" href="https://gist.github.com/shadowhand/873637"&gt;https://gist.github.com/shadowhand/873637&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://git.661346.n2.nabble.com/Transparently-encrypt-repository-contents-with-GPG-td2470145.html"&gt;Transparently encrypt repository contents with GPG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然也有反对的声音，所以建议大家先多了解了解再决定要不要使用这个方法。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://article.gmane.org/gmane.comp.version-control.git/113221"&gt;Don't do this&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="有用知识"></category><category term="Git"></category><category term="Encrypt"></category></entry><entry><title>在 Excel 中制作不等宽柱状图</title><link href="https://blog.gocalf.com/excel-variable-width-column-chart" rel="alternate"></link><published>2013-12-13T14:35:00+08:00</published><updated>2019-09-30T16:00:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2013-12-13:/excel-variable-width-column-chart</id><summary type="html">&lt;p class="first last"&gt;介绍一下我是怎么在 Microsoft Office Excel 中制作不等宽柱状图（Variable Width Column Chart）的。&lt;/p&gt;
</summary><content type="html">
&lt;p&gt;柱状图大家应该都很熟悉，在 Excel 中可以很容易创建一个柱状图，每个柱子的高度表达了某个对象的数值大小。但有的时候，需要在柱状图中同时表达两个维度的数据，除了高度之外，希望柱子的宽度也能表达该对象的另外一个数值大小，以便直观地比较这两个维度。我曾经就需要做一个这样的图，不过在 Excel 中并没有直接提供相关的功能，需要一些小技巧。&lt;/p&gt;
&lt;p&gt;今天就来介绍一下我是怎么制作不等宽柱状图（Variable Width Column Chart）的。也有人称其为 Marimekko
Chart，我没有仔细去考证，二者好像也并不完全一样。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;注：以下操作是基于 Microsoft Office Excel 2013 进行的，其他版本可能会有一些差异，但思路是相通的。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;数据和目标效果&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;假设我们有这样一组数据，一共五个对象，每个对象都有两个数值属性（x 和 y）。我们希望用柱子的宽度表示 x 的大小（这里只考虑 x 是非负数的情况），高度表示 y 的大小。&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="43%"/&gt;
&lt;col width="29%"/&gt;
&lt;col width="29%"/&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Item&lt;/th&gt;
&lt;th class="head"&gt;X&lt;/th&gt;
&lt;th class="head"&gt;Y&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;5.2&lt;/td&gt;
&lt;td&gt;5.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;10.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;11.5&lt;/td&gt;
&lt;td&gt;1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;2.4&lt;/td&gt;
&lt;td&gt;17.8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;E&lt;/td&gt;
&lt;td&gt;8.1&lt;/td&gt;
&lt;td&gt;8.4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;最后做成的图是这样的：&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="variable_width_column_chart" src="https://blog.gocalf.com/images/2013/12/variable_width_column_chart.png"/&gt;
&lt;p class="caption"&gt;在 Excel 中根据上述数据制作的不等宽柱状图&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;那么应该怎么产生这样的效果呢？内置的柱状图并没有办法调节每个柱子的宽度，所以看起来不应该是从这个角度去做。&lt;/p&gt;
&lt;p&gt;一个柱子是有宽度和高度的，二者共同构成了这个柱子的面积。在 Excel 内置的图表类型中，面积图最接近这个需求。因此可以想到用面积图来模拟不同宽度的柱子。为了区分不同的对象，我们可以为每一个对象画一个面积图，把多个这样的面积图叠加起来，并让每一个柱子在横轴方向的位置不重叠，就能得到想要的样子了。下面就跟着我具体操作一遍。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;基础数据和第一次扩展&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先在 Excel 中把原始数据录入进去。我个人比较喜欢把数据组织成 Excel 表（Excel
2007 才开始有此功能）。这是将一块普通的单元格区域转换成一种有内在联系的表结构，可以更加方便地管理和操作表中的数据。如果你还没有接触过，可以参考 &lt;a class="reference external" href="http://office.microsoft.com/en-us/excel-help/overview-of-excel-tables-HA010048546.aspx"&gt;官方的文档&lt;/a&gt;（&lt;a class="reference external" href="http://office.microsoft.com/zh-cn/excel-help/overview-of-excel-tables-HA010048546.aspx"&gt;中文文档&lt;/a&gt;），你一定会爱上它。对于今天要做的不等宽柱状图，Excel 表并不是必需的，但它会使得公式更加直观。我今天给出的每一个公式，都会用两种形式（使用 Excel 表和不使用 Excel 表）给出，以方便那些确实不习惯 Excel 表的童鞋。一定要注意，如果你用 Excel 表，那么对于任何一列，其每一行的公式都是一样的。而如果不用 Excel 表，我所给出的公式只是该列第一行的公式，你要特别小心公式中什么地方应该加“$”，什么时候不加“$”，后续行的公式会自动根据有没有“$”进行变换。&lt;/p&gt;
&lt;p&gt;假设我们把上面表格中的基础数据放在从 A1 开始的单元格中（这些数据会占据 A1 到 C6 范围的单元格），选中这些单元格，点击 Ribbon 中 HOME -&amp;gt;
Format as Table，然后随便选择一个样式，将这片区域转换成 Excel 表。给这个表起个名字，比如叫作 TableData，在 Ribbon 中点击（TABLE
TOOLS）DESIGN，在 Table Name 的文本框中输入 TableData。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="create_data_table" src="https://blog.gocalf.com/images/2013/12/create_data_table.png"/&gt;
&lt;p class="caption"&gt;选择原始数据单元格范围，转换成 Excel 表&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;接下来对这个数据表格做一些简单的扩充——增加几个有用的列。&lt;/p&gt;
&lt;p&gt;首先增加一列，叫作 Width。在这一列中我们对将要作为柱状图宽度的 X 数据进行一些变换，主要是为了（在不直接修改原数据的情况下）更方便地控制展示效果。具体应该怎么变换，取决于原数据本身的分布情况，我一般会把原数据缩放到平均在几十到几百这个范围（后面会讲到为什么这样做）。在这里我用把 X 放大 10 倍作为 Width，因此这一列的公式为：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;=[@X]*10
=$B2*10
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;然后再添加两列，分别叫作 Right 和 Left，这两列用于计算每个柱子的右边界和坐边界在横轴上的位置。在写这两列的公式之前，先要考虑一下柱子的间距。假设我们需要让每两个相邻的柱子之间有相等的间隔，我们可以自己指定这个间隔的绝对数值，或者设定一个相对于柱子宽度的比例然后用公式进行自动调节。我在这里设置间隔为柱子平均宽度的 20%，因此其公式为：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;=CEILING(AVERAGE(TableData[Width])*0.2,1)
=CEILING(AVERAGE($D$2:$D$6)*0.2,1)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;其中 CEILING 函数做了个上取整，这不是必须的，大家可以自行把握。另外注意我是对上面新加的 Width 列求的平均值，而不是原数据中的 X。&lt;/p&gt;
&lt;p&gt;为了方便以后引用，我们给存放这个数值的单元格起个名字。比如我现在把它放在 B8 这个单元格里，选中这个单元格，点击 Ribbon 的 FORMULAS -&amp;gt;
Define Name 来为其指定一个名字，比如叫作“Gap”。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="define_gap_name" src="https://blog.gocalf.com/images/2013/12/define_gap_name.png"/&gt;
&lt;p class="caption"&gt;给间隔数据所在的单元格定义名字&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;有了这个柱子之间的间隔，就很容易写出 Right 和 Left 的计算公式了。假设第一个柱子的左边界的（横轴）坐标为 0，那任何一个柱子的左边界的坐标就等于它左边所有柱子的宽度之和加上若干（= 左边的柱子个数）个间隔。而这个柱子的右边界的坐标等于其左边界坐标加上它自身的宽度。实际写公式的时候，为了方便，我先计算右边界的坐标，然后减去宽度得到左边界坐标。&lt;/p&gt;
&lt;p&gt;Right 列的计算公式是：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;=SUM(TableData[[#Headers],[Width]]:[@Width])+(COUNT(TableData[[#Headers],[Width]]:[@Width])-1)*Gap
=SUM($D$1:$D2)+(COUNT($D$1:$D2)-1)*Gap
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Left 列的计算公式是：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;=[@Right]-[@Width]
=$E2-$D2
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;面积图数据扩展&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;前面提到了，我们要用一系列面积图来模拟不等宽柱状图，每一个柱子对应一条面积图曲线。而为了描述一个柱子，需要有四个坐标数据，即柱子矩形的四个顶点。因此原始数据中每一行就要扩展成为 4 行新的数据（分别对应一个柱子的左下、左上、右上、右下顶点）。那我们就来创建一个新的 Excel 表来计算这些数据。&lt;/p&gt;
&lt;p&gt;假设我们把这个数据表叫作 TableArea，放在从 A10 开始的单元格范围内。&lt;/p&gt;
&lt;p&gt;第一列叫作 Index，是一列递增的索引值，用于识别所在行的柱子序号和顶点编号。因为每一行原始数据在这里要对应 4 行新数据，所以这里需要 4 * 5 = 20 行，对应的编号分别为 0，1，2，……，19。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="create_area_table" src="https://blog.gocalf.com/images/2013/12/create_area_table.png"/&gt;
&lt;p class="caption"&gt;新加的 Excel 表——TableArea&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;接下来添加一些辅助列，主要是为了简化后续的计算公式。一个一个地介绍。&lt;/p&gt;
&lt;p&gt;TableArea 的第二列叫作 ItemId，用于计算这一行数据对应于原始数据表中的第几行（设第一行为 1），计算公式为：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;=INT([@Index]/4)+1
=INT($A11/4)+1
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;第三列叫作 IsLeft，其值为 TRUE 或者 FALSE，表示该行数据是否对应一个柱子的左边界，计算公式为：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;=MOD([@Index],4)&amp;lt;2
=MOD($A11,4)&amp;lt;2
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;第四列叫作 IsBottom，其值也是 TRUE 或者 FALSE，表示该行数据是否对应一个柱子的下边界（对于高度为非负数的柱子），计算公式为：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;=MOD([@Index]+1,4)&amp;lt;2
=MOD($A11+1,4)&amp;lt;2
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;第五列叫作 ItemName，是把该行所对应的对象的名字映射过来得到的，计算公式为：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;=OFFSET(TableData[[#Headers],[Item]],[@ItemId],0,1,1)
=OFFSET($A$1,$B11,0,1,1)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;第六列叫作 ItemHeight，是把该行所对应的对象的 Y 数据（即柱子高度）映射过来得到的，计算公式为：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;=OFFSET(TableData[[#Headers],[Y]],[@ItemId],0,1,1)
=OFFSET($C$1,$B11,0,1,1)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;接下来就是画面积图实际使用的数据了。&lt;/p&gt;
&lt;p&gt;第七列叫作 X，这个 X 跟原始数据中的 X 可不是一回事儿。这里的 X 表示该行所对应的柱子顶点的横轴坐标。如果该行对应一个柱子的左边界，那其值为 TableData 的 Left 列数值；反之，如果该行对应一个柱子的右边界，其值为 TableData 的 Right 列数值。此列的计算公式为：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;=OFFSET(IF([@IsLeft],TableData[[#Headers],[Left]],TableData[[#Headers],[Right]]),[@ItemId],0,1,1)
=OFFSET(IF($C11,$F$1,$E$1),$B11,0,1,1)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;所有的柱子都共享上面那一列横坐标数据，但我们需要为每一个柱子准备一列数据来提供相应的纵坐标，因此在 X 列后面添加 5 列，名字分别是原始数据中五个对象的名字，即 A、B、C、D 和 E。它们的公式差不多，以 A 列为例，它的数据包含对象 A 的柱子面积图每个顶点的纵坐标。如果当前行对应的对象是 A，而且当前行对应柱子的上边界时，相应的数据就应该是 A 对象的 Y 数据，否则就应该为 0。计算公式为：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;=IF(OR([@ItemName]&amp;lt;&amp;gt;TableArea[[#Headers],[A]],[@IsBottom]),0,[@ItemHeight])
=IF(OR($E11&amp;lt;&amp;gt;H$10,$D11),0,$F11)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;对于其他几列，只要把公式中的“[A]”改为对应的列名即可。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="data_ready" src="https://blog.gocalf.com/images/2013/12/data_ready.png"/&gt;
&lt;p class="caption"&gt;准备完毕的两个 Excel 表&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;作图&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;现在来创建不等宽柱状体的主体结构。&lt;/p&gt;
&lt;p&gt;在 TableArea 中选择所有的纵坐标列（A 列到 E 列，包括列头和每一行数据），然后点击 Ribbon 的 Insert -&amp;gt;
Insert Area Chart -&amp;gt; Area，插入一张新的面积图。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="create_area_chart" src="https://blog.gocalf.com/images/2013/12/create_area_chart.png"/&gt;
&lt;p class="caption"&gt;创建面积图&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在面积图上点击鼠标右键，选择 Select Data，在 Horizontal (Category) Axis
Labels 中可以看到默认的横坐标数据是从 1 开始的递增整数，需要修改为真实的坐标值。点击 Edit，选择 TableArea 的 X 列所有数据，保存即可。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="change_horizontal_axis_label" src="https://blog.gocalf.com/images/2013/12/change_horizontal_axis_label.png"/&gt;
&lt;p class="caption"&gt;修改横坐标值&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;这时候图中的每个柱子都是梯形的，而且宽度跟 X 列的数据值也没有对应关系，接下来要把等宽的梯形改成不等宽的矩形。这也是制作不等宽柱状图中最重要的一步。用鼠标右键点击横坐标轴，选择 Format
Axis，将 AXIS OPTIONS -&amp;gt; Axis Type 由默认的 Automatically select based on data 改成 Date Axis。&lt;/p&gt;
&lt;p&gt;对于 Date Axis，我们需要让横坐标数据最小粒度在一天以上，如果都是小于 1 的数，显示上会有些问题。所以在数据准备的时候，我把 X 数据进行适当的缩放得到 Width，用 Width 来生成横坐标数据。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="use_date_axis" src="https://blog.gocalf.com/images/2013/12/use_date_axis.png"/&gt;
&lt;p class="caption"&gt;改成 Date Axis&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="trapezoid_vs_rectangle" src="https://blog.gocalf.com/images/2013/12/trapezoid_vs_rectangle.png"/&gt;
&lt;p class="caption"&gt;应用 Date Axis 之前（等宽梯形）和之后（不等宽矩形）的图形对比&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;然后把横轴的刻度和标签隐藏起来，即把 TICK MARKS -&amp;gt; Major type 从默认的 Outside 改为 None，把 LABELS -&amp;gt; Label
Position 从默认的 Next to Axis 改为 None。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="hide_axis_mark_and_label" src="https://blog.gocalf.com/images/2013/12/hide_axis_mark_and_label.png"/&gt;
&lt;p class="caption"&gt;隐藏横轴的刻度和标签&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;修改一下图的标题之后，不等宽柱状图的主体结构就完成了。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="chart_demo" src="https://blog.gocalf.com/images/2013/12/chart_demo.png"/&gt;
&lt;p class="caption"&gt;不等宽柱状图的主体结构&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;添加数据标签&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;有了主体结构后，大家可以根据需要自行美化图表了，这里我介绍一下如何添加目标效果中的位于柱子上方的数据标签，算作抛砖引玉吧。&lt;/p&gt;
&lt;p&gt;先在 TableData 中添加一列叫作 Mid，用于计算每个柱子中心点的横坐标，公式为&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;=([@Left]+[@Right])/2
=($F2+$E2)/2
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;用鼠标右键点击图表，选择 Select Data，然后点击 Legend Entries (Series) -&amp;gt; Add 增加新的一组数据。在弹出的 Edit
Series 框中，把 Series name 设置为 Label，把 Series values 设置为 TableData 中 Y 列整列数据。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="add_label_series" src="https://blog.gocalf.com/images/2013/12/add_label_series.png"/&gt;
&lt;p class="caption"&gt;添加一个 Series 用于展示标签&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;这时候图表会变的比较难看，没有关系。右键点击新加入的 Series，选择 Change Series Chart
Type，在 Combo -&amp;gt; Custom Combination -&amp;gt; Choose the chart type and axis for your data
series 中找到新加的 Label 这个 Series，把它的 Chart Type 从 Area 改成散点图（X Y (Scatter) -&amp;gt; Scatter）。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="change_series_chart_type" src="https://blog.gocalf.com/images/2013/12/change_series_chart_type.png"/&gt;
&lt;p class="caption"&gt;将新增加的 Serise 改为散点图&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;再次进入 Select Data，编辑 Label 这个 Series 的数据，这时候就可以编辑它的横轴数据了，把 Series
X values 设置为 TableData 中 Mid 列整列数据。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="set_label_series_x_data" src="https://blog.gocalf.com/images/2013/12/set_label_series_x_data.png"/&gt;
&lt;p class="caption"&gt;设置新增加的 Series 的横轴坐标&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;修改之后，这些数据点就刚好落在每一个柱子的上边界中点位置了。右键点击这个 Series，选择 Add
Data Labels -&amp;gt; Add Data Labels；再右键点击出现的标签，选择 Format Data Labels，点击 LABEL
OPTIONS -&amp;gt; Label Contains -&amp;gt; Value From Cells 复选框，弹出 Data Label
Range 对话框，将数据范围设置为 TableData 的 X 列整列数据。然后将 Label Position 改为 Above。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="set_label_options" src="https://blog.gocalf.com/images/2013/12/set_label_options.png"/&gt;
&lt;p class="caption"&gt;修改数据标签的显示属性&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;最后隐藏一些不必要的东西即可。比如可以将 Label Series 的 Marker 设置为 None，把 Legend 区域内 Label 字样直接删除。&lt;/p&gt;
&lt;p&gt;搞定。&lt;/p&gt;
&lt;p&gt;另外，可以在此下载上述操作所生成的 Excel 文件：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;使用 Excel 表的示例文件：&lt;a class="reference external" href="https://blog.gocalf.com/assets/2013/12/variable_width_column.xlsx"&gt;variable_width_column.xlsx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;不用 Excel 表的示例文件：&lt;a class="reference external" href="https://blog.gocalf.com/assets/2013/12/variable_width_column_no_table.xlsx"&gt;variable_width_column_no_table.xlsx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="highcharts"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;Highcharts 版本&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://blog.gocalf.com/"&gt;GoCalf 博客&lt;/a&gt; 使用 &lt;a class="reference external" href="http://www.highcharts.com/"&gt;Highcharts&lt;/a&gt; 渲染动态图表。Highchart 也并不直接支持不等宽柱状图，但是可以用完全相同的方法来进行模拟。具体的过程不再赘述，效果参见下图，源代码可以通过本页面的 HTML 源码获得，或者查看 &lt;a class="reference external" href="http://jsfiddle.net/calfzhou/TUt2U/"&gt;我共享的 jsfiddle&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://jsfiddle.net/calfzhou/TUt2U/"&gt;http://jsfiddle.net/calfzhou/TUt2U/&lt;/a&gt;&lt;/p&gt;
&lt;div class="highcharts" id="variable-width-column-chart" style="height: 400px; width: 640px"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
$(function () {
    var rawData = [
        {name: 'A', x: 5.2, y: 5.6},
        {name: 'B', x: 3.9, y: 10.1},
        {name: 'C', x: 11.5, y: 1.2},
        {name: 'D', x: 2.4, y: 17.8},
        {name: 'E', x: 8.1, y: 8.4}
    ];
    function makeSeries(listOfData) {
        var sumX = 0.0;
        for (var i = 0; i &lt; listOfData.length; i++) {
            sumX += listOfData[i].x;
        }
        var gap = sumX / rawData.length * 0.2;
        var allSeries = []
        var x = 0.0;
        for (var i = 0; i &lt; listOfData.length; i++) {
            var data = listOfData[i];
            allSeries[i] = {
                name: data.name,
                data: [
                    [x, 0], [x, data.y],
                    {
                        x: x + data.x / 2.0,
                        y: data.y,
                        dataLabels: { enabled: true, format: data.x + ' x {y}' }
                    },
                    [x + data.x, data.y], [x + data.x, 0]
                ],
                w: data.x,
                h: data.y
            };
            x += data.x + gap;
        }
        return allSeries;
    }
    $('#variable-width-column-chart').highcharts({
        chart: {type: 'area', backgroundColor: null},
        colors: ['#3399ff', '#ff3300', '#9fd42e', '#ff9900', '#ff6633'],
        title: {text: 'Variable Width Column Chart'},
        xAxis: {
            tickLength: 0,
            labels: {enabled: false}
        },
        yAxis: {
            title: {enabled: false}
        },
        plotOptions: {
            area: {
                marker: {
                    enabled: false,
                    states: {
                        hover: {enabled: false}
                    }
                }
            }
        },
        tooltip: {
            followPointer: true,
            useHTML: true,
            headerFormat: '&lt;span style="color: {series.color}"&gt;{series.name}&lt;/span&gt;: ',
            pointFormat: '&lt;span&gt;{series.options.w} x {series.options.h}&lt;/span&gt;'
        },
        series: makeSeries(rawData)
    });
});
&lt;/script&gt;&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Highcharts 从 6.0.0 版本开始也加入了 varwide 类型，详见 &lt;a class="reference external" href="https://www.highcharts.com/demo/variwide"&gt;varwide demo&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="有用知识"></category><category term="Excel"></category></entry><entry><title>用 Python 读写 Excel 文件</title><link href="https://blog.gocalf.com/python-read-write-excel" rel="alternate"></link><published>2013-12-03T20:50:00+08:00</published><updated>2014-07-31T09:54:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2013-12-03:/python-read-write-excel</id><summary type="html">&lt;p class="first last"&gt;前段时间需要用 Python 来处理 Microsft Excel 文件，尝试了一些不同的方法，记录下来留个印象。&lt;/p&gt;
</summary><content type="html">
&lt;p&gt;虽然天天跟数据打交道，也频繁地使用 Excel 进行一些简单的数据处理和展示，但长期以来总是小心地避免用 Python 直接读写 Excel 文件。通常我都是把数据保存为以 TAB 分割的文本文件（TSV），再在 Excel 中进行导入或者直接复制粘贴。&lt;/p&gt;
&lt;p&gt;前段时间做一个项目，却不得不使用 Python 直接生成 Excel 文件，后来随着需求的变化，还要对已有的 Excel 文件进行读取。在这个过程中，研究并尝试了一些工具，也走了一些弯路。记录下来，下次再有类似需求的时候就不用漫天遍野地搜索了。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class="section" id="pk"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;超级无敌大 PK&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我主要尝试了四种工具，在此并不会给出他们的排名，因为在不同的应用场景下，做出的选择会不同。&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="8%"/&gt;
&lt;col width="21%"/&gt;
&lt;col width="22%"/&gt;
&lt;col width="23%"/&gt;
&lt;col width="25%"/&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt; &lt;/th&gt;
&lt;th class="head"&gt;&lt;a class="reference external" href="https://github.com/jmcnamara/XlsxWriter"&gt;XlsxWriter&lt;/a&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;a class="reference external" href="http://www.python-excel.org/"&gt;xlrd&amp;amp;xlwt&lt;/a&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;a class="reference external" href="http://openpyxl.readthedocs.org/"&gt;OpenPyXL&lt;/a&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;a class="reference external" href="http://msdn.microsoft.com/en-us/library/fp179694.aspx"&gt;Microsoft Excel API&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;介绍&lt;/td&gt;
&lt;td&gt;可以创建 Excel 2007
或更高版本的 XLSX
文件&lt;/td&gt;
&lt;td&gt;即 &lt;a class="reference external" href="http://www.python-excel.org/"&gt;python-excel&lt;/a&gt;，含
&lt;a class="reference external" href="https://pypi.python.org/pypi/xlrd"&gt;xlrd&lt;/a&gt;、&lt;a class="reference external" href="https://pypi.python.org/pypi/xlwt"&gt;xlwt&lt;/a&gt; 和
&lt;a class="reference external" href="https://pypi.python.org/pypi/xlutils"&gt;xlutils&lt;/a&gt; 三大模块，分别提供读、写和其他功能&lt;/td&gt;
&lt;td&gt;可以读写 Excel 2007 XLSX
和 XLSM 文件&lt;/td&gt;
&lt;td&gt;直接通过 COM 组件与Microsoft
Excel 进程通信，调用其各种功能实现对 Excel 文件的操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;读&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;写&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;修改&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;⚠️&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;.xls&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;.xlsx&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;⚠️&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;大文件&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;功能&lt;/td&gt;
&lt;td&gt;强&lt;/td&gt;
&lt;td&gt;弱&lt;/td&gt;
&lt;td&gt;一般&lt;/td&gt;
&lt;td&gt;超强&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;速度&lt;/td&gt;
&lt;td&gt;快&lt;/td&gt;
&lt;td&gt;快&lt;/td&gt;
&lt;td&gt;快&lt;/td&gt;
&lt;td&gt;超慢&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;系统&lt;/td&gt;
&lt;td&gt;无限制&lt;/td&gt;
&lt;td&gt;无限制&lt;/td&gt;
&lt;td&gt;无限制&lt;/td&gt;
&lt;td&gt;Windows + Excel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;使用场景&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;要创建 XLSX 文件&lt;/li&gt;
&lt;li&gt;不需要读取已有文件&lt;/li&gt;
&lt;li&gt;需要实现比较复杂的功能&lt;/li&gt;
&lt;li&gt;数据量可能会很大&lt;/li&gt;
&lt;li&gt;需要跨平台&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;要读取 XLS 或 XLSX 文件&lt;/li&gt;
&lt;li&gt;要生成 XLS 文件&lt;/li&gt;
&lt;li&gt;需要的功能不太复杂&lt;/li&gt;
&lt;li&gt;需要跨平台&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;要处理 XLSX 文件&lt;/li&gt;
&lt;li&gt;需要修改已有文件，或者在写入过程中需要不断修改&lt;/li&gt;
&lt;li&gt;需要的功能比较复杂&lt;/li&gt;
&lt;li&gt;数据量可能会很大&lt;/li&gt;
&lt;li&gt;需要跨平台&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;需要处理各种文件格式&lt;/li&gt;
&lt;li&gt;需要用到特别复杂的功能&lt;/li&gt;
&lt;li&gt;在修改文件时，不希望对原有信息造成任何意外破坏&lt;/li&gt;
&lt;li&gt;数据量很小，或者愿意等待&lt;/li&gt;
&lt;li&gt;仅在 Windows 中使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="xlsxwriter"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt;XlsxWriter&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/jmcnamara/XlsxWriter"&gt;XlsxWriter&lt;/a&gt; 是我最终选择的用于写操作的工具。顾名思义，它只能用来写文件。&lt;/p&gt;
&lt;p&gt;这应该是个比较新的项目，在 GitHub 上看它最早的提交是在 2013 年 1 月份。其官方文档中宣称它支持：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;100% compatible Excel XLSX files.&lt;/li&gt;
&lt;li&gt;Full formatting.&lt;/li&gt;
&lt;li&gt;Merged cells.&lt;/li&gt;
&lt;li&gt;Defined names.&lt;/li&gt;
&lt;li&gt;Charts.&lt;/li&gt;
&lt;li&gt;Autofilters.&lt;/li&gt;
&lt;li&gt;Data validation and drop down lists.&lt;/li&gt;
&lt;li&gt;Conditional formatting.&lt;/li&gt;
&lt;li&gt;Worksheet PNG/JPEG images.&lt;/li&gt;
&lt;li&gt;Rich multi-format strings.&lt;/li&gt;
&lt;li&gt;Cell comments.&lt;/li&gt;
&lt;li&gt;Memory optimisation mode for writing large files.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id21"&gt;优点&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一、功能比较强&lt;/p&gt;
&lt;p&gt;相对而言，这是除 Excel 自身之外功能最强的工具了。比如我就用到了它提供的：字体设置、前景色背景色、border 设置、视图缩放（zoom）、单元格合并、autofilter、freeze panes、公式、data validation、单元格注释、行高和列宽设置等等。&lt;/p&gt;
&lt;p&gt;最让我惊奇的是，用它生成的带有单元格注释的 Excel 文件，不论是 Excel 2007 还是 Excel 2013 都可正常打开（下面会提到，这个任务用 Excel 自身都无法完成）。&lt;/p&gt;
&lt;p&gt;二、支持大文件写入&lt;/p&gt;
&lt;p&gt;如果数据量非常大，可以启用 &lt;a class="reference external" href="http://xlsxwriter.readthedocs.org/en/latest/working_with_memory.html"&gt;constant memory 模式&lt;/a&gt;，这是一种顺序写入模式，得到一行数据就立刻写入一行，而不会把所有的数据都保持在内存中。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id22"&gt;缺点&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一、不支持读取和修改&lt;/p&gt;
&lt;p&gt;作者并没有打算做一个 XlsxReader 来提供读取操作。不能读取，也就无从修改了。它只能用来创建新的文件。我是利用 xlrd 把需要的信息读入后，用 XlsxWriter 创建全新的文件。&lt;/p&gt;
&lt;p&gt;另外，即使是创建到一半 Excel 文件，也是无法读取已经创建出来的内容的（信息应该在，但是并没有相应的接口）。因为它的主要方法是 &lt;tt class="docutils literal"&gt;write&lt;/tt&gt; 而不是 &lt;tt class="docutils literal"&gt;set&lt;/tt&gt;。当你在某个单元格写入数据后，除非你自己保存了相关的内容，否则还是没有办法读出已经写入的信息。从这个角度看，你无法做到读出 -&amp;gt; 修改 -&amp;gt; 写回，只能是写入 -&amp;gt; 写入 -&amp;gt; 写入。&lt;/p&gt;
&lt;p&gt;二、不支持 XLS 文件&lt;/p&gt;
&lt;p&gt;XLS 是 Office 2013 或更早版本所使用的格式，是一种二进制格式的文件。XLSX 则是用一系列 XML 文件组成的（最后的 X 代表了 XML）一个压缩包。如果非要创建低版本的 XLS 文件，就请移步 xlwt 吧。&lt;/p&gt;
&lt;p&gt;三、暂时不支持透视表（Pivot Table）&lt;/p&gt;
&lt;p&gt;透视表是非常麻烦的东西，除了自身复杂的结构外，还需要一套数据缓存。我向作者提出了这个需求，不过这是个很难完全实现的功能，我们慢慢期待吧。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="xlrd-xlwt"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id23"&gt;xlrd&amp;amp;xlwt&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我的程序在第一版的时候，使用 &lt;a class="reference external" href="https://pypi.python.org/pypi/xlwt"&gt;xlwt&lt;/a&gt; 创建 XLS 文件，然后通过 &lt;a class="reference external" href="http://msdn.microsoft.com/en-us/library/fp179694.aspx"&gt;Microsoft Excel API&lt;/a&gt; 将其转换为 XLSX 文件，并写入高级的 Data Validation（Excel 2007 的 Data Validation 比 Excel 2003 要强大不少）和单元格注释。&lt;/p&gt;
&lt;p&gt;我的程序最终的版本也依然用 &lt;a class="reference external" href="https://pypi.python.org/pypi/xlrd"&gt;xlrd&lt;/a&gt; 从已有的文件中读出所需的信息。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.python-excel.org/"&gt;xlrd&amp;amp;xlwt&lt;/a&gt; 主要是针对 Office 2013 或更早版本的 XLS 文件格式。&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id24"&gt;优点&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一、支持 XLS 格式&lt;/p&gt;
&lt;p&gt;XlsxWriter 和 OpenPyXL 都不支持 XLS 格式，从这个角度看，&lt;a class="reference external" href="http://www.python-excel.org/"&gt;xlrd&amp;amp;xlwt&lt;/a&gt; 仍然有一定的不可替代性。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id25"&gt;缺点&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一、对 XLSX 支持比较差&lt;/p&gt;
&lt;p&gt;目前 &lt;a class="reference external" href="https://pypi.python.org/pypi/xlrd"&gt;xlrd&lt;/a&gt; 已经可以读取 XLSX 文件了，有限地支持。至于 &lt;a class="reference external" href="https://pypi.python.org/pypi/xlwt"&gt;xlwt&lt;/a&gt; 我没有试验过，估计是够呛。&lt;/p&gt;
&lt;p&gt;二、对修改的支持比较差&lt;/p&gt;
&lt;p&gt;xlrd 和 xlwt 是两个相对独立的模块，虽然 &lt;a class="reference external" href="https://pypi.python.org/pypi/xlutils"&gt;xlutils&lt;/a&gt; 提供方法帮助你把 &lt;tt class="docutils literal"&gt;xlrd.Book&lt;/tt&gt; 对象复制到 &lt;tt class="docutils literal"&gt;xlwt.Workbook&lt;/tt&gt; 对象，但跟 XlsxWriter 类似，后者只是提供 write 方法，使得你无法很容易地获取当前已经写入的数据并进行有针对性的修改。如果非要这样做，你要不断地保存，然后再用新的 &lt;tt class="docutils literal"&gt;xlrd.Book&lt;/tt&gt; 对象读取你要的信息，还是比较麻烦的。&lt;/p&gt;
&lt;p&gt;三、功能很弱&lt;/p&gt;
&lt;p&gt;除了最基本的写入数据和公式，xlwt 所提供的功能非常少（Excel 2013 本身支持的功能也就很少）。对于读取也是一样的，很多信息在读入时就丢失掉了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="openpyxl"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id26"&gt;OpenPyXL&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://openpyxl.readthedocs.org/"&gt;OpenPyXL&lt;/a&gt; 是比较综合的一个工具，能读能写能修改，功能还算可以但也有很大的缺陷。我在中间版本的时候是打算完全依赖它的，但后来发现一个严重的问题就放弃了。&lt;/p&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id27"&gt;优点&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一、能读能写能修改&lt;/p&gt;
&lt;p&gt;OpenPyXL 的工作模式跟 XlsxWriter 和 xlwt 有很大的区别，它用的是 getter/setter 模式。你可以随时读取某个单元格的内容，并根据其内容进行相应的修改，OpenPyXL 会帮你记住每个单元格的状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特别需要注意的一点：&lt;/strong&gt;虽然它支持修改已有文件，但由于其所支持的功能有限，读入文件时会忽略掉它所不支持的内容，再写入时，这些内容就丢失了。因此使用时一定要慎重。比如下面的缺点中提到它无法读入公式，那如果你修改一个带有公式的文件，保存之后，所有的公式就都没有了。&lt;/p&gt;
&lt;p&gt;二、功能还算可以&lt;/p&gt;
&lt;p&gt;整体来讲，它所支持的功能介于 XlsxWriter 和 xlwt 之间。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id28"&gt;缺点&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一、不支持 XLS&lt;/p&gt;
&lt;p&gt;这件事情只能让 xlrd 和 xlwt 去做。&lt;/p&gt;
&lt;p&gt;二、不支持读取公式&lt;/p&gt;
&lt;p&gt;这其实是个不太简单的事情，虽然我没尝试过，但相信 xlrd 也做不好这件事。&lt;/p&gt;
&lt;p&gt;Excel 的单元格如果是一个公式，它内部会同时保存公式本身和运算结果的缓存。用 OpenPyXL 读取单元格内容，它不会告诉你这个单元格的公式是什么，甚至不会告诉你这个单元格存的是公式，它只会拿到这个缓存的运算结果。我本来想利用它判别单元格是不是用了公式，然后做出不同的处理。结果遇到了这个问题，最后只好采取了其他变通的方式去做。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="microsoft-excel-api"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id29"&gt;Microsoft Excel API&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;大部分 Windows 环境的开发人员都会选择 &lt;a class="reference external" href="http://msdn.microsoft.com/en-us/library/fp179694.aspx"&gt;Microsoft Excel API&lt;/a&gt;。实际上不仅仅是 Python，几乎各种语言都有相应的方法使用它，因为核心的逻辑完全是由 Microsft
Excel 自身提供的。语言相关的部分只是负责跟 Windows 的 COM 组件进行通信。&lt;/p&gt;
&lt;p&gt;在 Python 中首先需要安装 &lt;a class="reference external" href="http://sourceforge.net/projects/pywin32/"&gt;Python for Windows extensions&lt;/a&gt;（&lt;a class="reference external" href="http://sourceforge.net/projects/pywin32/"&gt;pywin32&lt;/a&gt;），具体的文档可以查阅 &lt;a class="reference external" href="http://docs.activestate.com/activepython/2.4/pywin32/win32_modules.html"&gt;Win32 Modules&lt;/a&gt; 和 &lt;a class="reference external" href="http://docs.activestate.com/activepython/2.4/pywin32/com.html"&gt;Python COM&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;当然你还必须要安装某一个版本的 Microsoft Office Excel，它内部的 DLL 负责实际的操作。&lt;/p&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id30"&gt;优点&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一、最大的优点：强大无极限&lt;/p&gt;
&lt;p&gt;因为直接与 Excel 进程通信，你可以做任何在 Excel 里可以做的事情。&lt;/p&gt;
&lt;p&gt;二、文档丰富&lt;/p&gt;
&lt;p&gt;MSDN 上的文档绝对是世界上最优秀的文档。没有之一。&lt;/p&gt;
&lt;p&gt;三、调试方便&lt;/p&gt;
&lt;p&gt;你完全可以直接在 Excel 里面用宏先调试你想要的效果。甚至如果你不清楚怎么用程序实现某个操作，你可以通过宏录制的方法得到该操作的处理代码。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id31"&gt;缺点&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一、致命的缺点：慢到死&lt;/p&gt;
&lt;p&gt;因为需要与 Excel 进程通信，其效率是非常低的。&lt;/p&gt;
&lt;p&gt;如果让 Excel 窗口可见，随着程序的运行，你可以看到每一句程序所带来的变化，单元格的内容一个一个地改变。如果要写入的数据很多，那速度是无法忍受的。&lt;/p&gt;
&lt;p&gt;二、平台限制&lt;/p&gt;
&lt;p&gt;目前还没有发现可以在非 Windows 系统使用它的方法。&lt;/p&gt;
&lt;p&gt;另外，基于它的程序能做什么事情，很大程度上依赖于当前系统所安装的 Excel 版本。不同的版本在功能上有很大的差异，API 也会有差异。用起来会比较麻烦。&lt;/p&gt;
&lt;p&gt;三、Excel 自身 bug 导致的问题&lt;/p&gt;
&lt;p&gt;我刚好发现了其中一个，这和 Python 没有任何关系，可以完全在 Excel 中手动复现。在 Excel 2007 中随便创建一个文件，给某个单元格添加注释，保存。换台电脑，用 Excel 2013 打开，就会报错，然后注释就消失了。&lt;/p&gt;
&lt;p&gt;同样如果你的程序在一台装有 Excel 2007 的机器上创建一个带有注释的 Excel 文件，把这个文件拿到 Excel 2013 中打开也会报错，也看不到注释。反过来也一样。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id32"&gt;关于初始化&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Excel 的 com 接口的具体细节我就不介绍了，需要的话直接查阅相关的 MSDN 文档即可。这里只提几个特殊的小问题。&lt;/p&gt;
&lt;p&gt;要想得到一个可以操作的 excel 对象，一般可以有两种方式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;win32com.client&lt;/span&gt;

&lt;span class="n"&gt;excel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;win32com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Excel.Application'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;win32com.client&lt;/span&gt;

&lt;span class="n"&gt;excel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;win32com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DispatchEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Excel.Application'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;二者的区别在于，Dispatch 方法会试图寻找并复用一个已有的 Excel 进程（比如你已经在运行着的 Excel 程序），而 DispatchEx 则一定会创建一个新的 Excel 进程。一般情况使用前者就可以了，还能节省一些资源的开销。但也会带来一些麻烦，有一些状态是在一个 Excel 进程内共享的，你在同进程的其他窗口内操作有可能会影响到 Python 程序所要进行的处理，导致各种错误。比如当你手动开启的 Excel 窗口中，某个单元格正处于编辑状态，那 Python 程序控制的大部分操作都有可能失败（即使它操作的是另一个文件），因为一个 Excel 进程中无法让两个单元格同时被编辑。&lt;/p&gt;
&lt;p&gt;为了避免麻烦，我一般都使用 DispatchEx 方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id33"&gt;关于窗口可见&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以让新启动的 Excel 进程窗口可见，就像你通过双击桌面上的图标启动一样，程序所控制的每一步操作，在这个窗口中都可以观察得到。你也可以同时进行手动的操作，但一旦这样做，很有可能使你的 Python 程序崩溃。&lt;/p&gt;
&lt;p&gt;窗口不可见也会带来一些麻烦，前面说了，通过 Python 启动的 Excel 进程跟你直接从桌面打开的 Excel 进程没有什么区别，在使用 Excel 的过程中，我们经常会遇到各种弹出的错误、警告或者提示框，这些在用 Python 处理时也有可能遇到。尤其当你的程序还没完全调试好时。&lt;/p&gt;
&lt;p&gt;我一般都会让程序控制的 Excel 进程在调试过程中可见，正式使用时不可见，通过类似这样的命令（假设你有一个叫做 &lt;tt class="docutils literal"&gt;is_debug&lt;/tt&gt; 的变量记录当前是否在调试状态）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;excel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;win32com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DispatchEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Excel.Application'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;    &lt;span class="n"&gt;excel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Visible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id34"&gt;关于保存并覆盖已有文件&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;打开和保存文件的细节不在这里多说了，可以查看 MSDN 中相关的 API 介绍，非常详细。这里只说一下在另存为时，如果目标文件已经存在怎么办。Excel 的 API 另存为方法似乎并没有提供参数决定是否直接覆盖同名的目标文件，在窗口操作中，这种情况会弹出一个确认框来让用户决定。我们的程序当然不想这么做，实际上如果你按照上面所说的让窗口不可见，你也就看不到弹出的窗口。&lt;/p&gt;
&lt;p&gt;可以把 DisplayAlert 属性关闭，这样 Excel 就不会弹出确认窗，而是直接覆盖同名文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;orig_display_alerts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;excel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DisplayAlerts&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="n"&gt;excel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DisplayAlerts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SaveAs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;save_as_file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;excel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DisplayAlerts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;orig_display_alerts&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="excel"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id35"&gt;关于结束 Excel 进程&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;进程是一种资源，我们申请了资源，在用完之后就必须要释放掉。尤其如果你隐藏了 Excel 窗口，用户只有查看系统进程，否则无法关闭你所开启的进程。&lt;/p&gt;
&lt;p&gt;但是一个 Excel 进程是可以同时开启多个文件的，这些文件可能是你程序的其他部分开启的，也可能是用户自己开启的。这样你就不能随意地结束 Excel 进程，否则会影响到其他人或程序的操作。&lt;/p&gt;
&lt;p&gt;我一般会在我的处理完成后（关闭了我自己打开或者创建的 Excel 文件），判断一下当前 Excel 进程是否还开启着其他的文档，如果没有了才会结束该进程。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="hll"&gt;&lt;span class="n"&gt;number_of_workbooks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;excel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Workbooks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number_of_workbooks&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;'there are still &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; workbooks opened in excel process, not quit excel application'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;number_of_workbooks&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;'no workbook opened in excel process, quiting excel application instance ...'&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;excel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;excel&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id36"&gt;关于枚举常量&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Excel API 中有各种各样的枚举常量，我还没有找到在 Python 中直接引用这些常量的方法，目前的办法是找到所需的常数的值，自己定义这些常数。比如我用到了如下这些枚举常量：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExcelConstants&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# XlFileFormat Enumeration&lt;/span&gt;
    &lt;span class="n"&gt;xlOpenXMLWorkbook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;  &lt;span class="c1"&gt;# Open XML Workbook.&lt;/span&gt;

    &lt;span class="c1"&gt;# XlDVType Enumeration&lt;/span&gt;
    &lt;span class="n"&gt;xlValidateList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;# Value must be present in a specified list.&lt;/span&gt;

    &lt;span class="c1"&gt;# XlDVAlertStyle Enumeration&lt;/span&gt;
    &lt;span class="n"&gt;xlValidAlertStop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# Stop icon.&lt;/span&gt;

    &lt;span class="c1"&gt;# Constants Enumeration&lt;/span&gt;
    &lt;span class="n"&gt;xlCenter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4108&lt;/span&gt;

    &lt;span class="c1"&gt;# XlLineStyle enumeration&lt;/span&gt;
    &lt;span class="n"&gt;xlContinuous&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;要想知道某一个枚举常量的数值，可以查阅 MSDN 中 &lt;a class="reference external" href="http://msdn.microsoft.com/en-us/library/office/ff838815.aspx"&gt;Excel Enumerations&lt;/a&gt; 相关的资料。&lt;/p&gt;
&lt;p&gt;【2014 年 7 月 31 日更新】感谢 &lt;a class="reference external" href="https://blog.gocalf.com/python-read-write-excel.html#comment-1329532357"&gt;@依云&lt;/a&gt; 提醒，在 Python 也能够直接引用相关的常量，即通过 &lt;tt class="docutils literal"&gt;win32com.client.constants&lt;/tt&gt; 获取常量的值。不过这里还有一点比较 tricky 的地方，如果直接用 Dispatch 或者 DispatchEx 得到 Excel 对象，是无法从 constants 中取出常量值的，需要 &lt;a class="reference external" href="http://timgolden.me.uk/python/win32_how_do_i/generate-a-static-com-proxy.html"&gt;手动运行 makepy&lt;/a&gt;，或者通过 &lt;tt class="docutils literal"&gt;win32com.client.gencache.EnsureDispatch&lt;/tt&gt; 获得 Excel 对象：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;win32com&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;win32com.client&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;constants&lt;/span&gt;
&lt;span class="n"&gt;excel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;win32com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gencache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnsureDispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Excel.Application'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;constants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlOpenXMLWorkbook&lt;/span&gt;  &lt;span class="c1"&gt;# will be 51&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;constants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlCenter&lt;/span&gt;  &lt;span class="c1"&gt;# will be -4108&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="程序开发"></category><category term="Excel"></category></entry><entry><title>让页面中嵌入的 SVG 图片可以缩放</title><link href="https://blog.gocalf.com/scale-embedded-svg" rel="alternate"></link><published>2013-11-19T21:52:00+08:00</published><updated>2013-11-19T21:52:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2013-11-19:/scale-embedded-svg</id><summary type="html">&lt;p class="first last"&gt;在 HTMl 页面中用 &amp;lt;object&amp;gt; 标签嵌入的 SVG 图片如何能跟随窗口大小自动缩放呢？&lt;/p&gt;
</summary><content type="html">&lt;p&gt;以前不知道出于什么原因，一直仅仅钟爱于 PNG 图片，对矢量图完全没有兴趣。最近突然觉得矢量图才是王道啊。&lt;/p&gt;
&lt;p&gt;我目前主要使用 &lt;a class="reference external" href="http://www.w3.org/Graphics/SVG/"&gt;SVG（Scalable Vector Graphics）&lt;/a&gt; 格式的矢量图，而且把以前的一些位图附件也用 SVG 重绘了。&lt;/p&gt;
&lt;p&gt;随即发现一个问题，位图会随着页面宽度的变窄而自动缩小，但是 SVG 图片却并没有变化，页面宽度变窄后，它们就害羞似的藏起一半脸来。怎么让 SVG 图片也能随着页面宽度变化而自动缩放呢？&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;这里主要针对已经以 &lt;tt class="docutils literal"&gt;.svg&lt;/tt&gt; 扩展名保存的 SVG 图片文件。把这种格式的图片嵌入到 HTML 页面中主要有 &lt;a class="reference external" href="http://www.w3schools.com/svg/svg_inhtml.asp"&gt;三种方法&lt;/a&gt;，即用 &lt;tt class="docutils literal"&gt;&amp;lt;embed&amp;gt;&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;&amp;lt;object&amp;gt;&lt;/tt&gt; 或者 &lt;tt class="docutils literal"&gt;&amp;lt;iframe&amp;gt;&lt;/tt&gt; 标签，具体的语法分别是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;embed&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;path-to-image.svg&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;image/svg+xml&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;object&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;path-to-image.svg&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;image/svg+xml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;iframe&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;path-to-image.svg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;iframe&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然，对于大多数浏览器，你也可以直接用 &lt;tt class="docutils literal"&gt;&amp;lt;img&amp;gt;&lt;/tt&gt; 标签，即：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;path-to-image.svg&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;some text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果用 &lt;tt class="docutils literal"&gt;&amp;lt;img&amp;gt;&lt;/tt&gt; 标签，那事情就简单了，它跟其他 &lt;tt class="docutils literal"&gt;&amp;lt;img&amp;gt;&lt;/tt&gt; 标签里的位图一样，都可以在 CSS 的控制下随着页面而缩放，当然跟位图不同的是，它在缩放的时候不会有锯齿出现。&lt;/p&gt;
&lt;p&gt;通常情况下，还是推荐使用 &lt;tt class="docutils literal"&gt;&amp;lt;object&amp;gt;&lt;/tt&gt; 标签来嵌入 SVG 图片，&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; 中默认的 &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/ref/rst/directives.html#figure"&gt;figure directive&lt;/a&gt; 和 &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/ref/rst/directives.html#image"&gt;image directive&lt;/a&gt; 在遇到 SVG 图片时也是使用 &lt;tt class="docutils literal"&gt;&amp;lt;object&amp;gt;&lt;/tt&gt; 标签的。&lt;/p&gt;
&lt;p&gt;用 &lt;tt class="docutils literal"&gt;&amp;lt;object&amp;gt;&lt;/tt&gt; 标签的时候，SVG 图片似乎就不会随着该标签的宽度和高度设置而有任何缩放，比如下面这张图。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;object data="https://blog.gocalf.com/images/2013/11/svg_demo.svg" type="image/svg+xml"&gt;
svg_demo&lt;/object&gt;
&lt;p class="caption"&gt;不会随着页面宽度而缩放的 SVG 图片&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在询问了万能的 Google 之后，发现了解决的办法。原来如果 SVG 的根结点如果设置了 &lt;tt class="docutils literal"&gt;width&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;height&lt;/tt&gt; 属性，图片就不会自动缩放，所要做的就是去掉这两个属性（在 &lt;a class="reference external" href="http://inkscape.org/"&gt;Inkscape&lt;/a&gt; 中删除它们会使得它们被修改为 &lt;tt class="docutils literal"&gt;100%&lt;/tt&gt;），然后根据图片中内容所占用的区域，设置 &lt;tt class="docutils literal"&gt;viewBox&lt;/tt&gt;。有人说还要设置 &lt;tt class="docutils literal"&gt;preserveAspectRatio&lt;/tt&gt;，不过我还没有仔细研究这个属性的具体影响，反正目前看起来加不加都行。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;preserveAspectRatio=&amp;quot;xMinYMin meet&amp;quot;
viewBox=&amp;quot;0 0 {width} {height}&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;把其中的 &lt;tt class="docutils literal"&gt;{width}&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;{height}&lt;/tt&gt; 用实际的数值替换掉就可以了。&lt;/p&gt;
&lt;p&gt;用这个方法处理一下上面那张图，可以看到它填满整个正文区宽度了：&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;object data="https://blog.gocalf.com/images/2013/11/svg_demo_scale.svg" type="image/svg+xml"&gt;
svg_demo_scale&lt;/object&gt;
&lt;p class="caption"&gt;会随着页面宽度而缩放的 SVG 图片&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;好像还有点儿不太对劲儿，一般的位图嵌入页面后，如果页面足够宽，它也只是按照它自身的宽度和高度展示，但上面这张矢量图却总是占满全部宽度，有时候它有点儿太大了。&lt;/p&gt;
&lt;p&gt;解决的办法很简单，给这个 &lt;tt class="docutils literal"&gt;&amp;lt;object&amp;gt;&lt;/tt&gt; 标签添加一个 &lt;tt class="docutils literal"&gt;width&lt;/tt&gt; 属性，指定好默认的宽度就可以了。&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; 中的 &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/ref/rst/directives.html#figure"&gt;figure directive&lt;/a&gt; 和 &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/ref/rst/directives.html#image"&gt;image directive&lt;/a&gt; 都可以非常方便地指定图片的宽度（或高度）。添加之后的效果如下：&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;object data="https://blog.gocalf.com/images/2013/11/svg_demo_scale.svg" style="width: 491px;" type="image/svg+xml"&gt;
svg_demo_scale&lt;/object&gt;
&lt;p class="caption"&gt;会随着页面宽度而缩放，但是又不会变得过大的 SVG 图片&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;看起来好像跟第一张图片一样啊。&lt;/p&gt;
&lt;p&gt;关键的区别在于，我们可以通过 CSS 来指定矢量图的最大宽度，让它不要超出页面（或者父级区块）的范围，比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;object&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;image/svg+xml&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你可以试着改变浏览器窗口大小来查看效果。当窗口很窄的时候，第三张图会跟着缩小，但第一张图不会。&lt;/p&gt;
</content><category term="建站"></category><category term="HTML"></category><category term="SVG"></category></entry><entry><title>博客从 WordPress 迁移到 Pelican</title><link href="https://blog.gocalf.com/wordpress-to-pelican" rel="alternate"></link><published>2013-11-06T21:15:00+08:00</published><updated>2013-11-12T14:00:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2013-11-06:/wordpress-to-pelican</id><summary type="html">&lt;p class="first last"&gt;经过一段时间的整理，现在正式把 GoCalf 博客从 WordPress 迁移到 Pelican 了。&lt;/p&gt;
</summary><content type="html">
&lt;p&gt;经过一段时间的整理，现在正式把 &lt;a class="reference external" href="https://blog.gocalf.com/"&gt;GoCalf 博客&lt;/a&gt; 从 &lt;a class="reference external" href="http://wordpress.org/"&gt;WordPress&lt;/a&gt; 迁移到 &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; 了，简单记录一下，还有一些未完成的事情等着以后再慢慢搞。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class="section" id="wordpress-vs"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;WordPress vs. 静态博客&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;最开始的动机只是想寻找一个最适合自己的个人 wiki 系统，之前把一些备忘信息用 &lt;a class="reference external" href="http://tiddlywiki.com/"&gt;TiddlyWiki&lt;/a&gt; 保存在 U 盘上，这样在任何地方，用任何操作系统的电脑都可以查看和编辑。但是后来懒到每次都懒的把 U 盘拿过来插上，所以并没有发挥太大的作用。后来开始用 &lt;a class="reference external" href="https://www.dropbox.com/"&gt;DropBox&lt;/a&gt;，其他很多东西都移到 DropBox 里了，这个却一直没有动。现在 &lt;a class="reference external" href="http://office.microsoft.com/en-us/onenote/"&gt;OneNote&lt;/a&gt; 和 &lt;a class="reference external" href="https://evernote.com/"&gt;Evernote&lt;/a&gt; 和 &lt;a class="reference external" href="http://note.youdao.com/"&gt;有道云笔记&lt;/a&gt; 同时在用，却没有一个是我真正想要的。&lt;/p&gt;
&lt;p&gt;扯远了。&lt;/p&gt;
&lt;p&gt;总之在进行个人 wiki 的技术选型时，产生了把 &lt;a class="reference external" href="https://blog.gocalf.com/"&gt;GoCalf 博客&lt;/a&gt; 改成静态博客的念头。&lt;/p&gt;
&lt;p&gt;接触 &lt;a class="reference external" href="http://wordpress.org/"&gt;WordPress&lt;/a&gt; 很多年了，这个东西确实非常的强大，丰富的插件使得它几乎可以实现任何我想要的功能。但也总会有人说不要过多地依赖插件，它们会让你的博客变得非常的慢。当然插件太多也挺麻烦的，经常想要某个功能，会发现很多很多相关的插件，对于有选择困难的我来说，这实在是太痛苦了。得考虑插件本身实现的功能是否足够强大，得考虑插件是否还在持续地被维护，得考虑各种兼容性问题等等。像我一直使用的代码高亮插件 &lt;a class="reference external" href="http://wordpress.org/plugins/codecolorer/"&gt;CodeColorer&lt;/a&gt;，在我最早开始用 WordPress 的时候，觉得这个插件是最好的，但最近两年它都不再更新了。它有一些小的 bug，向作者反馈后没有收到任何回音，而我又懒得自己改。但是要换别的插件也很麻烦，因为我特别喜欢使用它独特的标记语法，别的插件都不支持。&lt;/p&gt;
&lt;p&gt;让我想要放弃 WordPress 的另一个原因是，不知道是不是心理作用，每次用 WordPress 写东西都感觉像是非常复杂的一件事，甚至有点儿害怕用它。就是感觉特别的麻烦，加上服务器放在境外，访问速度也不是很乐观，就更加不方便了。在写的过程中，也总是会担心这样或那样的小错误，最让我头疼的就是 HTML 特殊字符的转义了，在代码片段或者数学公式中遇到特殊字符，有时候是要转义的，有时候不用转义，有时候打开一篇老文章，不做任何改动再保存，格式就会出问题。&lt;/p&gt;
&lt;p&gt;可能是因为它太过强大了。&lt;/p&gt;
&lt;p&gt;看了一些静态博客方面的文章，感觉挺好的，用任何一个自己喜欢的文本编辑器按照自己习惯的格式去书写，至少在这个过程中完全不用考虑任何展示方面的事情。&lt;/p&gt;
&lt;p&gt;写文章的过程变得很简洁，不需要趴在服务器上去写，不用担心异常断网等情况带来的不便，只需要有一台机器，有一个自己喜欢的编辑器，写完之后用一个简单的命令就可以进行发布。&lt;/p&gt;
&lt;p&gt;静态博客还有一个重要的优势是，它几乎不占用什么服务器的运算资源，所有的 HTML 页面都是在发布前夕在本地生成的，最终在服务器上趴着的只有一个个静态 HTML 页面，所有的插件都是在发布前在本地进行运算的，不会因为插件众多而拖垮服务器。没有数据库，没有 PHP，任何一个可以托管静态页面的地方都可以放下整个博客。&lt;/p&gt;
&lt;p&gt;另外博客的备份也变得简单了，没有数据库了，也不用从服务器上把文件都拷贝回来。所有的源文件都在本地，可以用任何喜欢的方式进行备份。我现在利用 GitHub 进行备份，连修改历史都有了。&lt;/p&gt;
&lt;p&gt;不知道是不是冥冥之中注定了要走上静态之路，就在我正试着把 WordPress 上的文章往静态博客转移的时候，我的 WordPress 站点出了些奇怪的问题。已有的文章进入编辑模式后看不到任何内容，这时候如果保存一下，那文章就变成白纸了。有一篇文章的内容莫名其妙地丢失了，我记得我只是打开编辑模式看了看，并没有保存，但它真的没有了。感觉像是 CKEditor 插件出问题了，把它禁用之后，发现还是不行。如果写新的文章，换行什么的都失效了，虽然编辑框里一个个段落都存在，保存之后所有的段落都粘在一起了。再次启用 CKEditor 之后，发现编辑器并没有相应地发生变化。一切都乱套了。&lt;/p&gt;
&lt;p&gt;最后放弃了修复这些问题，让它们全都消失好了。&lt;/p&gt;
&lt;p&gt;静态博客会有一个问题，就是没法直接加入动态的东西。比如评论，比如搜索。搜索暂时没有考虑，对于评论，可以利用社交化评论系统，比如我现在用的 &lt;a class="reference external" href="http://disqus.com/"&gt;Disqus&lt;/a&gt;，在生成的 html 页面中嵌入一段 JavaScript 代码，当浏览器打开这个页面的时候，JavaScript 代码会从 Disqus 服务器上获取相关的评论信息并展示出来。也可以自己做一个简单的评论系统，不过对于垃圾评论满天飞的互联网，要想做好还是很难的。&lt;/p&gt;
&lt;p&gt;总的来说，静态博客的好处是，你只需要关注要写的内容本身。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="octopress-vs-pelican"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Octopress vs. Pelican&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;刚开始接触到的静态博客是 &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt;，是基于 &lt;a class="reference external" href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; 的，后者是用 Ruby 写的静态博客系统。据说 Octopress 与 Jekyll 的关系就像 jQuery 与 JavaScript 的关系一样。&lt;/p&gt;
&lt;p&gt;现在 Octopress 很火的，在 &lt;a class="reference external" href="https://github.com/imathis/octopress/wiki/Octopress-Sites"&gt;Octopress Sites&lt;/a&gt; 中可以看到很多基于 Octopress 搭建的博客，我也针对一些我需要的特性对它进行了一些勘察。不过很快地，我就把目光转向了基于 Python 的 &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Pelican 的使用量相对来说少一些（&lt;a class="reference external" href="https://github.com/getpelican/pelican/wiki/Powered-by-Pelican"&gt;Pelican Sites&lt;/a&gt;），选择它的主要原因是我更熟悉 Python。Ruby 的代码我几乎没有看过，也没有尝试去读或者写，这样如果在使用 Octopress 过程中，需要做一些修改，或者写一些插件，就会比较困难。但如果使用 Pelican，我可以自己修改它的代码，可以自己写插件。后来发现这个选择是对的，我已经对 Pelican 及其插件做了一些修改，而且已经计划写一些至少自己能用的上的新插件。&lt;/p&gt;
&lt;p&gt;Pelican 当前的版本是 3.3.0，虽然没有和 Octopress 具体地对比，但它有些功能是我很喜欢的，比如 &lt;a class="reference external" href="http://docs.getpelican.com/en/latest/getting_started.html#linking-to-internal-content"&gt;linking to internal content&lt;/a&gt; 用于把不同的文章、或者文章和附件联系起来，而不需要关心它们发布后在什么位置；比如内置了对多语言博客的支持（&lt;a class="reference external" href="http://docs.getpelican.com/en/latest/getting_started.html#translations"&gt;translations&lt;/a&gt;）；还有草稿模式等等。&lt;/p&gt;
&lt;p&gt;相对的，它的缺点主要是插件还不够丰富，只好用“自己写”来弥补了。另外大多数 Pelican 主题都不好看，这个问题回头再慢慢解决吧。&lt;/p&gt;
&lt;p&gt;现在我的这个博客看起来有点儿像 Octopress，是因为我用了 &lt;a class="reference external" href="http://docs.getpelican.com/en/latest/getting_started.html#translations"&gt;Octopress Theme for Pelican&lt;/a&gt;。这只是暂时的啦，以后有时间了会自己整一个主题。&lt;/p&gt;
&lt;p&gt;有一个问题是比较讨厌的，不知道 Octopress 是否也一样，就是编译速度比较慢。静态博客是要把用标记语言书写的文章转换成 HTML 页面，用 Pelican 的时候，几十篇文章就需要几秒钟的时间才能编译完成，如果有上百篇文章，等待过程会让人焦虑的。目前即使只是一篇文章中改变了一个字，编译的时候也会重新编译所有的页面。这一点期待开发团队的改进吧。感觉一个可行的方案是生成一些中间文件，把每篇文章对应的 HTML 片段单独保存，如果文章内容和相关的参数都没变，这一部分就不用重新生成。最终的 HTML 页面，是把框架跟内容片段连在一起生成的，这个过程应该会很快。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="markdown-vs-restructuredtext"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Markdown vs. reStructuredText&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; 和 &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; 都是非常不错的标记语言，也是众多静态博客玩家首选的语言之一二。开始我一直准备用 Markdown，GitHub 对它的强力支持是很主要的原因。当然 Markdown 自身确实也有很多的优势，它非常的简洁，书写和阅读都非常舒服。我甚至已经把所有的文章都转成 Markdown 格式了，但最后还是转投 reStructuredText 的怀抱。&lt;/p&gt;
&lt;p&gt;Markdown 很简洁，如果是写文学的东西，用它最合适不过了。但它有点儿太简洁了，如果是写技术文章，它的处理能力就有点儿捉襟见肘了。比如没有原生的表格，没有数学公式的支持，段落嵌套很困难，虽然能直接嵌入 HTML 代码，但很难做到复杂的嵌套。&lt;/p&gt;
&lt;p&gt;reStructuredText 则要强大的多，也并没有失去太多的简便性。Python 的官方文档就是用它写出来的。很多技术博客或者技术书籍是用它写出来的。&lt;/p&gt;
&lt;p&gt;Markdown 的扩展性也让人难以忍受，它天生似乎就没打算让别人对它做太多的扩展。它没有一个约定俗成的扩展语法。在 Octopress 中广泛使用的是 Liquid-style Tags，大多数 Octopress 插件的语法都是基于这个的。我没有仔细研究过，看起来这个是从 Ruby 那里来的。当然在 Pelican 里面也有相应的 liquid tags 插件，但我实在不能忍受 liquid tag 常用的语法。以 Octopress 中 &lt;a class="reference external" href="http://octopress.org/docs/plugins/image-tag/"&gt;Image Tag&lt;/a&gt; 插件为例，它的语法是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% img [class names] /path/to/image [width] [height] [title text [alt text]] %}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果去看这个插件的源代码，可以发现它用正则表达式来解析这个语法，相关的代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;markup&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/(?&amp;lt;class&amp;gt;\S.*\s+)?(?&amp;lt;src&amp;gt;(?:https?:\/\/|\/|\S+\/)\S+)(?:\s+(?&amp;lt;width&amp;gt;\d+))?(?:\s+(?&amp;lt;height&amp;gt;\d+))?(?&amp;lt;title&amp;gt;\s+.+)?/i&lt;/span&gt;
  &lt;span class="vi"&gt;@img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vg"&gt;$~&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vg"&gt;$~&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="sr"&gt;/(?:"|')(?&amp;lt;title&amp;gt;[^"']+)?(?:"|')\s+(?:"|')(?&amp;lt;alt&amp;gt;[^"']+)?(?:"|')/&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="vi"&gt;@img&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;复杂的正则表达式隐含着太多未知的危机。可怕之处在于每个参数都不是命名的，依靠位置（或者顺序）来识别每个参数值的含义。但是绝大多数参数又都是可以省略的，这种情况下只能借助参数可能的内容格式来进行识别。如果参数个数比较多，参数值的格式要求比较松，那识别起来将会非常的麻烦。&lt;/p&gt;
&lt;p&gt;reStructuredText 没有这样的问题，它有明确的扩展方式，通过 role 和 directive，分别是行内和区块扩展。directive 的格式非常清晰，匿名或者是必备的参数、可选的命名的参数、内容段落等等。&lt;/p&gt;
&lt;p&gt;另外 reStructuredText 直接提供了众多的 role 和 directive，比如 LaTeX 公式，甚至可以直接通过选项来控制是否使用 MathJax 来渲染 LaTeX 公式。在改用 reStructuredText 后，发现之前启用的很多插件都没有必要了，reStructuredText 已经提供了支持。&lt;/p&gt;
&lt;p&gt;reStructuredText 的段落嵌套非常的强大，而 Markdown 似乎忘记了这一点。&lt;/p&gt;
&lt;p&gt;当然 Markdown 也有比 reStructuredText 强大的地方，最明显的就是 Markdown 行内格式的嵌套非常方便。用 &lt;tt class="docutils literal"&gt;***&lt;/tt&gt; 包围起来的文字会同时有粗体和斜体效果。reStructuredText 到目前还不太支持 role 的嵌套，想要做出同时粗体和斜体的文字，或者粗体的链接，都是比较困难或者麻烦的。还有其他一些小的细节，我就不具体说了。&lt;/p&gt;
&lt;p&gt;总的来说，Markdown 更简洁，更适合于书写纯文字的东西；reStructuredText 更强大，适合于书写复杂的技术文章。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;革命尚未成功&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;新版的博客已经上线了，但仍然有一些工作需要进行。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;MathJax 插件：reStructuredText 内置了对 LaTeX 公式的支持，行内公式用 &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/ref/rst/roles.html#math"&gt;math role&lt;/a&gt; 实现，区块公式用 &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/ref/rst/directives.html#math"&gt;math directive&lt;/a&gt; 实现，而且通过 &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/user/config.html#math-output"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--math-output&lt;/span&gt;&lt;/tt&gt; 配置&lt;/a&gt; 可以让它用 MathJax 进行渲染。但是 MathJax 是要在浏览器里执行 JavaScript 的，如果无法执行 JavaScript（比如在 RSS 中）就没法正常显示了。之前在 WordPress 中，利用插件先生成图片，如果无法执行 JavaScript 就会直接显示图片。所以这里也需要一个类似的插件，在编译的时候生成图片备用。&lt;/li&gt;
&lt;li&gt;Graphviz 插件：Pelican 中似乎没有直接能用的 graphviz directive，需要去找一个或者写一个插件。在编译的时候调用 dot 命令生成好图片就可以了。&lt;/li&gt;
&lt;li&gt;Chart 插件：有时候提供一些数据的展示，图表是非常必需的。之前都是先用 Excel 或这 Mathematica 之类的软件画好，再把图片放上去。如果有插件直接把数据通过 JavaScript 展示出来就更好了。准备写个插件，调用 &lt;a class="reference external" href="http://nvd3.org/"&gt;NVD3&lt;/a&gt; 进行绘图。&lt;/li&gt;
&lt;li&gt;Featured Image：WordPress 自带了这个，而且大多数主题都支持它，就是每篇文章有一张特色图片。这个需要去考察一下看看有没有现成的插件，当然主题也需要能够支持它。&lt;/li&gt;
&lt;li&gt;系列文章插件：系列文章是个很好的东西，把一系列非常相关的文章按照时间组织在一起。之前就一直在用，Pelican 倒是也有一个相关的插件，但还不完全是我想要的。等有空的时候再研究研究。&lt;/li&gt;
&lt;li&gt;主题：对 CSS 的把控力几乎为零，所以主题的制作还是很让人头疼的一件事情。我会继续寻找一个更好的主题，或者如果有精力，会考虑自己做一个主题。&lt;ul&gt;
&lt;li&gt;[2013-11-12] 现在改用 &lt;a class="reference external" href="http://oncrashreboot.com/elegant-best-pelican-theme-features"&gt;Elegant&lt;/a&gt; 主题，非常的清新，而且作者很活跃，一直在不断地完善该主题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="建站"></category><category term="Static Blog"></category><category term="Pelican"></category></entry><entry><title>Kindle 4 修砖记</title><link href="https://blog.gocalf.com/fix-bricked-kindle4" rel="alternate"></link><published>2013-07-29T10:13:00+08:00</published><updated>2013-07-29T10:13:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2013-07-29:/fix-bricked-kindle4</id><summary type="html">&lt;p class="first last"&gt;入手一年的 Kindle 4 突然变成砖头了，屏幕显示“Your Kindle Needs Repair”，花了大半个晚上的时间才修好它，简单记录一下。&lt;/p&gt;
</summary><content type="html">
&lt;p&gt;入手一年的 Kindle 4 突然不能用了，屏幕显示“Your Kindle Needs
Repair”，原来就是传说中的变成砖头了。&lt;/p&gt;
&lt;p&gt;花了大半个晚上的时间才修好它，简单记录一下。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;先说下机器的情况。这是美版的 Kindle 4 广告版，曾经装过多看，但早就删掉了，现在用的是原生系统，应该是 4.0.1 吧。&lt;/p&gt;
&lt;p&gt;之前都好好的，用多看系统的时候经常死机，后来回到原生系统就不再死机了。最近有一段时间没用，一直扔在抽屉里。那天想用的时候发现一点儿电都没有，于是开始充电。充电的时候手欠，按了电源键想开机，然后就这样了，重启了无数次都没有任何改变。&lt;/p&gt;
&lt;p&gt;搜了一下，好多修砖的攻略都说只适用于装了多看系统的 Kindle，实在没搞明白，想来老外应该不会都用多看吧，那他们怎么修呢？&lt;/p&gt;
&lt;p&gt;修砖需要用到的一些工具，我观察到的都是 Windows 程序，所以一切操作都在 Windows
7 的虚拟机中进行。如果是 Windows XP，可能在驱动方面会稍微麻烦一些。&lt;/p&gt;
&lt;div class="section" id="kindle"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;1. 让 Kindle 进入诊断模式&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;工具：Kindle Select Boot，我是在 &lt;a class="reference external" href="http://www.mobileread.com/forums/showthread.php?t=169645"&gt;这里&lt;/a&gt; 下载到的。&lt;/p&gt;
&lt;p&gt;用 USB 先把 Kindle 连接到电脑上（我用的虚拟机，所以还要把设备接到虚拟机里），一直按住 Kindle 底部的电源键，等指示灯熄灭后，不松开电源键按住方向键下（↓），然后松开电源键，再松开方向键。这使得 Kindle 进入了 USB 恢复模式。&lt;/p&gt;
&lt;p&gt;想要知道这个操作是否成功，可以在 Windows 系统的 Device
Manager（硬件管理器）里查看 Human Interface
Devices 下，是否出现了 HID-compliant device。如果还是 USB Human Interface
Device 就得再来一次了。&lt;/p&gt;
&lt;p&gt;运行 KindleSelectBoot 文件包中的 MfgTool.exe，在界面的上半部会看到一个 HID-compliant
device 的信息，在下半部的 Profile 那里选择 Kindle
diags（当时没截图，现在也懒得再折腾一次 Kindle 了）。点击右下角的 Start 按钮，就可以让 Kindle 进入诊断模式。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mmcblk0p1-img-kindle"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;2. 将 mmcblk0p1.img 拷贝到 Kindle 中&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;需要下载一个叫做 mmcblk0p1.img 的文件，其实我也不清楚这到底是什么，看起来是个镜像文件。我下载的是 &lt;a class="reference external" href="http://60.211.209.221/cdn.baidupcs.com/file/01589c0ba1f05e9e4f55e35d02ffc05b?xcode=053458c9324860ffda9317ddb745a10aa9749899cf109a05&amp;amp;fid=2601356780-250528-1879823735&amp;amp;time=1374668763&amp;amp;sign=FDTAXER-DCb740ccc5511e5e8fedcff06b081203-7N%2BEg07f9BuUIjG8wPMKIV8gURM%3D&amp;amp;to=cb&amp;amp;fm=N,B,T&amp;amp;expires=8h&amp;amp;rt=sh&amp;amp;r=586640283&amp;amp;logid=1498755034&amp;amp;sh=1&amp;amp;wsiphost=ipdbm"&gt;mmcblk0p1_410.img&lt;/a&gt;（点击下载），RAR 压缩包的大小是 144MB，解压后 358MB。&lt;/p&gt;
&lt;p&gt;在 Kindle 诊断模式菜单中选择“U) USB device
mode”，电脑就会将 Kindle 识别为 U 盘，将下载解压后的 .img 文件拷贝到 Kindle 根目录下。&lt;/p&gt;
&lt;p&gt;虽说整个修砖过程对 Kindle 内的电子书没有影响，我还是趁这个机会赶紧把数据备份了一下。&lt;/p&gt;
&lt;p&gt;拷贝完成后，在 Kindle 上按左方向键退出 U 盘模式，并返回主菜单。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ssh-kindle"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;3. SSH 登录到 Kindle&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在 SSH 登录之前，先要确认一下 Kindle 系统的版本和序列号（Serial
Number），以便获取 root 密码。系统版本我是没注意到，序列号在 Kindle 诊断模式主菜单第一项里就能找到。&lt;/p&gt;
&lt;p&gt;记下序列号后，在 Kindle 诊断模式菜单中依次选择：“N) Misc individual
diagnostics”、“U) Utilities”、“Z) Enable USBnet”，然后按方向键右键返回。&lt;/p&gt;
&lt;p&gt;在电脑的硬件管理器中可以看到有一个叫 RNDIS\Ethernet
card 的硬件，点击升级驱动，然后选择手动浏览驱动 -&amp;gt; 自选驱动 -&amp;gt; 网络适配器，在厂商中选择“Microsoft
Corporation”，驱动选择“Remote NDIS Compatible
Device”，强制安装驱动即可。（如果是 Windows XP，则需要下载安装 RNDIS
Ethernet 驱动，&lt;a class="reference external" href="http://b.billgong.com/wp-content/uploads/2012/03/RNDIS-Ethernet-Driver.zip"&gt;点此下载&lt;/a&gt;。）&lt;/p&gt;
&lt;p&gt;装好驱动，进入网络中心，看到有一块新的网卡设备。点击右键查看属性，在 IPv4 选项中，将 IP 地址设置为“192.168.15.200”，子网掩码是默认的“255.255.255.0”。&lt;/p&gt;
&lt;p&gt;用 SSH 客户端（我用的是 Putty）登录 Kindle，IP 地址为 192.168.15.244，用户名是 root。密码可以先试试“mario”（针对 4.0 系统），如果不行，就将序列号输入到下面的文本框中得到密码（针对 4.0.1 系统）（若无法显示请猛击 &lt;a class="reference external" href="https://blog.gocalf.com/assets/2013/07/kindle_root_password.html"&gt;这里&lt;/a&gt;）。&lt;/p&gt;
&lt;iframe frameborder="0" height="50" scrolling="no" src="https://blog.gocalf.com/assets/2013/07/kindle_root_password.html" width="100%"&gt;&lt;/iframe&gt;&lt;p&gt;其实 root 密码就是“fiona”加上序列号 MD5 值中的一部分。生成代码如下（Python
2.7.*）：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt;
&lt;span class="n"&gt;serial_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'USE YOUR OWN SERIAL NUMBER'&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'fiona&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;serial_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;4. 进行系统恢复&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;SSH 登录成功后，在终端中运行如下命令来恢复系统（大概需要几分钟的时间）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/mnt/us/mmcblk0p1_410.img &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/mmcblk0p1 &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4K
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;成功后，我又运行了另外几个命令以免还是不能重启，有的命令根本就没执行成功，可能要看具体的情况了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/mmcblk0p3 &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4K
rm /var/local/system/.framework_reboots
rm /var/local/system/.framework_retries
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;5. 完成&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这些都弄完了，长按电源键重启 Kindle，终于恢复了。&lt;/p&gt;
&lt;/div&gt;
</content><category term="数码电子"></category><category term="Kindle"></category></entry><entry><title>Excel 从右向左查找</title><link href="https://blog.gocalf.com/excel-find-from-right" rel="alternate"></link><published>2013-04-03T18:09:00+08:00</published><updated>2013-04-03T18:09:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2013-04-03:/excel-find-from-right</id><summary type="html">&lt;p class="first last"&gt;今天看一个小问题，是前几天遇到的，就是要在 Excel 里面实现从右向左查找。比如给定字符串“abc,defg,hi,jkl”，需要找到最右一个逗号的位置（即 12），或者最右一个逗号右边的部分（即“jkl”）。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;发现我已经有几乎整整一年没更新博客了。在 Google
Reader 都快要关闭的时代，个人博客还有多少存在的意义呢。&lt;/p&gt;
&lt;p&gt;今天看一个小问题，是前几天遇到的，就是要在 Excel 里面实现从右向左查找。比如给定字符串“abc,defg,hi,jkl”，需要找到最右一个逗号的位置（即 12），或者最右一个逗号右边的部分（即“jkl”）。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Excel 里面字符串查找用的 &lt;a class="reference external" href="http://office.microsoft.com/en-au/excel-help/find-findb-functions-HP010342526.aspx"&gt;FIND&lt;/a&gt; 函数，只能从左向右（可以指定起始位置）地进行字符串查找。如果想要找到最右边的待查字符串，就要稍微费点儿劲儿了。为了方便起见，下面称待查字符串为分隔符。&lt;/p&gt;
&lt;p&gt;如果分隔符的个数是已知且确定的（比如 IP 地址中的小数点），可以通过多个 FIND 函数嵌套来实现。但这个其实是&lt;strong&gt;从左到右查找第 n 个&lt;/strong&gt;。如果分隔符的个数不确定，这个方法就不太合适的。&lt;/p&gt;
&lt;p&gt;我的处理方法是这样的，假设单元格 A1 存放着包含分隔符的完整字符串（如上面提到的“abc,defg,hi,jkl”），那么查找最右一个逗号的公式为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;=FIND(CHAR(1),SUBSTITUTE(A1,&amp;quot;,&amp;quot;,CHAR(1),LEN(A1)-LEN(SUBSTITUTE(A1,&amp;quot;,&amp;quot;,&amp;quot;&amp;quot;))))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个公式的结果显然是 12。&lt;/p&gt;
&lt;p&gt;看起来很复杂，其实一步步拆解开并不是太难，基本的原理是这样的：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;SUBSTITUTE(A1,&amp;quot;,&amp;quot;,&amp;quot;&amp;quot;)&lt;/span&gt;&lt;/tt&gt;：把原字符串中的逗号全部删除（替换成空字符串），得到临时字符串 text1；&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;LEN(A1)-LEN(text1)&lt;/span&gt;&lt;/tt&gt;：用原字符串的长度减去 text1 的长度，即可知道原字符串中总共有多少个逗号，num2；&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;SUBSTITUTE(A1,&amp;quot;,&amp;quot;,CHAR(1),num2)&lt;/span&gt;&lt;/tt&gt;：利用 SUBSTITUE 函数，把原字符串中的最后一个逗号替换成特殊字符 CHAR(1)，得到临时字符串 text3；&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;FIND(CHAR(1),text3)&lt;/span&gt;&lt;/tt&gt;：在 text3 中查找特殊字符 CHAR(1)，其位置就是原字符串中最后一个逗号的位置 pos。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;真是一个奇妙的方法。&lt;/p&gt;
&lt;p&gt;找到位置后，要取出左边或者右边的内容就很简单了，公式分别是（用 pos 代替那个复杂的 FIND 函数）：&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;=LEFT(A1,pos-1)&lt;/span&gt;&lt;/tt&gt;，&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;=RIGHT(A1,LEN(A1)-pos)&lt;/span&gt;&lt;/tt&gt;。&lt;/p&gt;
&lt;p&gt;补充：&lt;/p&gt;
&lt;p&gt;上面那个公式只是适用于单个字符的查找，如果分隔符是多个字符，就需要稍微修改一下。假设单元格 B1 里面存放着分隔符本身，那么公式可以修改为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;=FIND(CHAR(1),SUBSTITUTE(A1,B1,CHAR(1),(LEN(A1)-LEN(SUBSTITUTE(A1,B1,&amp;quot;&amp;quot;)))/LEN(B1)))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;唯一的变化就是上述的第 2 步，原字符串的长度减去 text1 的长度后，要除以分隔符本身的长度，才是分隔符的个数。&lt;/p&gt;
&lt;p&gt;在这种情况下，取（最右分隔符）右边的子串的公式也要相应地修改为：&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;=RIGHT(A1,LEN(A1)+1-LEN(B1)-pos)&lt;/span&gt;&lt;/tt&gt;。&lt;/p&gt;
</content><category term="有用知识"></category><category term="Excel"></category></entry><entry><title>从大量整数中选取最小 / 大的若干个</title><link href="https://blog.gocalf.com/topn-of-massive-data" rel="alternate"></link><published>2012-04-17T15:09:00+08:00</published><updated>2012-04-17T15:09:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2012-04-17:/topn-of-massive-data</id><summary type="html">&lt;p class="first last"&gt;问题描述：现在有非常大量的一堆对象，比如有几十亿甚至上百亿个。对象本身是什么可以忽略，每个对象都有唯一标识符和一个正整数属性值，属性值范围有限（不大于一亿）。在单核机器上，内存和磁盘空间充足，用什么方法可以最快地输出属性值最小的若干（如一万）个对象，要求输出结果按照属性值排序。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;问题描述：现在有非常大量的一堆对象，比如有几十亿甚至上百亿个。对象本身是什么可以忽略，每个对象都有唯一标识符和一个正整数属性值，属性值范围有限（不大于一亿）。在单核机器上，内存和磁盘空间充足，用什么方法可以最快地输出属性值最小的若干（如一万）个对象，要求输出结果按照属性值排序。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;先说个题外话。前几天面试的时候，问了一个用栈模拟队列的题目，被 candidate 反问：这种问题在工作中会遇到么？有用么？&lt;/p&gt;
&lt;p&gt;这个问题其实很好，值得我仔细思考。大体上来讲，我在面试的时候可能会这么几类问题（聊项目经验之类的除外）：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;某个编程语言的基础知识，如果 candidate 自称熟悉某语言；&lt;/li&gt;
&lt;li&gt;常见的数据结构，用来大概了解 candidate 的基本功；&lt;/li&gt;
&lt;li&gt;基本的编程题目，考察他的写代码能力；&lt;/li&gt;
&lt;li&gt;数学或算法问题，一方面了解 candidate 的基本功，另一方面看看他的思维能力和解决问题的能力；&lt;/li&gt;
&lt;li&gt;一些从实际工作中抽象出来的，相对而言比较开放的题目，主要是看他分析问题和解决问题的能力。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;今天这个题目是我最近比较喜欢的一个问题，是曾经在工作中遇到过的。&lt;/p&gt;
&lt;p&gt;先来看看题目中出现的数字带来什么信息。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;对象的个数（设为 n），十亿甚至百亿：也就是 10^9 到 10^10 这样的量级，已经接近甚至超过 32 位整数的范围。即使每个对象只占用 1 字节，总共也需要 1G 到 10G 的空间。&lt;/li&gt;
&lt;li&gt;对象属性值的范围，正整数，一亿：相对于个数，属性值的范围还是相当有限的，最多有 100M 个各不相同的值，可以用 32 位整数表示。&lt;/li&gt;
&lt;li&gt;要求选取的对象个数（设为 m），一万左右：相对于个数来说是非常非常小的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可见，单单保存所有的属性值也需要 4G 到 40G 的空间。标识符最少也得用 64 位整数表示，又需要 8G 到 80G 的空间。&lt;/p&gt;
&lt;p&gt;在这种特殊的要求下，怎么处理是最高效的呢？来看看以下的几种方法。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;方法一：快速选择 / 线性选择算法&lt;/h2&gt;
&lt;p&gt;快速选择和线性选择算法都是平均时间复杂度 O(n) 的选择算法，当然线性选择算法在最坏情况下也能保证 O(n) 时间，缺点是实现起来比较复杂。简单起见，我就用快速选择算法。&lt;/p&gt;
&lt;p&gt;快速选择算法类似于快速排序，用一个轴值将数组分成两部分，一部分全都比轴值小，而另一部分全都比轴值大。然后看看两部分分别包含多少个元素，从而确定第 m 大的元素应该再哪一半，然后对那一半递归处理，直到找到第 m 大的元素。&lt;/p&gt;
&lt;p&gt;但是将快速选择算法应用到本题时，遇到主要问题是内存恐怕不够。&lt;/p&gt;
&lt;p&gt;如果在内存中放入所有的对象，我们需要 12G 到 120G 内存，取决于对象的个数是十亿还是一百亿。进入内存后，还需要至少两次遍历才可以找到第 m 大的元素。另外加载数据时需要有一次完整的文件遍历。&lt;/p&gt;
&lt;p&gt;如果内存中无法放入所有的对象，那就比较麻烦了，在头几次二分递归的时候可能需要动用硬盘来缓存数据，磁盘 IO 将成为可怕的瓶颈。累加起来相当于至少两次全文件的读遍历和写遍历。实际上，在确定了第 m 大的对象后，可能还需要遍历一次整个文件，找出比它小的对象。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;方法二：堆排序算法&lt;/h2&gt;
&lt;p&gt;堆排序也是一个很好的可以用于部分排序的算法，C++
STL 就用堆排序来实现 partial_sort。&lt;/p&gt;
&lt;p&gt;在内存中维护一个大小为 m 的最大值堆（没错，是最大值堆），遍历整个文件，每拿到一个对象，拿它与堆顶的属性值比较一下，如果新对象的属性值大就直接丢弃，否则用它取代堆顶元素。平均来讲，这样处理的时间复杂度是 n
* log m。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;方法三：哈希算法&lt;/h2&gt;
&lt;p&gt;我们注意到，虽然对象的个数非常大，但属性值的范围非常小（相对来讲）。如果在值域范围上建立一个哈希表，只需要 100M 个格子，如果一个格子存储一个 32 位整数，只需要 400M 内存。&lt;/p&gt;
&lt;p&gt;哈希表总是会有冲突的，在这个问题中，冲突是必然的，平均每个属性值上会有 10 到 100 个不同的对象。但处理冲突的办法非常简单，因为我们不需要在哈希表中记录每个对象，只需要记录这个属性值对应的对象的个数。&lt;/p&gt;
&lt;p&gt;开辟一个能存放 100M 个 32 位整数的数组（为保险起见，可以用 64 位整数，但总共也只需要 800M 内存），数组的下标对应于属性值（实际操作中可能要减一）。然后遍历整个文件，每拿到一个对象，将对应的数组元素值加一。&lt;/p&gt;
&lt;p&gt;文件遍历完后，过一下这个数组，可以找出第 m 大的对象的属性值，这个值就是一个边界。然后再遍历一次原始文件，把属性值小于等于边界的对象都放到内存中（注意在相等时，会有个数的限制）。最后把内存中的 m 个对象按照属性值排一下序再输出即可。&lt;/p&gt;
&lt;p&gt;这样最多只需要遍历两次文件，使用 O(n) 时间就可以完成题目的要求。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;到底哪个方法快？&lt;/h2&gt;
&lt;p&gt;上面提到了三种算法，到底哪一个最快呢？说说你的看法吧？&lt;/p&gt;
&lt;p&gt;我以前一直觉得哈希法是最快的，它对内存的需求量适中，算法是线性时间。但后来又仔细想了想，觉得不太对。这里实际上不完全是内存中的运算了，瓶颈主要是在磁盘 IO 上。&lt;/p&gt;
&lt;p&gt;让我们来比较一下三种算法：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;快速选择算法（所有对象可以全进内存）：只需要一次文件读遍历，内存操作是 O(n) 时间（系数至少为 2，可能会很大）。&lt;/li&gt;
&lt;li&gt;快速选择算法（只有部分对象可进内存）：平均需要三次文件读遍历，两次写遍历，内存操作是 O(n) 时间（系数至少为 2，可能会很大）。&lt;/li&gt;
&lt;li&gt;堆排序算法：需要一次文件读遍历，内存操作是 O(n * log
m) 时间，这里 m 取 10000 的话，大概是 13。当然实际数值会少于 13，因为并不是每个对象都需要进入堆中。&lt;/li&gt;
&lt;li&gt;哈希算法（所有对象可以全进内存）：需要一次文件读遍历，在内存中要开辟大小为 O(n) 和 O(m) 的两块缓冲区，内存操作时间为 O(n)（系数大约为 2）。&lt;/li&gt;
&lt;li&gt;哈希算法（只有部分对象可进内存）：需要两次文件读遍历，内存操作是 O(n) 时间（系数小于 2）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;题目的本意就是几乎不可能让所有对象都进入内存。虽然堆排序的内存操作时间复杂度偏高，却只需要一次磁盘遍历操作，其消耗的时间应该要小于哈希算法的。你是否同意呢？&lt;/p&gt;
&lt;p&gt;最近做了个实验，生成了十亿个对象，每个对象有一个 64 位整数作为标识符，还有一个不超过一亿的随机整数作为属性值。生成的文件用文本格式存储，占用 18G 磁盘空间。我没有实验快速选择算法，只是比较了堆排序和哈希。实验结果是：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;单纯遍历一次文件，包括逐行读取，把属性值解析成整数：耗时 34 分钟；&lt;/li&gt;
&lt;li&gt;堆排序算法：耗时 40 分钟；&lt;/li&gt;
&lt;li&gt;哈希算法：耗时 73 分钟。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这三个时间的相对值是否在你的预料之中呢？&lt;/p&gt;
&lt;p&gt;当然，如果把硬盘换成 SSD 恐怕结果又完全不同了，有兴趣的童鞋可以试一试。&lt;/p&gt;
&lt;/div&gt;
</content><category term="算法"></category><category term="Interview Question"></category><category term="Selection Algorithm"></category></entry><entry><title>程序基本功之遍历二叉树</title><link href="https://blog.gocalf.com/traversing-binary-tree" rel="alternate"></link><published>2012-04-04T16:51:00+08:00</published><updated>2012-04-04T16:51:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2012-04-04:/traversing-binary-tree</id><summary type="html">&lt;p class="first last"&gt;最近工作忙，没时间思考复杂的问题了。正好要招人就得有面试的嘛，自己也温习一下，要不然怎么去问别人。今天复习一下二叉树的遍历，前序（pre-order，NLR）、中序（in-order，LNR）、后序（post-order，LRN）、层序（level-order），用和不用递归。&lt;/p&gt;
</summary><content type="html">
&lt;p&gt;最近工作忙，没时间思考复杂的问题了。正好要招人就得有面试的嘛，自己也温习一下，要不然怎么去问别人。&lt;/p&gt;
&lt;p&gt;今天复习一下二叉树的遍历，前序（pre-order，NLR）、中序（in-order，LNR）、后序（post-order，LRN）、层序（level-order），用和不用递归。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;概念就不用多解释了，前、中、后是指根结点的访问时机，在左、右子树之前、中间、或之后。层序就是从根结点开始从上至下、从左到右地依次访问。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="bin-tree" src="https://blog.gocalf.com/images/2012/04/bin-tree.png"/&gt;
&lt;p class="caption"&gt;一棵二叉树&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;如上图所示的一棵二叉树，对应的遍历结果分别是：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;前序（NLR）：&lt;tt class="docutils literal"&gt;A B D C E G H F I&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;中序（LNR）：&lt;tt class="docutils literal"&gt;D B A G E H C F I&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;后序（LRN）：&lt;tt class="docutils literal"&gt;D B G H E I F C A&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;层序：&lt;tt class="docutils literal"&gt;A B C D E F G H I&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;一、用递归处理二叉树的前序、中序和后序遍历&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;递归真是一个迷人东西，它可以把复杂的逻辑变得异常简洁，这也是自然界的表现形式之一。基于递归的前、中、后序遍历二叉树的程序几乎完全相同，用两个递归调用分别处理左、右子树，剩下的事情就是打印根结点。为节省篇幅，直接把三个程序写在一起，用一个参数来控制是哪种遍历方式，也可以更方便地看出三者之间的区别。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;VisitTree_Recursive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'NLR'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;VisitTree_Recursive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'LNR'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;VisitTree_Recursive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'LRN'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;二、非递归的前序、中序遍历&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果不用递归呢？实际上我们要做的就是自己维护一个栈（数据结构）来保存需要但尚未来得及处理的数据。&lt;/p&gt;
&lt;p&gt;前序和中序都是非常简单的，当遇到一个非空的根结点时，打印其数据（如果是前序遍历），并将其压栈，然后递归地（这里用循环来模拟递归）处理其左子结点；当没有左子结点时，从栈中弹出之前遇到的某个根结点（它没有左子结点，或者左子结点已经处理完毕，需要再处理右子结点），打印数据（如果是中序遍历），然后继续处理右子结点。同样地，把两种遍历方式写在一起以便比较。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;VisitTree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'NLR'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'LNR'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;三、非递归的后序遍历&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;后序遍历要稍微复杂一点点，在前序和中序遍历的程序中，当我们准备进入根结点的右子树时，根结点就被扔出栈外了。但在后序遍历时，我们仍需保留它，直到右子树处理完毕。&lt;/p&gt;
&lt;p&gt;首先想到的改动就是在上面的程序的第 9 行到 11 行，不要从栈 s 中将根结点弹出，而是直接开始处理右子结点。但这就会带来一个问题：什么时候弹出根结点？实际上当左子树遍历完成、或者右子树遍历完成时，我们都会在栈里看到根结点，为了区分这两种状态，添加一个临时变量记录前一次访问的结点，如果前一个结点是根结点的右子树，就说明左右子树全都遍历完成了。非常简单。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;VisitTreeLRN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="n"&gt;pre&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;
      &lt;span class="n"&gt;pre&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;pre&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;四、非递归的层序遍历&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;层序遍历可以写成递归吗？还真没研究过。非递归的时候，层序遍历使用的是队列，而非栈。&lt;/p&gt;
&lt;p&gt;处理过程非常简明，遇到一个结点，打印信息，然后依次将左、右子结点加入队列等待后续处理。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;VisitTree_LevelOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
  &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;附录&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上面的 python 代码基于 v2.7。另外可以用下面这段代码来定义最简单的二叉树结点类，生成最上面图示的二叉树：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;

&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'H'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'I'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
</content><category term="算法"></category><category term="Interview Question"></category><category term="Data Structure"></category><category term="Binary Tree"></category></entry><entry><title>iOS 可拉伸的图片</title><link href="https://blog.gocalf.com/iphone-dev-resizable-image" rel="alternate"></link><published>2012-03-10T22:57:00+08:00</published><updated>2012-03-10T22:57:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2012-03-10:/iphone-dev-resizable-image</id><summary type="html">&lt;p class="first last"&gt;还记得在 Windows 下用 MFC 或 WTL 写用户界面程序的时候，为了给可改变大小的对话框加上背景图案，需要对设计师提供的图片进行裁剪。把图片切成九块，其中四个角是不拉伸的，四条棱边可以在一个方向上拉伸，中间区域则可任意拉伸。其过程是相当烦琐的。在 Mac 下，一切都变的及其简单，UIImage 类已经为我们提供了处理拉伸的方法。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;还记得在 Windows 下用 MFC 或 WTL 写用户界面程序的时候，为了给可改变大小的对话框加上背景图案，需要对设计师提供的图片进行裁剪。把图片切成九块，其中四个角是不拉伸的，四条棱边可以在一个方向上拉伸，中间区域则可任意拉伸。其过程是相当烦琐的。在 Mac 下，一切都变的及其简单，&lt;a class="reference external" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIImage_Class/"&gt;UIImage&lt;/a&gt; 类已经为我们提供了处理拉伸的方法。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;以下内容适用于 iOS 2.0+，或在 iOS 5.0 + 中使用替换的方法。&lt;/p&gt;
&lt;p&gt;UIImage 有一个叫做端帽（end
cap）的概念，利用它来指定图片中哪一部分（通常在图片的中央）是可以拉伸的，哪些部分（四周一圈）不可拉伸。在 iOS
5.0 以前，通过 &lt;a class="reference external" href="https://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIImage_Class/DeprecationAppendix/AppendixADeprecatedAPI.html#//apple_ref/occ/instm/UIImage/stretchableImageWithLeftCapWidth:topCapHeight:"&gt;stretchableImageWithLeftCapWidth:topCapHeight:&lt;/a&gt; 来得到可以按照指定方式拉伸的图片。特别要注意的一点，我在第一次用它的时候没有注意到，就是这个方法并不会改变当前的 UIImage 实例，而是会返回一个新的实例。这样的设计可能是为了让通过 imageNamed 方法得到的 UIImage 实例能够最大限度地复用吧。&lt;/p&gt;
&lt;p&gt;stretchableImage 方法有两个整数参数，分别用来指定图片的左边和上边分别有多少点（points）是不能被拉伸的（端帽宽度）。并没有参数用来指定右边和下边的端帽宽度，开始我&lt;strong&gt;误以为&lt;/strong&gt;右边和下边的端帽宽度就分别等于左边和上边的端帽宽度，然而仔细阅读官方文档之后发现并非如此：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The middle (stretchable) portion is assumed to be 1 pixel wide. The
right end cap is therefore computed by adding the size of the left
end cap and the middle portion together and then subtracting that
value from the width of the image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;rightCapWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leftCapWidth&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The middle (stretchable) portion is assumed to be 1 pixel wide. The
bottom end cap is therefore computed by adding the size of the top
end cap and the middle portion together and then subtracting that
value from the height of the image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bottomCapHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;topCapHeight&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;原来已经规定了中间可拉伸区域必须是 1x1 的，因此右边和下边的端帽宽度就由图片的宽度和高度、左边和上边的端帽宽度决定。在设计非对称图案时需要注意一下。&lt;/p&gt;
&lt;p&gt;从 iOS
5.0 开始，stretchableImage 方法被弃用，取而代之的是 &lt;a class="reference external" href="https://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIImage_Class/Reference/Reference.html#//apple_ref/occ/instm/UIImage/resizableImageWithCapInsets:"&gt;resizableImageWithCapInsets:&lt;/a&gt;。后者只需要一个 UIEdgeInsets 类型的参数，通过此参数，可以设置四个端帽的宽度。而中心剩余的部分都是可以拉伸的（不再局限于 1x1 大小）。&lt;/p&gt;
&lt;p&gt;下面这个程序片段给试图添加了三个 UIImageView，分别显示原始大小的图片、无端帽拉伸之后的图片、和指定了正确的端帽宽度（用 stretchableImage）后拉伸的图片。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;viewDidLoad&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;super&lt;/span&gt; &lt;span class="n"&gt;viewDidLoad&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="c1"&gt;// Do any additional setup after loading the view, typically from a nib.&lt;/span&gt;

  &lt;span class="bp"&gt;UIImage&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="nl"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;circle.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="hll"&gt;  &lt;span class="bp"&gt;UIImage&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;stretchableImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="nl"&gt;stretchableImageWithLeftCapWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;                                                         &lt;span class="nl"&gt;topCapHeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/span&gt;
  &lt;span class="bp"&gt;UIImageView&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;imageView1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[[&lt;/span&gt;&lt;span class="bp"&gt;UIImageView&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nl"&gt;initWithImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                             &lt;span class="n"&gt;autorelease&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="n"&gt;imageView1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGPointMake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="nl"&gt;addSubview&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;imageView1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="bp"&gt;UIImageView&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;imageView2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[[&lt;/span&gt;&lt;span class="bp"&gt;UIImageView&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nl"&gt;initWithImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                             &lt;span class="n"&gt;autorelease&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="n"&gt;imageView2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGRectMake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;260&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;imageView2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGPointMake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;160&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="nl"&gt;addSubview&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;imageView2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="bp"&gt;UIImageView&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;imageView3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[[&lt;/span&gt;&lt;span class="bp"&gt;UIImageView&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                              &lt;span class="nl"&gt;initWithImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;stretchableImage&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                             &lt;span class="n"&gt;autorelease&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="n"&gt;imageView3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGRectMake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;260&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;imageView3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGPointMake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;160&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;340&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="nl"&gt;addSubview&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;imageView3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;运行后效果如下图示：&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="resizable_image" src="https://blog.gocalf.com/images/2012/03/resizable_image.png" /&gt;
&lt;p class="caption"&gt;UIImage 拉伸示意（左上角：原始图片；上：直接拉伸；下：按照端帽拉伸）&lt;/p&gt;
&lt;/div&gt;
</content><category term="程序开发"></category><category term="iOS Develop"></category></entry><entry><title>解决黑苹果 Unable to Determine UUID 错误</title><link href="https://blog.gocalf.com/hackintosh-fix-uuid" rel="alternate"></link><published>2012-03-02T23:09:00+08:00</published><updated>2012-03-02T23:09:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2012-03-02:/hackintosh-fix-uuid</id><summary type="html">&lt;p class="first last"&gt;前几天在写 app 的最后阶段要进行本地化（localization），其中要做的一件事就是创建语言文件（Localizable.strings）。要在控制台运行 genstrings 命令来扫描源代码中 NSLocalizedString 宏所使用到的文字。由于使用的是黑苹果，在运行 genstrings 时遇到了“Unable to Determine UUID”的错误，解决方法倒也容易。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;前几天在写 app 的最后阶段要进行本地化（localization），其中要做的一件事就是创建语言文件（Localizable.strings）。要在控制台运行 genstrings 命令来扫描源代码中 NSLocalizedString 宏所使用到的文字。由于使用的是黑苹果（安装过程参见 &lt;a class="reference external" href="https://blog.gocalf.com/dell-e6400-install-mac"&gt;Dell E6400 安装 MacOS 雪豹 10.6&lt;/a&gt; 和 &lt;a class="reference external" href="https://blog.gocalf.com/dell-e6400-mac-10-6-8"&gt;Dell E6400 升级到 MacOS 10.6.8&lt;/a&gt;），在运行 genstrings 时遇到了“Unable
to Determine UUID”的错误，解决方法倒也容易。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;运行 genstrings 的语句是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;genstrings ./Classes/*.m
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到了这样的错误信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;genstrings[3851:10b] _CFGetHostUUIDString: unable to determine UUID for host. Error: 35
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;虽然想不通这么个小程序为什么需要 UUID，但解决方法是：进入目录 /Library/Preferences/SystemConfiguration，用 root 权限修改其中的 NetworkInterfaces.plist 文件，在控制台的操作命令为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /Library/Preferences/SystemConfiguration
sudo vi NetworkInterfaces.plist
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;给这个文件中添加一个 IEEE80211 相关的 dict（原本会有其他一些 dict，不用管它们），内容如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;BSD Name&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;en3&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;IOBuiltin&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;false/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;IOInterfaceType&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;6&lt;span class="nt"&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;IOInterfaceUnit&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;IOLocation&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;IOMACAddress&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;data&amp;gt;&lt;/span&gt;ABbPoF5V&lt;span class="nt"&gt;&amp;lt;/data&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;IOPathMatch&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;IOService:/AppleACPIPlatformExpert/PCI0@0/AppleACPIPCI/P0P3@1C,2/IOPCI2PCIBridge/pci14e4,4311@0/AirPort_Brcm43xx/IO80211Interface&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;SCNetworkInterfaceType&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;IEEE80211&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;添加好后保存此文件，然后重启系统。问题就解决了。&lt;/p&gt;
</content><category term="操作系统"></category><category term="Hackintosh"></category></entry><entry><title>最经典的光线反射游戏 Chromatron</title><link href="https://blog.gocalf.com/chromatron" rel="alternate"></link><published>2012-02-11T00:14:00+08:00</published><updated>2012-12-04T16:51:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2012-02-11:/chromatron</id><summary type="html">&lt;p class="first last"&gt;Chromatron，翻译过来是彩色显像管。顾名思义，这个游戏是关于光线反射的。在网络中还流传着很多这个游戏的 Flash 版，都是山寨的，抄袭了这个游戏的关卡和操作方式。这是个相当古老的游戏了，好多年前就玩了它的第一代和第二代，后来又陆续玩了第三代和第四代。第三代有几关是前些日子才玩出来的，整理一下留作纪念。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Chromatron，翻译过来是彩色显像管。顾名思义，这个游戏是关于光线反射的。在网络中还流传着很多这个游戏的 Flash 版，都是山寨的，抄袭了这个游戏的关卡和操作方式。&lt;/p&gt;
&lt;p&gt;这是个相当古老的游戏了，好多年前就玩了它的第一代和第二代，后来又陆续玩了第三代和第四代。第三代有几关是前些日子才玩出来的，整理一下留作纪念。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;游戏的官方网站是：&lt;a class="reference external" href="http://silverspaceship.com/chromatron/"&gt;http://silverspaceship.com/chromatron/&lt;/a&gt;，可以下载到 Chromatron 第一代到第四代的最新版本，Windows 系统和 Mac
OS 都支持哦。&lt;/p&gt;
&lt;p&gt;我这里也提供 Windows 版的下载：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2012/02/chromatron1_v1.14.zip"&gt;Chromatron 1 代 v1.14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2012/02/chromatron2_v1.5.zip"&gt;Chromatron 2 代 v1.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2012/02/chromatron3_v1.1.zip"&gt;Chromatron 3 代 v1.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2012/02/chromatron4_v1.0.zip"&gt;Chromatron 4 代 v1.0&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个游戏中除了反射镜、三棱镜等传统光学元件外，还有一些现实中不一定存在的非常神奇的元件，比如多普勒仪（Doppler），如果红色光线从一端射入，另一端就会射出绿色光线，类似地，绿色光线会变成蓝色，而蓝色会变成红色。如果反过来使用，颜色的变化也反之。再比如量子纠缠分光器（Quantum
Tangler），它将输入的光线变成两条向相反方向射出的光线，并且这两条光线是量子纠缠的，其中一条光线被多普勒仪改变颜色时，另外那条光线就会变为相反的颜色。又如可移动的光线传送器（Mobile
Teleporter），成对使用时，可以将其中一个接收到的光线传送到另一个。还有逻辑门（Logic
Gate）、互补器（Complementor）等等。所有的元件如下图示。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="chromatron_elems" src="https://blog.gocalf.com/images/2012/02/chromatron_elems.png" /&gt;
&lt;p class="caption"&gt;Chromatron 中的各种光学元件&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;别的关卡都可以不谈，但有一关是一定要说一下的，这一关太有趣了。虽然它也有传统的解法，但其中有一种解法却非常神奇。见下图：&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="chromatron_2_49" src="https://blog.gocalf.com/images/2012/02/chromatron_2_49.png" /&gt;
&lt;p class="caption"&gt;Chromatron 2 代 49 关：反馈消除&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;注意到那几个没有光线经过的反射镜了吗？看起来它们摆在那儿是多余的，但一旦移动它们，你就输了。游戏中对这一关的说明是：&lt;/p&gt;
&lt;blockquote&gt;
If the complementor is presented with a logical impossibility, it
shuts down in all directions.&lt;/blockquote&gt;
&lt;p&gt;想亲自尝试一下？赶紧通过上面的链接下载下来玩吧。&lt;/p&gt;
&lt;p&gt;最后放上我的各关解法，需要的可以参考之。用的时候，找到你要解决的关卡（比如 3 代第 9 关），复制对应的解法代码（如 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;3-09-nIIAnqNtOvNPtNsJOx&lt;/span&gt;&lt;/tt&gt;），注意复制的时候要包括开头的 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;3-09-&lt;/span&gt;&lt;/tt&gt;，而代码首尾都不要包含任何其他字符（如空格、回车等）。在游戏中进入此关卡，按 Ctrl-V 即可。如果你要向别人分享你的解法，就可以在游戏中进入关卡，按 Ctrl-C，然后在任何文本编辑器中按 Ctrl-V 粘贴。&lt;/p&gt;
&lt;!-- limit every code block to at most 15 lines --&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Chromatron 1 代 v1.14&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1-01-hI
1-02-hXioDr
1-03-nJtNcl
1-04-rODFCJ
1-05-ibOmsU
1-06-hvhThWhs
1-07-ortYCq
1-08-iUczmB
1-09-HHmrpfHjyZmP
1-10-ilCSNZbNCAbWIZOADOaDcxyTiDtKoqjjzKuBpk
1-11-oEcQOyyq
1-12-DathEiOn
1-13-JpNKxtbLHniczJJDyx
1-14-sasWOjsRIkdcbG
1-15-HWoItJhNHAcgJCIthCsB
1-16-ntbgIJINrisKnxNjnbcM
1-17-JfIvCKmTchcNINNKsCEhioOB
1-18-NjcAtyiFCddq
1-19-CZOOrZ
1-20-dmClHANHySoeawIg
1-21-ObsunsMFxA
1-22-caiVoeaOKeFpbKDebE
1-23-cnHFIjynclHbcpoDypnZphOyOi
1-24-bJNtmNHrOyCouoPumRrK
1-25-hBDIoWdKoeHOQKEP
1-26-hZDPcznv
1-27-MHjPuzGUAcIVph
1-28-uKjOMVQrzPaxavco
1-29-mUbqlGoAyYyUImocxicl
1-30-onJDnZHbye
1-31-bZHrovbphiNg
1-32-BMjktMJdzzCsOS
1-33-OBDzOnsYsHOEysevDknZtNiRLodrikeG
1-34-cpbfCqOBgz
1-35-azBKzwCWaqIIDCiSFuAnHl
1-36-Fpcnyajzgz
1-37-xlhKdbDA
1-38-hZsKPYOEtVDLNywTMADx
1-39-hxEbOVuljjNjoSCbDNfVxggVxKosnIPjczxryFgO
1-40-ernOODhZ
1-41-IDtyxV
1-42-tHBTgBOBiNjQiLFpgxOv
1-43-HboDmHGXxJdhoHwBOe
1-44-gMgqCeOMDMtYulMVdCyT
1-45-EwbauFwHilxwhgdepkdaNd
1-46-hNCIbwNzIRHTnytMjQhu
1-47-coBvxonWDnbUfVaoOLaSuzKuFpympo
1-48-sUjtcnzJuEsYNY
1-49-DwMGMKrsgEBHhNtGdtdnng
1-50-CbNiHScQhwxKoEzwDVCZhTwJxM
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Chromatron 2 代 v1.5&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2-01-BRgqgZhjqZ
2-02-mDGXzupcMGJagFoXNowP
2-03-coOEOBOy
2-04-OIBOixHtovzwIjqTJnFd
2-05-NYCrtYIJnrxw
2-06-tGiPDLccFMes
2-07-hLIyng
2-08-hLIyni
2-09-hxCbMFFMtIBMhs
2-10-QurbNejIBwuxwm
2-11-MRxubKyCirupoUHo
2-12-DAyiOD
2-13-izoVhgCUNgyKHTDOuCbD
2-14-cnoDMP
2-15-MAOCimBv
2-16-NUrUopHNDOgOOezxoP
2-17-bZCGxNxUgiINLl
2-18-hLHUIjci
2-19-oRynHThKOmyTPG
2-20-nwrMySNXbuOl
2-21-hbhfifirjrfP
2-22-cmhCHUxIpiootwHHjQIIgSMNjvihsP
2-23-tJjcIwygDBsBhH
2-24-CGimHIxONJ
2-25-skMzBEMHwPgycXBwhzPkEpOlIOEtzRjzpe
2-26-twPYiBnmHGzvMGnh
2-27-tvNLCHoGxkye
2-28-sDytMHwluzGVebpnHhgcpbbRFi
2-29-clckDDcj
2-30-nkgDIgbpmqDzclaXJRcYPuocdtdU
2-31-sJxihFELtJNxiTfV
2-32-wRHnNNjliUsEIhnbdxNU
2-33-szsNtgFMbEIcHCmMJo
2-34-jPMNBKuEilIGIcJOKslCnoyG
2-35-oQNcxvcCyCMRoUHk
2-36-yEMFCUpiBvjObEQrcouLxUKQ
2-37-yUbuomwCcCGYhHhv
2-38-OCBzMBBHeruLCuNAmqsCMvesiBtGjDzYolwIikaoJS
2-39-eserbLCSbCIybT
2-40-hxsTnaNdOnDD
2-41-tsMUIcIeNMNOcMHktCoeEKdGukumoY
2-42-sZDkiOMUtfzhJFIocw
2-43-cwwAaIHLbhxIxRGWdxKBpluGdUty
2-44-HWNNIdNxIINUIwersRnbyhhNntDxImsp
2-45-NxiEOnDhtvCozvKfjgziICJgFM
2-46-rXtwAngxbagKbCCyHT
2-47-hsuHDhyGETNXbS
2-48-hIwQHFerNyjjzwCvIzdBdExaJLpvHV
2-49-yDaCritKcoHrusoqKzjzhCJc
2-50-OtMzBDBwNdCsNurGuGjHtvjJQKPYubIIochxDhNLsPcCCbym
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Chromatron 3 代 v1.1&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;3-01-oCcmcO
3-02-JeHgwAgrMvETdMuBuL
3-03-gOCggnjMBFOSyZdJCGsU
3-04-omoZINqLBA
3-05-bWhYuOsUyGnKOANZ
3-06-oSgPOEHqyUiDbsCH
3-07-HTxZclzhontQHP
3-08-IyDlnJcAnMIwsRcjyreAeB
3-09-nIIAnqNtOvNPtNsJOx
3-10-ynHFHJxfbvHBcDnVnZuG
3-11-ILnubXIOnxOIsHDyOzsEOCtG
3-12-NtaShFCqMFaQIwtjjijP
3-13-NLCWhNergM
3-14-ORbesbzmHFDRmEHIhMoEoG
3-15-yeMvcoxeImmMoSPQyEjPtRNrgfhF
3-16-sFMVrrgzCTNXBLhJEfiruljr
3-17-DwhODD
3-18-xDMTBNjxunbBbfCqxZhMMPPJiLNxPNrxjtCrsF
3-19-ikgShbhJjqjjjDiWhzlYntiE
3-20-ulhNDxoSMP
3-21-yWIQnAuGITEZjfnljJca
3-22-DCsUhIOmDD
3-23-tINyjioIzwaQHAng
3-24-OeHsHWburUBGxMbYniyIoajMbI
3-25-sBNrCwNzOvhIsLtHiNduCr
3-26-sFBLCbNjxXphHbtXjluljycp
3-27-bvnZHqHtxYeroPyRMwsLwPBZIOKxjdGWhu
3-28-HGbYOdhNMNxtDliHoQs
3-29-CpMRpcbgsznxaiBw
3-30-szMJCJNJbKIJiABKtwnyneDSxQJdtchrcv
3-31-teCGNPDEOGCbistNiUtYjf
3-32-bKHswSoQHocSihoUyCbAIs
3-33-CdNhtZphHbjhyDCUcpOE
3-34-DJpidIxOhBOCirOVhXtosXIdsCaOCdDR
3-35-NxtdoWHOFe
3-36-wAGWIMNZnZHNJfNlniovtVoGjz
3-37-erjtMVupirPdtdBLyrssPjshtfCXMRrXNRqTNXPf
3-38-DPaOCWbHCdcAtKiSdq
3-39-OwDHrXbVyHiqMUGXtIplxB
3-40-ewtOrqCZOaDwMTOyDEhLBQidtuizsXPQtZjeeuNp
3-41-MRBNBxjGNHuBuvPjCWnwyCbREybLrJhDxO
3-42-KRwlHrwPaVxbxtGXbBbLydGVctJDyRdxoFcpebpfpjplpn
3-43-mqciyuKuoDNf
3-44-tGBKiWuAhNMPCbtXurjzDxMV
3-45-DNcaulxjNOhvtkpgtaiscEHICTMzoUBx
3-46-PyBKaCbfDhbZMzoCzBjkuzzZjO
3-47-sJspinOzHTbXtjNuckEw
3-48-uECVirMYMDMWNyCDNKMKNiCtMxOdtsiFtKiRtYjiukjAtejL
3-49-BPMTIeIkxIoWnGtwiEdisD
3-50-OnNlCrNyCICbioCWtYDnjijWiUtwtIiChgNKCNixtiesEiey
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Chromatron 4 代 v1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;4-01-OqHQhHOi
4-02-OHDxoYCboSHbci
4-03-tZGYsVyb
4-04-wSHIbeHCxA
4-05-xZcDjwuGPYiSaL
4-06-xlEUbLcoHqFjQtmD
4-07-JGIyOmDSCKtyjeNe
4-08-EECqbeaPiTzvjiCb
4-09-NLOGsA
4-10-DzuKhWGUzYuCHwoNjP
4-11-bzqNaAHNBvxZcttfjQ
4-12-iTzizm
4-13-omxIgMjNMNrfCFPf
4-14-EuMHNaCygGhGBBPAtQiVtYjc
4-15-cAtXGWgxcwOnyY
4-16-CgiRaQFpINaPHH
4-17-MxHetHAniWJlgVsnImzKjsAgOX
4-18-tZycopjhbhCudEKz
4-19-DzdqhLwWckcicg
4-20-MwCSMEEqhSsNrxHebKBwsJjAzTdhcXzbbAbebIaH
4-21-cgaBNbbebmNOaqJCcOPUdHdOea
4-22-xibtDkssqFIj
4-23-CDugPmMLclcf
4-24-EmCjaSxIuBBZhzaIpmcMbQOp
4-25-jPiRsFDUtGPmJFuEichGumJzHPHF
4-26-hENUIMCUttOsnwsXnztaIOJd
4-27-CJCcrtyTHqgRbgoRpcaP
4-28-tiBLaDHTamySiGjjjQ
4-29-BRNK
4-30-rUrPPtCf
4-31-COjlMyNPHPHFMGmVmPsqirJoOROUuBtOtRudCwJWNc
4-32-HFmkbHHcddyVoDhzxL
4-33-iWtGHZuIbLHyssjNGXNvtfKIoNbHdsbGdncMer
4-34-jwcluoCDDA
4-35-GZwQwRGYbHcSoGoHmE
4-36-QLxlCWbEyqovMWzjQKiStwKkcx
4-37-hyNkbuniDkCduKMB
4-38-IjOxsGnWjIBz
4-39-MLHqxwcEiVqMyEcQEntLtjurer
4-40-ndbvng
4-41-DjMwnfNFnXjDnZHtNEJBtglNsm
4-42-bWeserNKtghqCeinhMIKJeJGNFbagp
4-43-NyCsxMBPbWiopmEhgz
4-44-BymdtBjMyHFcNp
4-45-iobIyECWIMchiihg
4-46-uDCotJaOCbHnGVHmbdiWzvjltHjP
4-47-tQNwxXiWCvwXcdci
4-48-nLMVriNgCtIkIRcCBKcTyUtYjgjkoSjG
4-49-BEssOXjClPmBCjsjJlMzhzENiVdEoRDVeser
4-50-BCMCcCHODwNHNOuaFpGZjhnGEbIRrKzadshHsHne
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果没玩过这个游戏，那就赶快开始吧！&lt;/p&gt;
</content><category term="游戏"></category><category term="Puzzle"></category></entry><entry><title>iOS 自定义范围滑动条控件</title><link href="https://blog.gocalf.com/iphone-dev-range-slider" rel="alternate"></link><published>2012-02-03T21:19:00+08:00</published><updated>2012-12-04T16:58:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2012-02-03:/iphone-dev-range-slider</id><summary type="html">&lt;p class="first last"&gt;前些日子写 app 的时候遇到一个需求，希望有一个类似于 UISlider 的东西，但能够选取一个范围，也就是所谓的 Range Slider。在网上也能找到很多相关的代码，不过本着学习的态度，还是自己琢磨了一下，就当是为以后写复杂控件做的练习吧。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;前些日子写 app 的时候遇到一个需求，希望有一个类似于 &lt;a class="reference external" href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UISlider_Class/Reference/Reference.html"&gt;UISlider&lt;/a&gt; 的东西，但能够选取一个范围，也就是所谓的 Range
Slider。在网上也能找到很多相关的代码，不过本着学习的态度，还是自己琢磨了一下。&lt;/p&gt;
&lt;p&gt;就当是为以后写复杂控件做的练习吧。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;以下内容适用于 iOS 2.0+。&lt;/p&gt;
&lt;p&gt;需求决定一切，在介绍我的这个 Range
Slider 之前，先把我的需求（或者说我这个 Range
Slider 的功能）介绍一下。它最多只算是个 toy，还有很多需要完善的地方。不过聊胜于无，以后继续努力呗。&lt;/p&gt;
&lt;p&gt;这是一个水平方向的（浮点）数值范围选择器：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;可以为它设置数值的最小值（minimumValue）和最大值（maximumValue），分别对应于滑动条最左端和最右端的数值。&lt;/li&gt;
&lt;li&gt;可以设置范围的最小值（minimumSpan）和最大值（maximumSpan），因为我可能会要求选择的数值区间长度不太短或不太长。&lt;/li&gt;
&lt;li&gt;可以获取或设置当前选择的数值范围（smallValue 和 largeValue），对应于界面上左右两个滑块的位置。&lt;/li&gt;
&lt;li&gt;左右两个滑块都可以相互独立地左右滑动；一个滑块滑动时，另一个滑块会根据需要自动调整。比如当向左滑动左边的滑块时，如果选取的范围已经达到范围最大值（maximumSpan），右边的滑块就会跟着向左滑动。反之亦然。&lt;/li&gt;
&lt;li&gt;两个滑块中间的条块也是可以滑动的，移动它的时候，两个滑块会一起左右移动（不改变选取范围的长度）。&lt;/li&gt;
&lt;li&gt;当滑块或者滑条移动时，此控件的 UIControlEventValueChanged 事件会被触发。&lt;/li&gt;
&lt;li&gt;可以用程序修改当前的选择范围，UI 会跟着调整，但不会触发上述事件，以免在某些情况下陷入死循环。&lt;/li&gt;
&lt;li&gt;以左滑块为例，当它滑动到最左边后，如果手指继续做向左滑动的动作，当前选择的范围不会变化，但会通过另一个量（offsetTrend）来表达这种趋势。在某些情况下，应用程序可能会需要得到这样的信息，以便当用户在 slider 边缘继续往外滑动时，进行一些特殊的处理。右滑块和滑条都有同样的功能。&lt;/li&gt;
&lt;li&gt;可以为这个控件设置委托（delegate），当滑块或者滑条将要开始滑动、或者滑动结束的时候，委托的对象都会收到相应的消息。当然，会有一个只读的量（isDragging）用来查询是否有滑块或者滑条在滑动中。&lt;/li&gt;
&lt;li&gt;slider 的背景条、滑块、滑条的图案都可以被替换。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我的这个 Range Slider 暂&lt;strong&gt;不支持&lt;/strong&gt;的功能包括但不限于：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;不支持纵向的滑动模式（或许可以直接利用旋转整个控件达到此目的）。&lt;/li&gt;
&lt;li&gt;没有为自定义 UI 样式提供足够的接口。虽然背景和滑块的图片都能替换，但并不支持为每一个对象实例单独替换图片。比起 SDK 中的 UISlider，这方面的功能是相当薄弱的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;说了这么多，来看看它的样子吧。外表很简单，我用的背景、滑块和滑条图片都跟 UISlider 是一样的：&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="range_slider" src="https://blog.gocalf.com/images/2012/02/range_slider.png" /&gt;
&lt;p class="caption"&gt;我的 Range Slider&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;实现起来蛮简单的，因为 SDK 已经提供了足够的支持。我的这个类就叫做 RangeSlider，继承自 &lt;a class="reference external" href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UIControl_Class/Reference/Reference.html#//apple_ref/occ/cl/UIControl"&gt;UIControl&lt;/a&gt; 类。另外我还定义了它的委托类，叫做 RangeSliderDelegate。二者的接口如下：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;RangeSlider&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;@protocol&lt;/span&gt; &lt;span class="nc"&gt;RangeSliderDelegate&lt;/span&gt;;

&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;RangeSlider&lt;/span&gt; : &lt;span class="bp"&gt;UIControl&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;@private&lt;/span&gt;
    &lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RangeSliderDelegate&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;delegate_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;minimumValue_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;maximumValue_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;minimumSpan_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;maximumSpan_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;smallValue_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;largeValue_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;offsetTrend_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;insetWidthLeft_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rangeWidth_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="bp"&gt;UIImageView&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;selectionView_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="bp"&gt;UIImageView&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;smallHandle_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="bp"&gt;UIImageView&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;largeHandle_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;BOOL&lt;/span&gt; &lt;span class="n"&gt;isTrackingSmallHandle_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;BOOL&lt;/span&gt; &lt;span class="n"&gt;isTrackingLargeHandle_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;BOOL&lt;/span&gt; &lt;span class="n"&gt;isTrackingSelection_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;BOOL&lt;/span&gt; &lt;span class="n"&gt;isDragging_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// The delegate object.&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RangeSliderDelegate&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// The minimum value of the slider.&lt;/span&gt;
&lt;span class="c1"&gt;// The default value is 0.0.&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;minimumValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// The maximum value of the slider.&lt;/span&gt;
&lt;span class="c1"&gt;// The default value is 1.0.&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;maximumValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// The minimum span of the selected range.&lt;/span&gt;
&lt;span class="c1"&gt;// The default value is 0.1.&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;minimumSpan&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// The maximum span of the selected range.&lt;/span&gt;
&lt;span class="c1"&gt;// The default value is 1.0.&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;maximumSpan&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// The lower bound of the selected range.&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;setter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nl"&gt;setSmallValue&lt;/span&gt;&lt;span class="p"&gt;:)&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;smallValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// The higher bound of the selected range.&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;setter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nl"&gt;setLargeValue&lt;/span&gt;&lt;span class="p"&gt;:)&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;largeValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// A Boolean value that indicates whether the user has begun dragging.&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;BOOL&lt;/span&gt; &lt;span class="n"&gt;isDragging&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Initialization with frame, also specify the inset of left and right edge.&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;initWithFrame:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;CGRect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;frame&lt;/span&gt; &lt;span class="nf"&gt;insetLeft:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;insetLeft&lt;/span&gt; &lt;span class="nf"&gt;insetRight:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;insetRight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Move the current selection.&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;moveSelection:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Gets offset trend, it will be reset to 0 after call finished.&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;getAndResetOffsetTrend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Converts slider value to x coor.&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;xForValue:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Converts x coor to slider value.&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;valueForX:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;ul class="simple"&gt;
&lt;li&gt;RangeSliderDelegate&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@protocol&lt;/span&gt; &lt;span class="nc"&gt;RangeSliderDelegate&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="bp"&gt;NSObject&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;@optional&lt;/span&gt;

&lt;span class="c1"&gt;// Tells the delegate when the slider is about to start dragging.&lt;/span&gt;
&lt;span class="c1"&gt;// The delegate might not receive this message until dragging has occurred over a small distance.&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nl"&gt;rangeSliderWillBeginDragging&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;RangeSlider&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;rangeSlider&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Tells the delegate when dragging ended in the range slider.&lt;/span&gt;
&lt;span class="c1"&gt;// This message is sent when the user&amp;#39;s finger touches up after dragging.&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;rangeSliderDidEndDragging:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RangeSlider&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;rangeSlider&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;接口中的大部分内容都在需求和功能介绍部分见过了。另外有两个方法，xForValue 和 valueForX，它们用来在 Range
Slider 内部的坐标值和用户数值之间做转换，内容如下（这里的 insetWidth 是在 UI 上做的小伎俩，主要是为了保证滑块滑到最两端时也能有充足的空间来接受用户的点击）：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;xForValue:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;insetWidthLeft_&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rangeWidth_&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;minimumValue_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maximumValue_&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;minimumValue_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;valueForX:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;minimumValue_&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;insetWidthLeft_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maximumValue_&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;minimumValue_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;rangeWidth_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;我就不贴完整的 .m 源文件了，只是逐个介绍一下重要的方法。&lt;/p&gt;
&lt;p&gt;首先看初始化方法 initWithFrame，和更新显示的方法 updateSelectionView。这个没啥好说的，就是初始化成员变量，创建好相关的图片：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;initWithFrame&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;initWithFrame:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;CGRect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;frame&lt;/span&gt; &lt;span class="nf"&gt;insetLeft:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;insetLeft&lt;/span&gt; &lt;span class="nf"&gt;insetRight:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;insetRight&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;super&lt;/span&gt; &lt;span class="nl"&gt;initWithFrame&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Set the initial state.&lt;/span&gt;
        &lt;span class="n"&gt;minimumValue_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;maximumValue_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;minimumSpan_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.1f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;maximumSpan_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.7f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;smallValue_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minimumValue_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;largeValue_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minimumValue_&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;maximumSpan_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;offsetTrend_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;insetWidthLeft_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;insetLeft&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;rangeWidth_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;insetLeft&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;insetRight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;isTrackingSmallHandle_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;isTrackingLargeHandle_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;isTrackingSelection_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;isDragging_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;centerY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Background image.&lt;/span&gt;
        &lt;span class="bp"&gt;UIImageView&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[[&lt;/span&gt;&lt;span class="bp"&gt;UIImageView&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nl"&gt;initWithImage&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="nl"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;rangeslider-bg.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
                                  &lt;span class="n"&gt;autorelease&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGRectMake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;insetWidthLeft_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rangeWidth_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGPointMake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;centerY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;addSubview&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;// Selection image.&lt;/span&gt;
        &lt;span class="n"&gt;selectionView_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[[&lt;/span&gt;&lt;span class="bp"&gt;UIImageView&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nl"&gt;initWithImage&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="nl"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;rangeslider-select.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                                            &lt;span class="nl"&gt;highlightedImage&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="nl"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;rangeslider-select-hover.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
                          &lt;span class="n"&gt;autorelease&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;selectionView_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGPointMake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;centerY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;addSubview&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;selectionView_&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;// Left handle for small value selection.&lt;/span&gt;
        &lt;span class="n"&gt;smallHandle_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[[&lt;/span&gt;&lt;span class="bp"&gt;UIImageView&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nl"&gt;initWithImage&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="nl"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;rangeslider-handle.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                                          &lt;span class="nl"&gt;highlightedImage&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="nl"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;rangeslider-handle-hover.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
                        &lt;span class="n"&gt;autorelease&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;smallHandle_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGPointMake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;centerY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;addSubview&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;smallHandle_&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;// Right handle for small value selection.&lt;/span&gt;
        &lt;span class="n"&gt;largeHandle_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[[&lt;/span&gt;&lt;span class="bp"&gt;UIImageView&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nl"&gt;initWithImage&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="nl"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;rangeslider-handle.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                                          &lt;span class="nl"&gt;highlightedImage&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="nl"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;rangeslider-handle-hover.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
                        &lt;span class="n"&gt;autorelease&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;largeHandle_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGPointMake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;centerY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;addSubview&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;largeHandle_&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="n"&gt;updateSelectionView&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;ul class="simple"&gt;
&lt;li&gt;updateSelectionView&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;updateSelectionView&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;smallHandle_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGPointMake&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;xForValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;smallValue_&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;smallHandle_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;largeHandle_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGPointMake&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;xForValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;largeValue_&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;largeHandle_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;selectionView_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGRectMake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smallHandle_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                      &lt;span class="n"&gt;selectionView_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                      &lt;span class="n"&gt;largeHandle_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;smallHandle_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                      &lt;span class="n"&gt;selectionView_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;接下来看最重要的部分，就是处理触摸事件的方法。这些方法继承自基类 UIControl，分别是 &lt;a class="reference external" href="http://developer.apple.com/library/ios/documentation/uikit/reference/UIControl_Class/Reference/Reference.html#//apple_ref/occ/instm/UIControl/beginTrackingWithTouch:withEvent:"&gt;beginTrackingWithTouch:withEvent:&lt;/a&gt;，&lt;a class="reference external" href="http://developer.apple.com/library/ios/documentation/uikit/reference/UIControl_Class/Reference/Reference.html#//apple_ref/occ/instm/UIControl/continueTrackingWithTouch:withEvent:"&gt;continueTrackingWithTouch:withEvent:&lt;/a&gt;，和 &lt;a class="reference external" href="http://developer.apple.com/library/ios/documentation/uikit/reference/UIControl_Class/Reference/Reference.html#//apple_ref/occ/instm/UIControl/endTrackingWithTouch:withEvent:"&gt;endTrackingWithTouch:withEvent:&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;beginTracking 和 endTracking 都很简单，在 beginTracking 的时候判断是哪个东西被拖动，让其进入高亮状态，修改成员变量记录当前的状态；在 endTracking 的时候取消高亮，恢复状态。&lt;/p&gt;
&lt;p&gt;在 continueTracking 方法中，先获取手指移动的坐标偏移量，将其换算成数值的偏移量，然后就直接调用相应的设置函数修改已选择的数值区域。&lt;/p&gt;
&lt;p&gt;注意 rangeSliderWillBeginDragging 和 rangeSliderDidEndDragging 这两个消息的回调时机。手指刚刚按在滑块上的时候，beginTracking 被调用，但这时并不表示用户开始已经开始拖动了，他可能只是按了一下，马上就抬起来。所以当手指按住滑块并有了第一次微小的位移时，continueTracking 被调用，这时就可以确定用户是在进行拖动操作。这时候才发送 rangeSliderWillBeginDragging 消息。最后当手指离开滑块时，拖动操作结束，发送 rangeSliderDidEndDragging 消息。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;beginTrackingWithTouch&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;beginTrackingWithTouch:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;UITouch&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;touch&lt;/span&gt; &lt;span class="nf"&gt;withEvent:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;UIEvent&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;event&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="bp"&gt;CGPoint&lt;/span&gt; &lt;span class="n"&gt;touchPoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;touch&lt;/span&gt; &lt;span class="nl"&gt;locationInView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CGRectContainsPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;largeHandle_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;touchPoint&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;largeHandle_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;highlighted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;isTrackingLargeHandle_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CGRectContainsPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smallHandle_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;touchPoint&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;smallHandle_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;highlighted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;isTrackingSmallHandle_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CGRectContainsPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;selectionView_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;touchPoint&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;selectionView_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;highlighted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;isTrackingSelection_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;isDragging_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;ul class="simple"&gt;
&lt;li&gt;continueTrackingWithTouch&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;continueTrackingWithTouch:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;UITouch&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;touch&lt;/span&gt; &lt;span class="nf"&gt;withEvent:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;UIEvent&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;event&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;isTrackingSmallHandle_&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;isTrackingLargeHandle_&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;isTrackingSelection_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;isDragging_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;isDragging_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="nl"&gt;respondsToSelector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;rangeSliderWillBeginDragging&lt;/span&gt;&lt;span class="p"&gt;:)])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="nl"&gt;rangeSliderWillBeginDragging&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;valueForX&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="n"&gt;touch&lt;/span&gt; &lt;span class="nl"&gt;previousLocationInView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;valueForX&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="n"&gt;touch&lt;/span&gt; &lt;span class="nl"&gt;locationInView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isTrackingSmallHandle_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smallValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smallValue_&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isTrackingLargeHandle_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;largeValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;largeValue_&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isTrackingSelection_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;moveSelection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;sendActionsForControlEvents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;UIControlEventValueChanged&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;ul class="simple"&gt;
&lt;li&gt;endTrackingWithTouch&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;endTrackingWithTouch:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;UITouch&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;touch&lt;/span&gt; &lt;span class="nf"&gt;withEvent:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;UIEvent&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;event&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;isTrackingSmallHandle_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;isTrackingLargeHandle_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;isTrackingSelection_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;selectionView_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;highlighted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;smallHandle_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;highlighted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;largeHandle_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;highlighted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isDragging_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;isDragging_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="nl"&gt;respondsToSelector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;rangeSliderDidEndDragging&lt;/span&gt;&lt;span class="p"&gt;:)])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="nl"&gt;rangeSliderDidEndDragging&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;最后就是修改 smallValue、largeValue 和整个选取范围的方法，这些方法会在滑动过程中由上面的 continueTrackingWithTouch:withEvent: 调用，也可以由其他程序直接调用。&lt;/p&gt;
&lt;p&gt;不但要保证 smallValue 和 largeValue 都在最小值和最大值范围之内，还要根据最小范围和最大范围的限制来进行适当的调整。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;setSmallValue&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;setSmallValue:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;smallValue_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;smallValue_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MIN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smallValue_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minimumValue_&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;maximumValue_&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;minimumSpan_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smallValue_&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;largeValue_&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;maximumSpan_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;largeValue_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smallValue_&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;maximumSpan_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smallValue_&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;largeValue_&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;minimumSpan_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;largeValue_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smallValue_&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;minimumSpan_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;offsetTrend_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;smallValue_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="n"&gt;updateSelectionView&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;ul class="simple"&gt;
&lt;li&gt;setLargeValue&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;setLargeValue:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;largeValue_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;largeValue_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MIN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;largeValue_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maximumValue_&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;minimumValue_&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;minimumSpan_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;largeValue_&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;smallValue_&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;minimumSpan_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;smallValue_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;largeValue_&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;minimumSpan_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;largeValue_&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;smallValue_&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;maximumSpan_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;smallValue_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;largeValue_&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;maximumSpan_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;offsetTrend_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;largeValue_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="n"&gt;updateSelectionView&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;ul class="simple"&gt;
&lt;li&gt;moveSelection&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;moveSelection:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;offset&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;largeValue_&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;smallValue_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;prevSmallValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smallValue_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;smallValue_&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;largeValue_&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smallValue_&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;minimumValue_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;smallValue_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minimumValue_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;largeValue_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smallValue_&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;largeValue_&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;maximumValue_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;largeValue_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;maximumValue_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;smallValue_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;largeValue_&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;offsetTrend_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prevSmallValue&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;smallValue_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="n"&gt;updateSelectionView&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;好了，基本上就这么些代码，还是很简单的。不放完整的程序文件了，只要了解了基本的处理方法，就可根据自己的需求去实现了。&lt;/p&gt;
</content><category term="程序开发"></category><category term="iOS Develop"></category></entry><entry><title>黎明公主攻略：附录</title><link href="https://blog.gocalf.com/zelda-tp-appendix" rel="alternate"></link><published>2012-01-22T23:12:00+08:00</published><updated>2012-01-22T23:12:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2012-01-22:/zelda-tp-appendix</id><summary type="html">&lt;p class="first last"&gt;这里记录《塞尔达传说：黎明公主》中主要剧情之外的一些信息。&lt;/p&gt;
</summary><content type="html">
&lt;p&gt;这里记录《塞尔达传说：黎明公主》中主要剧情之外的一些信息。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class="section" id="id2"&gt;
&lt;span id="secret"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id42"&gt;必须要知道的几个秘密&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id43"&gt;炸弹袋子升级&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;游戏中一共有三个炸弹袋种类升级，以及一个容量升级。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Bomb bag 1：&lt;/strong&gt;第二个迷宫过后，在 Kakariko 村子的炸弹商店购买。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bomb bag 2：&lt;/strong&gt;在 Zora's domain 宫殿中的河床上，用水种炸弹把岩石下的 Goron 救出后入手。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bomb bag 3：&lt;/strong&gt;帮助 River Canoe 小游戏的主人（钓鱼屋子旁边的屋子）把河道上的岩石清理后入手。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bomb bag 容量升级：&lt;/strong&gt;River Canoe 小游戏中得到 25 点分数以上入手。（提示：在炸弹袋子没有升级以前，如果需要用其他种类的炸弹，可以在 Kakariko Village 的炸弹店中将手头的炸弹卖出（站到柜台的铁窗前对话）。）&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id44"&gt;第三个空瓶子&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在 Fishing Hole 左侧桥后的水中，用普通钓竿钓起（不能划船过去）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id45"&gt;泉水精灵&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在沙漠区域右下角，将吊桥传送回海德拉大陆后，会露出一个洞穴，进入后每层中都有不同敌人：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;完成 10 层洞穴，奥当村（Ordon Village）泉水中会出现精灵&lt;/li&gt;
&lt;li&gt;完成 20 层洞穴，法隆森林（Faron Woods）泉水中会出现精灵 （需要齿轮进入）&lt;/li&gt;
&lt;li&gt;完成 30 层洞穴，艾丁地区（Eldin Province）泉水中会出现精灵 （需要铁球进入）&lt;/li&gt;
&lt;li&gt;完成 40 层洞穴，雷纳尔地区（Lanayru Province）泉水中会出现精灵 （需要控制棒进入）&lt;/li&gt;
&lt;li&gt;完成 50 层洞穴，全部泉水中出现精灵，并且可以装满一瓶大精灵的泪水（增加攻击力并且补满血）（需要双手钩进入）&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id46"&gt;鱼饵相关&lt;/a&gt;&lt;/h3&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;青蛙鱼饵&lt;/dt&gt;
&lt;dd&gt;在 Fishing Hole 的商店中，门附近桌子里有一个台子，用主视点观看后，会被主人邀请进入滚珠小游戏。游戏每次 5 块钱，如果通过会奖励 10 块钱。完成每个级别后，出门再进入就会有新的一级游戏。游戏一共为 8*8=64 关。完成 1-8 后就会得到青蛙鱼饵。这个鱼饵对吊深水鱼（Bass）非常有帮助。如果将 64 关全部通过。就可以随意选择任何一关进行游戏，并且每次通过第 8-8 关的时候，主人都会将你的钱袋填满（提示：在 Fishing Hole 的牌子后面，可以用狼的形态挖出虫子，用瓶子装起可以当作鱼饵）。&lt;/dd&gt;
&lt;dt&gt;重型鱼饵&lt;/dt&gt;
&lt;dd&gt;在花钱参加钓鱼游戏后，首先吊到 Hylain Pike，Hyrule Bass，Ordon Catfish 三种鱼。然后在池塘的东南角上（挨近钓鱼房子的地方），用 Bobber 鱼饵将重型鱼饵钓起。不过要确定钓上来的时候主人不在船上，不然她会将这个鱼饵拿走。&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id47"&gt;关于魔法铠甲&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;先在 Kakariko 村子的商店中捐赠 1000 块钱，然后门口的人会交给送热水给海拉尔城的 Goron 的任务。完成任务后，得到心之碎片。然后到海德拉城镇南部的摊位上买一瓶热水，送给南面城外的 Goron，他会将城堡南面的路打通。之后回到 Kakariko 村子的商店，原来捐 2000 块钱开店的要求变成了只需要 200 块。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id48"&gt;收集幽灵之魂&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;幽灵之魂只有晚上在狼形态下才可以看到，收集鬼混之后，去海德拉城镇南部的院子里（有很多动物），变成狼钻进屋里。将魂魄交给 Jiovani 后，就会得到奖励：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;20 个魂魄：赠送一瓶装着大精灵眼泪的瓶子&lt;/li&gt;
&lt;li&gt;60 个魂魄：每次和 Jiovani 对话后，会得到 200 块钱&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id49"&gt;弓箭升级&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在海德拉城镇东侧的帐篷里参加 STAR game 的奖品&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;大箭袋（60 只弓箭）：STAR game 第一级中，获得所有光球（使用钩锁）&lt;/li&gt;
&lt;li&gt;巨型箭袋（100 只弓箭）：STAR game 第二级中，获得所有光球（使用双钩锁）&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id50"&gt;钱袋升级&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在海德拉城镇东南角上，将捉到的虫子送给 Agatha 进行钱袋升级。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;大钱袋（600 块）：1 只虫子&lt;/li&gt;
&lt;li&gt;巨型钱袋（1000 块）：全部 24 只虫子&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id51"&gt;随意调整白天黑夜&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果流程进行到了可以进入天空神殿，你就可以发现每次通过加农炮进入天空神殿再回来，时间都是白天。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id52"&gt;容易的获得心之碎片&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在海德拉城镇的东南，虫子女孩屋子的旁边有一个占卜室。里面的女人每次收 10 块钱来为你算命，如果你询问她关于爱情（love）的问题。她就会给你看一个画面，这个画面中就会藏有一个心之碎片（偶尔她会重复显示同一个画面，不过只是偶尔罢了）。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.tgbus.com/wii/glmj/gl/200612/20061222160254.shtml"&gt;《塞尔达传说：黎明公主》你必须要知道的 10 个秘密！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;span id="heartpiece"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id53"&gt;心之碎片&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在王国中藏有 45 枚心之碎片（Heart Piece），每收集五枚就可以得到一个心之容器。&lt;/p&gt;
&lt;p&gt;游戏开的时候拥有三颗心。在游戏的八个迷宫里，每打完一个迷宫的 boss 可以获得一颗心。另外海拉尔王国中还有 45 枚心之碎片，这些都获得才能收集到全部 20 颗心。每找到 5 枚心之碎片，就可以得到一个完整的心之容器。一些碎片通过支线事件或小游戏的奖品获得。另外还有一些分布在王国的各个角落，可以去昏暗的洞穴，狭窄的胡同，险峻的高峰搜索这些能提高生命上限的宝藏。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="heart_pieces_map" src="https://blog.gocalf.com/images/2012/01/heart_pieces_map.png"/&gt;
&lt;p class="caption"&gt;45 枚心之碎片的分布图&lt;/p&gt;
&lt;/div&gt;
&lt;ol class="arabic" id="h01"&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;法隆森林 (Faron Woods)：&lt;/strong&gt;挥动油灯驱散有毒的沼泽雾气，进入位于西北部的洞穴（在找到通往西部森林之门钥匙的地方）。点亮尽头的两支火把，心之碎片就会出现。（如果在早期完成，那就不会有那些毒雾。）&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h02"&gt;&lt;p class="first"&gt;&lt;strong&gt;森之神殿 (Forest Temple)：&lt;/strong&gt;在进入 Forest Temple 后，直接走到东北角可以找到一个布满危险的大食人花的房间，将炸弹扔向最远处的大食人花。它爆炸后形成一条通往地表壁橱的通道，里面可以发现宝箱。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h03"&gt;&lt;p class="first"&gt;&lt;strong&gt;森之神殿 (Forest Temple)：&lt;/strong&gt;当获得回旋标后，前往神殿的最东边，可以找到一间地板下有敌人潜藏的房间，用回旋标将火把扑灭，房间里的木制平台会下落，形成一条路通往心之碎片。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h04"&gt;&lt;p class="first"&gt;&lt;strong&gt;海拉尔平原 (Hyrule Field)：&lt;/strong&gt;在 Hyrule Field 中部的大桥的南面一端，可以看到有很多树，其中一棵树的树枝上就漂浮着一个心之碎片，用回旋标获得它。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h05"&gt;&lt;p class="first"&gt;&lt;strong&gt;奥当村 (Ordon Village)：&lt;/strong&gt;在完成 Goron Mines 后，Epona 重回身边。在这之后前往 Ordon Village，在白天到牧场，喊出 Epona，然后与 Fado 对话可以接到驱赶山羊的任务，成功后获得。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2012/01/heart_pieces_1.jpg"&gt;&lt;img alt="heart_pieces_1" src="https://blog.gocalf.com/images/2012/01/heart_pieces_1_small.jpg"/&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li id="h06"&gt;&lt;p class="first"&gt;&lt;strong&gt;海拉尔平原 (Hyrule Field)：&lt;/strong&gt;前往 Kakariko Gorge，在东边的尽头处可以看到一块高大耸立着的大石头，上面漂浮着心之碎片，使用回旋标可以获得。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h07"&gt;&lt;p class="first"&gt;&lt;strong&gt;格隆矿山 (Goron Mines)：&lt;/strong&gt;在与矿山长老 Gor Amoto 对话后，使用磁力靴（铁鞋）可以从天花板走到西北角的尽头，在那里有个藏有心之碎片的宝箱。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h08"&gt;&lt;p class="first"&gt;&lt;strong&gt;格隆矿山 (Goron Mines)：&lt;/strong&gt;在第二层，可以找到一间由两座塔和一个吊桥的房间，使用磁力靴顺着墙上的痕迹走（顺着磁道的东边分支走），可以在南方尽头的平台处找到宝箱。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h09"&gt;&lt;p class="first"&gt;&lt;strong&gt;卡卡里克村 (Kakariko Village)：&lt;/strong&gt;在完成 Goron Mines 后，往北走到村子的尽头，与一只 Goron 对话，得到一次跳升，跟着爬上塔后，可以遇到一个年轻人（Talo）在顶上。他想看看你的弓箭技术，会让你挑战一个射箭练习，当你射到村子南端那塔顶端的杆就会得到一个心之碎片，不过前提是没有用鹰眼。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h10"&gt;&lt;p class="first"&gt;&lt;strong&gt;卡卡里克村 (Kakariko Village)：&lt;/strong&gt;在村子南方的尽头有一处精灵之泉，在这里的西边可以看到大量的礁石，炸开石头可以看到一个洞穴。顺着里面的路到达池塘前，使用磁力靴沉到水底就可以看到宝箱。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2012/01/heart_pieces_2.jpg"&gt;&lt;img alt="heart_pieces_2" src="https://blog.gocalf.com/images/2012/01/heart_pieces_2_small.jpg"/&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li id="h11"&gt;&lt;p class="first"&gt;&lt;strong&gt;卡卡里克村 (Kakariko Village)：&lt;/strong&gt;在炸开入口拿第 10 个心之碎片的那块巨石的上面，可以看到有一块礁石。用炸弹箭炸开就可以看到，然后使用回旋标获得。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h12"&gt;&lt;p class="first"&gt;&lt;strong&gt;海拉尔平原 (Hyrule Field)：&lt;/strong&gt;离开 Kakariko Village 往北走，可以在路的西边发现一个石块。用炸弹将其炸开，会出现一个入口，通向一条沿着岩石的狭窄的小道。沿着小道向南走，然后再用炸弹箭炸毁一块岩石，爬上树藤，往北走一点就可以得到一枚心之碎片。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h13"&gt;&lt;p class="first"&gt;&lt;strong&gt;湖底神殿 (Lakebed Temple)：&lt;/strong&gt;当你打败巨大的青蛙后，可以获得钩枪（Clawshot），返回神殿中央圆形的房间，到达二层，然后使用钩枪钩住中央的大吊灯，你就会发现藏有心之碎片的宝箱。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h14"&gt;&lt;p class="first"&gt;&lt;strong&gt;湖底神殿 (Lakebed Temple)：&lt;/strong&gt;当水被放完后，确认主房间里的水是流向西方的，去到第一层最西面的房间，通过桥后走向南边，利用铁靴子站在开关上，然后抓住附近的墙可以找到宝箱。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h15"&gt;&lt;p class="first"&gt;&lt;strong&gt;海利亚湖 (Lake Hylia)：&lt;/strong&gt;在（雷纳尔地区）Lanayru 的精灵之泉后面有一间房间，使用钩枪可以抓住附近的树藤可以到达一个房间，在里面点燃两支火把就可以获得奖励。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2012/01/heart_pieces_3.jpg"&gt;&lt;img alt="heart_pieces_3" src="https://blog.gocalf.com/images/2012/01/heart_pieces_3_small.jpg"/&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li id="h16"&gt;&lt;p class="first"&gt;&lt;strong&gt;油灯洞穴 2(Lantern Cavern #2)：&lt;/strong&gt;在 Lake Hylia 的南边可以发现一个山洞门口堵了一块巨石，炸开后，使用火把进入探索，里面有很多曲折转弯和凹室。在最后的房间，点燃两支火把后可以获得。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h17"&gt;&lt;p class="first"&gt;&lt;strong&gt;艾丁大桥 (Bridge of Eldin)：&lt;/strong&gt;前往 Bridge of Eldin，然后往北看，有一处悬崖，抓住后在悬崖上往西南方向走可以找到一处洞穴，跳出岩脊一段距离，在&lt;strong&gt;半空中&lt;/strong&gt;穿上铁鞋粘到墙上。在重复第三次后，就能到达那个宝箱。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h18"&gt;&lt;p class="first"&gt;&lt;strong&gt;格鲁多沙漠 (Gerudo Desert)：&lt;/strong&gt;前往营地的西北方，你将看到一只大野猪正在被烧烤，使用回转攻击扑灭火焰，然后使用剑将其剖开，就可以挖到一枚心之碎片。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h19"&gt;&lt;p class="first"&gt;&lt;strong&gt;沙漠刑场 (Arbiters Grounds)：&lt;/strong&gt;在 Arbiters Grounds 中央的大厅往西北方向走，在尽头使用钩枪可以穿过流沙瀑布到达另一头的宝箱处。西边墙上的一个抓取点可以帮助离开那个角落。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h20"&gt;&lt;p class="first"&gt;&lt;strong&gt;沙漠刑场 (Arbiters Grounds)：&lt;/strong&gt;在获得滑动齿轮后，前往地下室东北角的房间，在墙壁的标志处使用滑轮可以到达房中央的宝箱处。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2012/01/heart_pieces_4.jpg"&gt;&lt;img alt="heart_pieces_4" src="https://blog.gocalf.com/images/2012/01/heart_pieces_4_small.jpg"/&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li id="h21"&gt;&lt;p class="first"&gt;&lt;strong&gt;钓鱼场 (Fishing Hole)：&lt;/strong&gt;前往 Lanayru Province（雷纳尔地区）时可以在西北处找到钓鱼场。与西南方棚屋里的 Hena 对话可以租到一艘独木舟和旋转钓具。划到池的中央，跟着抛出旋转钓具收集池中大石块上的心之碎片心之碎片。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h22"&gt;&lt;p class="first"&gt;&lt;strong&gt;雪山废墟 (Snowpeak Ruins)：&lt;/strong&gt;前往 Foyer 的第二层，然后使用链球击打北边的吊灯让他摆动，跳上灯，如此跳上另外两个灯就可以到达区域的南边，在南部的平台上可以找到宝箱。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h23"&gt;&lt;p class="first"&gt;&lt;strong&gt;雪山废墟 (Snowpeak Ruins)：&lt;/strong&gt;到达二层后前往东南角，找到地板上的裂缝，使用炸弹或者链球将地板打出一个洞，跳下后可以找到宝箱。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h24"&gt;&lt;p class="first"&gt;&lt;strong&gt;时之神殿 (Temple of Time)：&lt;/strong&gt;在拿到统治权杖后，返回神殿的大门，在房间的第五层，可以找到一个带电的铁栏杆，使用统治权杖让雕像打开附近的开关处就可以得到心之碎片。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h25"&gt;&lt;p class="first"&gt;&lt;strong&gt;时之神殿 (Temple of Time)：&lt;/strong&gt;在拿到统治权杖后，返回神殿的大门，在房间的第五层最南部的房间，使用统治权杖让两塑雕像分别（沿着东边和西边的小路）打开各自开关，就会出现宝箱。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2012/01/heart_pieces_5.jpg"&gt;&lt;img alt="heart_pieces_5" src="https://blog.gocalf.com/images/2012/01/heart_pieces_5_small.jpg"/&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li id="h26"&gt;&lt;p class="first"&gt;&lt;strong&gt;时之神殿 (Temple of Time)：&lt;/strong&gt;在神殿的大厅，使用统治权杖移动一个在西南角的雕像，进入隐藏通道后获得。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h27"&gt;&lt;p class="first"&gt;&lt;strong&gt;天空之城 (City in the Sky)：&lt;/strong&gt;在 West Wing（西翼）的第一层打败巨大的机器后，上到第二层，反时针方向绕着房间走，小心地走过狭窄的通道，抓到附近的平台上，穿过裂缝可以获得。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h28"&gt;&lt;p class="first"&gt;&lt;strong&gt;天空之城 (City in the Sky)：&lt;/strong&gt;在 East Wing（东翼）的三层，借助飞行装置进入大厅，从西北的出口走出，然后不断借助飞行装置达到南方的阳台，穿过门后就可以获得一枚。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h29"&gt;&lt;p class="first"&gt;&lt;strong&gt;黎明宫殿 (Palace of Twilight)：&lt;/strong&gt;当获得光之剑后前往宫殿东翼（East Wing），将东部房间的雾用剑劈散后获得。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h30"&gt;&lt;p class="first"&gt;&lt;strong&gt;黎明宫殿 (Palace of Twilight)：&lt;/strong&gt;当获得光之剑后，前往宫殿西翼（West Wing），在第一个房间劈散雾可以出现一个新的传送台，可以带你到达宝箱处。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2012/01/heart_pieces_6.jpg"&gt;&lt;img alt="heart_pieces_6" src="https://blog.gocalf.com/images/2012/01/heart_pieces_6_small.jpg"/&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li id="h31"&gt;&lt;p class="first"&gt;&lt;strong&gt;雷纳尔地区 (Lanayru Province)：&lt;/strong&gt;往 Lanayru Province（雷纳尔地区，海拉尔城东边）东边走一段稍远的距离后，可以找到一条路被石头档住，将石头炸掉后，使用滑轮沿着墙走可以到达一处平台，平台上的宝箱里就是一枚心之碎片。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h32"&gt;&lt;p class="first"&gt;&lt;strong&gt;艾丁地区 (Eldin Province)：&lt;/strong&gt;进入 Eldin Province 内部，往北走可以看到一座峡谷环绕的桥，使用滑轮到达最北面的墙，然后到达平台处挖洞，杀掉三只骷髅后，打开宝箱获得。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h33"&gt;&lt;p class="first"&gt;&lt;strong&gt;死亡山脉 (Death Mountain)：&lt;/strong&gt;沿着 Death Mountain 小道走，与那的 Goron 对话，利用它做一次抬升，到达东边的平台后再往北走，跳到东边的洞穴中就可以发现附近的宝箱。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h34"&gt;&lt;p class="first"&gt;&lt;strong&gt;艾丁大桥 (Bridge of Eldin)：&lt;/strong&gt;在从雷纳尔沙漠重新回到桥的中部后，使用统治权杖让雕像从北边移动到南边，让其落在东部的凹陷处，用它作为一个平台跳过一道裂缝，爬上梯子后获得。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h35"&gt;&lt;p class="first"&gt;&lt;strong&gt;海利亚湖 (Lake Hylia)：&lt;/strong&gt;（以狼的形态）与湖西边的 Plumm 对话，可以接到一个打水果气球的迷你游戏，获得 10000 分就可以得到心之碎片的奖励。诀窍是连续击中双倍分数的水果，如一长串的草莓。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2012/01/heart_pieces_7.jpg"&gt;&lt;img alt="heart_pieces_7" src="https://blog.gocalf.com/images/2012/01/heart_pieces_7_small.jpg"/&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li id="h36"&gt;&lt;p class="first"&gt;&lt;strong&gt;海利亚湖 (Lake Hylia)：&lt;/strong&gt;用 Fyer 的普通飞行器向 Falbi 挑战，尽力到达西南角漂浮的平台，在平台上有一枚心之碎片。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h37"&gt;&lt;p class="first"&gt;&lt;strong&gt;奥当森林 (Ordon Woods)：&lt;/strong&gt;走到 Coro（卖油灯的科洛）的房间，然后往北走，炸掉巨大的石头后再往北走到达雕像处，使用统治权杖让它填到附近的一个洞处，然后变成狼让 Midna 带你到达雕像的最顶部，沿着路走就能找到。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h38"&gt;&lt;p class="first"&gt;&lt;strong&gt;卡卡里克村 (Kakariko Village)：&lt;/strong&gt;赠送 1000 卢比给 Malo 的店，用于重建西边到海拉尔城（Castal Town）的桥，然后与商店外面的 Elder（老者）对话，可以接到一个带泉水给 Goron 的任务。解决路上的敌人，淋湿那 Goron（用热的泉水淋湿城镇附近的小 Goron 使它复活）后可以获得奖励。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h39"&gt;&lt;p class="first"&gt;&lt;strong&gt;遗忘之里 (Hidden Village)：&lt;/strong&gt;在 Eldin Province 的东北角有一处山洞，穿过山洞可以找到一处隐藏的村庄，与村庄西边的 Cucco Leader（鸡首领）对话（撞烂窗户到达她那里），完成与 20 只猫对话的挑战任务就可以获得奖励（要在把权杖给老妇人看了之后）。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h40"&gt;&lt;p class="first"&gt;&lt;strong&gt;海拉尔城 (Castle Town)：&lt;/strong&gt;在城东的路上可以找到一名穿着绿色礼服的人，他一次可以接收 30 或 50 的卢比，如果你给足他 1000，他就会给你一枚心之碎片作为回报。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2012/01/heart_pieces_8.jpg"&gt;&lt;img alt="heart_pieces_8" src="https://blog.gocalf.com/images/2012/01/heart_pieces_8_small.jpg"/&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li id="h41"&gt;&lt;p class="first"&gt;&lt;strong&gt;油灯洞穴 1(Lantern Cavern #1)：&lt;/strong&gt;在 Kakariko Gorge 的西南方可以找到大块的石头，炸开后进入洞穴，点燃西北角的两支火把即可获得奖励。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h42"&gt;&lt;p class="first"&gt;&lt;strong&gt;森之圣域 (Sacred Grove)：&lt;/strong&gt;从神殿往东回到与 Skull Kid（吹喇叭的人）战斗的地方，炸开中央的石头，然后钻进地洞中，清光所有杀人植物后获得。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h43"&gt;&lt;p class="first"&gt;&lt;strong&gt;雪山 (Snowpeak)：&lt;/strong&gt;在你获得第二个 Mirror Shard 后，返回 Snowpeak 最上处，在第一次遇到 Yeto 的地方，可以挑战滑板的任务，当战胜他和他妻子后就可以获得（和妻子比赛的时候，注意穿越一片树林后，右边是可以利用跳跃进入另外一条比较快捷的赛道的）。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h44"&gt;&lt;p class="first"&gt;&lt;strong&gt;海拉尔平原 (Hyrule Field)：&lt;/strong&gt;获得双钩枪后，前往 Kakariko Gorge，在东南方可以找到一处有抓取点的石头，到达那里后拉向南边悬崖上的抓取点（在树藤下面），爬上树藤后获得。&lt;/p&gt;
&lt;/li&gt;
&lt;li id="h45"&gt;&lt;p class="first"&gt;&lt;strong&gt;海拉尔平原 (Hyrule Field)：&lt;/strong&gt;出 Hyrule Castle 往北走，沿着北部的石道直到看到一处被大石档住的洞穴，炸掉石头后，可以利用链球将冰块去处，解答完出现的三个推箱子谜题后获得。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2012/01/heart_pieces_9.jpg"&gt;&lt;img alt="heart_pieces_9" src="https://blog.gocalf.com/images/2012/01/heart_pieces_9_small.jpg"/&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://news2.92wy.com/html/Article/2006/1204/20061204155328702.shtm"&gt;《塞尔达传说 黎明公主》45 枚心之碎片收集&lt;/a&gt; by 真无双の乱舞 @ levelup.cn&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://files.cngba.com/%E9%B8%A1%E8%9B%8B%E7%9A%84ZELDA/xzsp.zip"&gt;心之碎片收集图文版&lt;/a&gt; by 塞尔达传说中文网&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;span id="item"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id54"&gt;非剧情道具&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;木盾：&lt;/strong&gt;性质与トアルの盾一样，遇到火会被烧掉。Kakariko Village 商店有售，50 元，与トアルの盾冲突，烧掉トアルの盾后才可买入。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ハイリアの盾：&lt;/strong&gt;Kakariko Village 商店有售，200 元。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;金铠甲：&lt;/strong&gt;穿上后无敌，但钱会狂掉。要在 Kakariko Village 捐款 1000 元修桥，在捐 2000 元开店，然后会在海拉尔城下镇中央广场出现杂货店，598 元买入。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;钱包升级：&lt;/strong&gt;海拉尔城下镇东边昆虫屋，1 只金色虫时升级到可以装 600 元，24 只金色虫时升级到可以装 1000 元。金色虫的收集具体看 &lt;a class="reference internal" href="#goldenbug"&gt;goldenbug&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;箭袋升级：&lt;/strong&gt;海拉尔城下镇东边马戏团的小游戏，有飞索和双手飞索时可以挑战，第一次升级可以带 60 支箭，第二次升级可以带 100 支箭。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;瓶子：&lt;/strong&gt;具体见 &lt;a class="reference internal" href="#bottle"&gt;bottle&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;鹰眼：&lt;/strong&gt;可以看远处的东西，与弓组合则为狙击弓；迷宫 L2 完结后去 Kakariko Village，上到左边最高处（地图左上角），发生远距离射箭事件，完成后 Kakariko Village 有售，100 元。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;爆弾袋：&lt;/strong&gt;总共有 3 个。&lt;ol class="arabic"&gt;
&lt;li&gt;迷宫 L2 完结后，Kakariko Village 炸弹店有售，150 元；&lt;/li&gt;
&lt;li&gt;Zora's River 上游，已经有炸弹的情况下发生剧情，用炸弹箭完成任务获得；&lt;/li&gt;
&lt;li&gt;Zora's Domain 中央，用水雷将熔岩炸开获得。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;爆弾袋升级：Zora's River 上游的小游戏 25 分，全炸弹袋，容量两倍。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cngba.com/viewthread.php?tid=16520313&amp;amp;page=1#pid15114268"&gt;《塞尔达传说 黄昏公主》研究部分&lt;/a&gt; by 鸡蛋&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;span id="bottle"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id55"&gt;瓶子&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id16"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id56"&gt;瓶子收集&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;剧情入手；&lt;/li&gt;
&lt;li&gt;Ordon Village 出 Hyrule Field 处的油商人，花 100 元买油获得；&lt;/li&gt;
&lt;li&gt;Zora's River 上游的 Fishing Hole，左边被桥封闭的池子里用普通钓竿钓起；&lt;/li&gt;
&lt;li&gt;海拉尔城东边 Jiovani 家（要变狼挖地进入），身上有 20 个幽灵之魂时获得。幽灵之魂的收集具体看 &lt;a class="reference internal" href="#ghostsoul"&gt;ghostsoul&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id17"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id57"&gt;瓶子可以装的东西&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;（注：商店可以购入的，只写最先有出售的地方）&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;灯油：&lt;/strong&gt;法隆森林的油商人处买入，其他地方也有出售。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;牛奶：&lt;/strong&gt;可以使用两次，1 次回复 3 颗心。 Ordon Village 杂货店和其他一些地方有出售。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;赤色药水：&lt;/strong&gt;可以回复 8 颗心。Kakariko Village 杂货店和其他一些地方有出售。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;青色药水：&lt;/strong&gt;心全回复。海拉尔城的店（要在 Kakariko Village 捐款 1000 元修桥，在捐 2000 元开店，然后会在海拉尔城中央广场出现）有出售。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;妖精：&lt;/strong&gt;8 颗心回复，当没血时会自动使用，相当于复活药。很多地方都有，注意用瓶子装。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;大妖精的泪水：&lt;/strong&gt;心全回复加攻击力上升效果。试炼的洞窟（沙漠的东边能发现不见了的艾丁大桥, 把桥搬回去后, 出现）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;史莱姆液体（黄）：&lt;/strong&gt;效果和灯油一样。打死黄色史莱姆获得，注意用瓶子装。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;史莱姆液体（赤）：&lt;/strong&gt;效果和赤色药水一样。打死红色色史莱姆获得，注意用瓶子装。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;史莱姆液体（青）：&lt;/strong&gt;效果和青色药水一样。打死蓝色史莱姆获得，注意用瓶子装。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;史莱姆液体（紫）：&lt;/strong&gt;效果随机，有时加血，有时扣血。打死紫色史莱姆获得，注意用瓶子装。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;史莱姆液体（绿）：&lt;/strong&gt;完全没有作用，应该是游戏制作中没有处理好的物品，纯观赏，无具体作用，蓝色史莱姆和黄色史莱姆死后的液体混合而成，注意用瓶子装。获得方法：试炼的洞窟 19 层，小心杀死紫色史莱姆后，等黄色史莱姆与蓝色史莱姆聚集，然后开杀，有较大几率获得。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;稀有史莱姆液体：&lt;/strong&gt;效果和大妖精的泪水一样。打死稀有史莱姆获得，注意用瓶子装。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;坏了的汤：&lt;/strong&gt;效果随机。用瓶子装法隆森林里油商人的锅里的汤。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作りかけのスープ：&lt;/strong&gt;2 颗心回复。用瓶子装雪山废墟兽人做的第一次汤。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ふつうのスープ：&lt;/strong&gt;4 颗心回复。用瓶子装雪山废墟兽人做的加南瓜后的汤。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;極上のスープ：&lt;/strong&gt;8 颗心回复。用瓶子装雪山废墟兽人做的加南瓜羊角后的汤。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;蜜蜂幼虫：&lt;/strong&gt;1 次 10 只，鱼饵，吞下肚子可每只回复 1/4 心。把蜂巢击落后，用瓶子装，或者去 Ordon Village 杂货店买。钓鱼细节看 &lt;a class="reference internal" href="#fishing"&gt;fishing&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;蚯蚓：&lt;/strong&gt;鱼饵。佐拉河上游 Fishing Hole 屋子边的看板后面，用瓶子装。钓鱼细节看 &lt;a class="reference internal" href="#fishing"&gt;fishing&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;水：&lt;/strong&gt;见水装就是了，完全没用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;温泉水：&lt;/strong&gt;心全回复，但得到后大概 30 秒就会冷却为普通的水。去 Death Mountain 的温泉（格隆矿山迷宫入口区域，迷宫 L2 通过后和右下角门卫说话，进入，某区域，推开石头出现）用瓶子装。或者去海拉尔城南边的温泉水店（要在 Kakariko Village 捐款 1000 元修桥，然后在 Kakariko Village 杂货店门口接运水任务，完成出现）买。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cngba.com/viewthread.php?tid=16520313&amp;amp;page=1#pid15114268"&gt;《塞尔达传说 黄昏公主》研究部分&lt;/a&gt; by 鸡蛋&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id18"&gt;
&lt;span id="mistery"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id58"&gt;奥义&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id19"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id59"&gt;奥义学习方法&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;奥义的学习有几个步骤：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;在狼的形态下调查中间有圆眼的石像；&lt;/li&gt;
&lt;li&gt;用狼哼出正确的旋律，一开始会有小亮点提示旋律经过的地方，然后要自己摸索，按住 A 后左手手柄的上下来控制旋律的高低。鸡蛋一般是按住 A 不断快速上中下的方法摸出旋律经过的地方，然后按出来的旋律痕迹再哼一次，基本上都能正确；&lt;/li&gt;
&lt;li&gt;见到一只金色的狼，对话后地图上会有这只狼的所在；&lt;/li&gt;
&lt;li&gt;人的形态下找到狼，按指示发招就可以学会新招，一般学招之前会要求演示学的上一招。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id20"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id60"&gt;亡灵狼的所在&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;学习并没有顺序可言，但学来的奥义是有顺序的。&lt;/p&gt;
&lt;p&gt;格式：有圆眼的石像的场所（奥义入手场所）&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Death Mountain，登山的路上中（奥当村的精灵泉水）&lt;/li&gt;
&lt;li&gt;Zora's River 上游的屋子附近（海拉尔城东门左边，要爬蔓藤上去）&lt;/li&gt;
&lt;li&gt;法隆森林深部（海拉尔城南门）&lt;/li&gt;
&lt;li&gt;海利亚湖，传送点附近需要人形态爬上楼梯，才能见到（格鲁多沙漠）&lt;/li&gt;
&lt;li&gt;雪山（墓地）&lt;/li&gt;
&lt;li&gt;Hidden Village（海拉尔城北）&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id21"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id61"&gt;奥义使用方法&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;按学习的顺序排列：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;终结：敌人倒下后，Z 锁定倒下的敌人然后按 A。&lt;/li&gt;
&lt;li&gt;盾攻击：敌人靠近时左手 Wii 手柄向前推。&lt;/li&gt;
&lt;li&gt;背面斩： 跳躲（锁定敌人后按左或者右 A）两次后，挥动右手手柄。&lt;/li&gt;
&lt;li&gt;兜割：盾攻击后按 A。&lt;/li&gt;
&lt;li&gt;居合斩：不拔剑不锁定敌人的状态下在敌人面前按 A。&lt;/li&gt;
&lt;li&gt;大跳斩：锁定敌人，长按 A，剑光一闪的时候放手 。&lt;/li&gt;
&lt;li&gt;大回旋斩：心全满的时候回転切り（左手 Wii 手柄左右挥动）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cngba.com/viewthread.php?tid=16520313&amp;amp;page=1#pid15114268"&gt;《塞尔达传说 黄昏公主》研究部分&lt;/a&gt; by 鸡蛋&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id22"&gt;
&lt;span id="goldenbug"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id62"&gt;金色虫&lt;/a&gt;&lt;/h2&gt;
&lt;div class="figure"&gt;
&lt;img alt="golden_bugs_map" src="https://blog.gocalf.com/images/2012/01/golden_bugs_map.png"/&gt;
&lt;p class="caption"&gt;24 只金色虫的位置分布&lt;/p&gt;
&lt;/div&gt;
&lt;ol class="arabic simple" id="b01"&gt;
&lt;li&gt;&lt;strong&gt;蚂蚁♂：&lt;/strong&gt;Kakariko Village 墓地的树下。&lt;/li&gt;
&lt;li id="b02"&gt;&lt;strong&gt;蚂蚁♀：&lt;/strong&gt;Kakariko Village 商店对面无人的小房间里。&lt;/li&gt;
&lt;li id="b03"&gt;&lt;strong&gt;蜉蝣♂：&lt;/strong&gt;格鲁多沙漠中间 Y 形大裂缝东南方的裂缝附近（沙漠的南面）。&lt;/li&gt;
&lt;li id="b04"&gt;&lt;strong&gt;蜉蝣♀：&lt;/strong&gt;格鲁多沙漠猫头鹰石像（天空之城剧情会出现标记）往北走的坑里（沙漠的东南面的沟里）。&lt;/li&gt;
&lt;li id="b05"&gt;&lt;strong&gt;独角仙♂：&lt;/strong&gt;海拉尔平原，湖被桥分成较小部分的东南的树上。&lt;/li&gt;
&lt;li id="b06"&gt;&lt;strong&gt;独角仙♀：&lt;/strong&gt;海拉尔平原，湖被桥分成较大部分的东北的高台树上，必须使用飞索回力标等远程道具等将它拉下来。&lt;/li&gt;
&lt;li id="b07"&gt;&lt;strong&gt;螳螂♂：&lt;/strong&gt;海利亚湖，大桥的北侧，桥门墙壁上（需要用回旋镖）。&lt;/li&gt;
&lt;li id="b08"&gt;&lt;strong&gt;螳螂♀：&lt;/strong&gt;海利亚湖，过大桥后往南走，通路的墙壁上（几棵大树树根附近）。&lt;/li&gt;
&lt;li id="b09"&gt;&lt;strong&gt;锹形虫♂：&lt;/strong&gt;海拉尔平原，从海拉尔城往北走，道路的一棵树（最东面大树）上。&lt;/li&gt;
&lt;li id="b10"&gt;&lt;strong&gt;锹形虫♀：&lt;/strong&gt;海拉尔平原，地图最上方（小河的北面）一个躬型门的上面。&lt;/li&gt;
&lt;li id="b11"&gt;&lt;strong&gt;团子虫♂：&lt;/strong&gt;Kakariko Village 南边卡卡里克峡谷，木桥南面。&lt;/li&gt;
&lt;li id="b12"&gt;&lt;strong&gt;团子虫♀：&lt;/strong&gt;Kakariko Village 南边卡卡里克峡谷，木桥的北面，左上角有几棵树，在树中间的草堆里。&lt;/li&gt;
&lt;li id="b13"&gt;&lt;strong&gt;蝴蝶♂：&lt;/strong&gt;海拉尔平原海拉尔城前，下方区域（海拉尔城东门出去南边）草丛中。&lt;/li&gt;
&lt;li id="b14"&gt;&lt;strong&gt;蝴蝶♀：&lt;/strong&gt;海拉尔平原海拉尔城前，右中区域（海拉尔城东门出去东北边），需要飞索上去的地方墙壁上。&lt;/li&gt;
&lt;li id="b15"&gt;&lt;strong&gt;瓢虫♂：&lt;/strong&gt;海拉尔城南，地图中大石柱的下面草中。&lt;/li&gt;
&lt;li id="b16"&gt;&lt;strong&gt;瓢虫♀：&lt;/strong&gt;海拉尔城南（南方区域的最西面），喷泉广场东边的三棵树中间那棵上面。&lt;/li&gt;
&lt;li id="b17"&gt;&lt;strong&gt;蜗牛♂：&lt;/strong&gt;森之圣域，传送点四周有个坏宝箱，附近的墙壁上（圣剑之坛门口两座雕像对面有一条小路，走进去回头向上看）。&lt;/li&gt;
&lt;li id="b18"&gt;&lt;strong&gt;蜗牛♀：&lt;/strong&gt;时之神殿内门口猫头鹰像附近的墙壁上。&lt;/li&gt;
&lt;li id="b19"&gt;&lt;strong&gt;竹节虫♂：&lt;/strong&gt;艾丁大桥南边的桥门墙壁上。&lt;/li&gt;
&lt;li id="b20"&gt;&lt;strong&gt;竹节虫♀：&lt;/strong&gt;艾丁大桥北边山上，用飞索上去，墙壁上。&lt;/li&gt;
&lt;li id="b21"&gt;&lt;strong&gt;蝗虫♂：&lt;/strong&gt;Kakariko Village 北的平原（海拉尔城王都西面区域），从村子往西北走的路上，5 个湖中间那个湖南面。&lt;/li&gt;
&lt;li id="b22"&gt;&lt;strong&gt;蝗虫♀：&lt;/strong&gt;Kakariko Village 北的平原（海拉尔城王都西面区域），东北的大块平原上。&lt;/li&gt;
&lt;li id="b23"&gt;&lt;strong&gt;蜻蜓♂：&lt;/strong&gt;Zora's Domain 下面瀑布区域，左下区域的草丛中。&lt;/li&gt;
&lt;li id="b24"&gt;&lt;strong&gt;蜻蜓♀：&lt;/strong&gt;Zora's River 上游的屋子旁边。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cngba.com/viewthread.php?tid=16520313&amp;amp;page=1#pid15114268"&gt;《塞尔达传说 黄昏公主》研究部分&lt;/a&gt; by 鸡蛋&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bbs.wiibbs.com/read.php?tid=11977"&gt;全 24 只黄金昆虫位置&lt;/a&gt; by exercises&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id23"&gt;
&lt;span id="ghostsoul"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id63"&gt;鬼魂之魂&lt;/a&gt;&lt;/h2&gt;
&lt;div class="figure"&gt;
&lt;img alt="ghost_souls_map" src="https://blog.gocalf.com/images/2012/01/ghost_souls_map.png"/&gt;
&lt;p class="caption"&gt;60 只鬼魂之魂的地理位置&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id24"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id64"&gt;详情&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple" id="g01"&gt;
&lt;li&gt;剧情发生，&lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-ch4"&gt;第四章&lt;/a&gt; 变成狼后在海拉尔城遇到 Jiovani（乔瓦尼）的密室里。&lt;/li&gt;
&lt;li id="g02"&gt;海利亚湖东南面取得 &lt;a class="reference external" href="#h16"&gt;心之碎片 16&lt;/a&gt; 的洞窟内（湖南边，传送点附近，爬楼梯上，用炸弹炸开岩石，能看见一个山洞，进入之前准备好足够的灯油和炸弹）。&lt;/li&gt;
&lt;li id="g03"&gt;同上。&lt;/li&gt;
&lt;li id="g04"&gt;同上。&lt;/li&gt;
&lt;li id="g05"&gt;沙漠刑场前骑野猪逃出火网后再返回（与兽人首领战斗的房间附近）。&lt;/li&gt;
&lt;li id="g06"&gt;沙漠刑场门口（通往沙漠刑场的出口东边的过道中）。&lt;/li&gt;
&lt;li id="g07"&gt;沙漠刑场内（剧情触发，必须把这四只都找到打到才能通过）。&lt;/li&gt;
&lt;li id="g08"&gt;同上。&lt;/li&gt;
&lt;li id="g09"&gt;同上。&lt;/li&gt;
&lt;li id="g10"&gt;同上。&lt;/li&gt;
&lt;li id="g11"&gt;雪山废墟前的小路上（变成狼走过右边的一条窄道）。&lt;/li&gt;
&lt;li id="g12"&gt;雪山废墟内（入口大堂可见）。&lt;/li&gt;
&lt;li id="g13"&gt;同上（入口两边的铠甲中，用链球破坏铠甲出现）。&lt;/li&gt;
&lt;li id="g14"&gt;同上（破坏 2F 某地面全是冰的房间的墙壁）。&lt;/li&gt;
&lt;li id="g15"&gt;取得圣剑前与木偶怪决斗的怪石群（从森之圣域的门口向东走的圆形区域处，炸开中央柱子旁边的石头进入地洞）。&lt;/li&gt;
&lt;li id="g16"&gt;时之神殿内（在 3F 栅栏里）。&lt;/li&gt;
&lt;li id="g17"&gt;同上（6F 天平房间用陀螺到达的地方）。&lt;/li&gt;
&lt;li id="g18"&gt;同上（在入口台阶附近的猫头鹰石像用统治权杖移开即可发现）。&lt;/li&gt;
&lt;li id="g19"&gt;天空之城（4F 的中央的宝箱附近）。&lt;/li&gt;
&lt;li id="g20"&gt;同上（2F 东侧用飞索借助飞天草向南侧圆形的岛飞）。&lt;/li&gt;
&lt;li id="g21"&gt;森之圣域（在追踪小鬼的过程中有一处可以游过瀑布到另一边的平台）。&lt;/li&gt;
&lt;li id="g22"&gt;圣剑之坛（拿到圣剑的房间）。&lt;/li&gt;
&lt;li id="g23"&gt;Kakariko Village 的屋子上面（从炸弹店里的楼梯上去，炸弹店的屋顶往北到塔楼下面）。&lt;/li&gt;
&lt;li id="g24"&gt;同上（炸弹店屋顶往南在房屋的废墟里）。&lt;/li&gt;
&lt;li id="g25"&gt;Kakariko Village 墓地（中央）。&lt;/li&gt;
&lt;li id="g26"&gt;Kakariko Village 通向矿山的路上（洞口），需要用锁链爬上去（也可以以人的形态让哥隆推上去）。&lt;/li&gt;
&lt;li id="g27"&gt;雪山地区的中间最南面（佐拉之里进入之后跳过湖面，在开始往山上爬的时候向西走在一棵树下）。&lt;/li&gt;
&lt;li id="g28"&gt;雪山地区的中间近东北面。&lt;/li&gt;
&lt;li id="g29"&gt;雪山洞穴的入口（需要用链球打掉两边的冰块）。&lt;/li&gt;
&lt;li id="g30"&gt;Zora's Domain 的瀑布口。&lt;/li&gt;
&lt;li id="g31"&gt;Zora's Domain 东北的缺口处。&lt;/li&gt;
&lt;li id="g32"&gt;Zora's River 东南面的山上（上游两条河流交汇的地方的岸上）。&lt;/li&gt;
&lt;li id="g33"&gt;海拉尔城北面区域的石桥上。&lt;/li&gt;
&lt;li id="g34"&gt;海拉尔城北面区域（雷纳尔地区）最东面的洞窟内（从北边的石桥向东走的圆形草处挖）。&lt;/li&gt;
&lt;li id="g35"&gt;同上。&lt;/li&gt;
&lt;li id="g36"&gt;Kakariko Village 东面的平原上，小桥的南面树下。&lt;/li&gt;
&lt;li id="g37"&gt;海拉尔城南门出去的喷泉附近。&lt;/li&gt;
&lt;li id="g38"&gt;海拉尔城西门出去的门口。&lt;/li&gt;
&lt;li id="g39"&gt;法隆森林北面的平原中央。&lt;/li&gt;
&lt;li id="g40"&gt;海拉尔城东门出去的最南面（就是找到一个天空文字的地方）。&lt;/li&gt;
&lt;li id="g41"&gt;海利亚湖湖心小屋旁边的奖品台上，需从顶上跳下。&lt;/li&gt;
&lt;li id="g42"&gt;海利亚湖的最西面。&lt;/li&gt;
&lt;li id="g43"&gt;海利亚湖南面的小山上。&lt;/li&gt;
&lt;li id="g44"&gt;海利亚湖大桥北面向东面的小路上（在抓鸡滑行的小游戏中跳下之后马上 180 度转身，在身后的平台上）。&lt;/li&gt;
&lt;li id="g45"&gt;海利亚湖东南面的小山上。&lt;/li&gt;
&lt;li id="g46"&gt;沙漠北面中间地区有一棵树，用锁链爬上去看到。&lt;/li&gt;
&lt;li id="g47"&gt;找到 46 后往北面走, 用狼的影视可以找到一个地洞（西北传送点附近的高台上，用飞索上去后，开感应模式，挖掘进入一小洞）。&lt;/li&gt;
&lt;li id="g48"&gt;同上。&lt;/li&gt;
&lt;li id="g49"&gt;到沙漠营地入口后向东走（黄金之狼的位置东边）。&lt;/li&gt;
&lt;li id="g50"&gt;格鲁多沙漠东南试炼的洞窟入口处。&lt;/li&gt;
&lt;li id="g51"&gt;格鲁多沙漠最西面一块大岩石旁边（第一次通过大炮发射到沙漠的时候，落地之后向南走，在一个平台上找到）。&lt;/li&gt;
&lt;li id="g52"&gt;试炼的洞窟 17F 全灭怪物后。&lt;/li&gt;
&lt;li id="g53"&gt;试炼的洞窟 31F 用权力法杖移开一扇门后在 33F 找到。&lt;/li&gt;
&lt;li id="g54"&gt;试炼的洞窟 44F，如果错过 50F 还有最后一次机会。&lt;/li&gt;
&lt;li id="g55"&gt;Kakariko Village 东面平原上最南面的洞窟内（卡卡里克峡谷南边的石头用炸弹破坏后进入洞窟）。&lt;/li&gt;
&lt;li id="g56"&gt;晚上到毒雾森林的话 Midna 会带你到一个大树桩上。&lt;/li&gt;
&lt;li id="g57"&gt;雪山地区东面矮坡的树附近（在通往山洞的路上有两棵树，东边的树附近）。&lt;/li&gt;
&lt;li id="g58"&gt;海利亚湖湖顶大桥向西南走，看见小木桥附近悬崖上的岩石，, 炸开后发现抓钩点，上去后找到。&lt;/li&gt;
&lt;li id="g59"&gt;Hidden Village 隐藏村庄的东北面（在房子上，用钩爪爬上去，要在开始寻找古代天书后才能看到）。&lt;/li&gt;
&lt;li id="g60"&gt;Kakariko Village 墓地西南面（靠近墓地入口）的墓碑推动后出现。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id27"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id65"&gt;汇总&lt;/a&gt;&lt;/h3&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="27%"/&gt;
&lt;col width="8%"/&gt;
&lt;col width="65%"/&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;地点&lt;/th&gt;
&lt;th class="head"&gt;个数&lt;/th&gt;
&lt;th class="head"&gt;详情&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;沙漠刑场&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a class="reference internal" href="#g07"&gt;g07&lt;/a&gt; &lt;a class="reference internal" href="#g08"&gt;g08&lt;/a&gt; &lt;a class="reference internal" href="#g09"&gt;g09&lt;/a&gt; &lt;a class="reference internal" href="#g10"&gt;g10&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;试炼的洞窟&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a class="reference internal" href="#g52"&gt;g52&lt;/a&gt; &lt;a class="reference internal" href="#g53"&gt;g53&lt;/a&gt; &lt;a class="reference internal" href="#g54"&gt;g54&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;海拉尔城下町&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a class="reference internal" href="#g01"&gt;g01&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;天空之城&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a class="reference internal" href="#g19"&gt;g19&lt;/a&gt; &lt;a class="reference internal" href="#g20"&gt;g20&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;死亡山脉&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a class="reference internal" href="#g26"&gt;g26&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;托亚尔森林&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a class="reference internal" href="#g56"&gt;g56&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;格鲁多沙漠&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;a class="reference internal" href="#g05"&gt;g05&lt;/a&gt; &lt;a class="reference internal" href="#g06"&gt;g06&lt;/a&gt; &lt;a class="reference internal" href="#g46"&gt;g46&lt;/a&gt; &lt;a class="reference internal" href="#g47"&gt;g47&lt;/a&gt; &lt;a class="reference internal" href="#g48"&gt;g48&lt;/a&gt; &lt;a class="reference internal" href="#g49"&gt;g49&lt;/a&gt; &lt;a class="reference internal" href="#g50"&gt;g50&lt;/a&gt; &lt;a class="reference internal" href="#g51"&gt;g51&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;卡卡利克村&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a class="reference internal" href="#g23"&gt;g23&lt;/a&gt; &lt;a class="reference internal" href="#g24"&gt;g24&lt;/a&gt; &lt;a class="reference internal" href="#g25"&gt;g25&lt;/a&gt; &lt;a class="reference internal" href="#g60"&gt;g60&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;遗忘之里&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a class="reference internal" href="#g59"&gt;g59&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;海拉尔平原&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;a class="reference internal" href="#g33"&gt;g33&lt;/a&gt; &lt;a class="reference internal" href="#g34"&gt;g34&lt;/a&gt; &lt;a class="reference internal" href="#g35"&gt;g35&lt;/a&gt; &lt;a class="reference internal" href="#g36"&gt;g36&lt;/a&gt; &lt;a class="reference internal" href="#g37"&gt;g37&lt;/a&gt; &lt;a class="reference internal" href="#g38"&gt;g38&lt;/a&gt; &lt;a class="reference internal" href="#g39"&gt;g39&lt;/a&gt; &lt;a class="reference internal" href="#g40"&gt;g40&lt;/a&gt; &lt;a class="reference internal" href="#g55"&gt;g55&lt;/a&gt; &lt;a class="reference internal" href="#g58"&gt;g58&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;海利亚湖（海拉尔湖）&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;a class="reference internal" href="#g02"&gt;g02&lt;/a&gt; &lt;a class="reference internal" href="#g03"&gt;g03&lt;/a&gt; &lt;a class="reference internal" href="#g04"&gt;g04&lt;/a&gt; &lt;a class="reference internal" href="#g41"&gt;g41&lt;/a&gt; &lt;a class="reference internal" href="#g42"&gt;g42&lt;/a&gt; &lt;a class="reference internal" href="#g43"&gt;g43&lt;/a&gt; &lt;a class="reference internal" href="#g44"&gt;g44&lt;/a&gt; &lt;a class="reference internal" href="#g45"&gt;g45&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;森之圣域&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a class="reference internal" href="#g15"&gt;g15&lt;/a&gt; &lt;a class="reference internal" href="#g21"&gt;g21&lt;/a&gt; &lt;a class="reference internal" href="#g22"&gt;g22&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;雪山&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a class="reference internal" href="#g11"&gt;g11&lt;/a&gt; &lt;a class="reference internal" href="#g27"&gt;g27&lt;/a&gt; &lt;a class="reference internal" href="#g28"&gt;g28&lt;/a&gt; &lt;a class="reference internal" href="#g29"&gt;g29&lt;/a&gt; &lt;a class="reference internal" href="#g57"&gt;g57&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;雪山废墟&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a class="reference internal" href="#g12"&gt;g12&lt;/a&gt; &lt;a class="reference internal" href="#g13"&gt;g13&lt;/a&gt; &lt;a class="reference internal" href="#g14"&gt;g14&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;时之神殿&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a class="reference internal" href="#g16"&gt;g16&lt;/a&gt; &lt;a class="reference internal" href="#g17"&gt;g17&lt;/a&gt; &lt;a class="reference internal" href="#g18"&gt;g18&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;佐拉河上游&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a class="reference internal" href="#g32"&gt;g32&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;佐拉之里&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a class="reference internal" href="#g30"&gt;g30&lt;/a&gt; &lt;a class="reference internal" href="#g31"&gt;g31&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cngba.com/viewthread.php?tid=16520313&amp;amp;page=1#pid15114268"&gt;《塞尔达传说 黄昏公主》研究部分&lt;/a&gt; by 鸡蛋&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bbs.wiibbs.com/read.php?tid=11978"&gt;全部 60 个幽灵之魂的位置&lt;/a&gt; by exercises&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bbs.pspchina.net/redirect.php?tid=169231"&gt;塞尔达黎明公主 - 补完篇（24 只黄金虫子，60 个灯笼怪位置）&lt;/a&gt; by www.pspchina.com tidus-rike&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id28"&gt;
&lt;span id="fishing"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id66"&gt;钓鱼&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id29"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id67"&gt;鱼还有能钓上来的东西&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;杂鱼：Ordon Village 以及世界各地都能钓到。（钓鱼日记右上）&lt;/li&gt;
&lt;li&gt;トアルナマズ：Ordon Village 和 Fishing Hole 能钓到，用蜜蜂幼虫的话会比较容易钓到。（钓鱼日记左上）&lt;/li&gt;
&lt;li&gt;ハイラルバス：Fishing Hole 可以钓到。（钓鱼日记右中）&lt;/li&gt;
&lt;li&gt;ハイリアパイク：Fishing Hole 可以钓到。（钓鱼日记左下）&lt;/li&gt;
&lt;li&gt;特殊的红鱼：Zora's Domain 下方瀑布，在两根石柱附近使用珊瑚耳饰可以钓到，剧情必须钓的鱼。（钓鱼日记左中）&lt;/li&gt;
&lt;li&gt;ハイラルドジョウ：湖底神殿、森之圣域和 Fishing Hole 都能钓到，传说之鱼（普通钓法钓到的为幼鱼，船钓才能钓到真正的传说之鱼）。（钓鱼日记右下）&lt;/li&gt;
&lt;li&gt;骷髅鱼：湖底神殿能钓到，不记入钓鱼日记中。&lt;/li&gt;
&lt;li&gt;瓶子：Fishing Hole 内一被木桥封闭的区域可以钓到，只能钓到一次，不记入钓鱼日记中。&lt;/li&gt;
&lt;li&gt;卢比（钱）：Fishing Hole 内随机钓到，不记入钓鱼日记中。&lt;/li&gt;
&lt;li&gt;长靴：Fishing Hole 内随机钓到，所谓的垃圾，不记入钓鱼日记中。&lt;/li&gt;
&lt;li&gt;车轮：Fishing Hole 内随机钓到，所谓的垃圾，不记入钓鱼日记中。&lt;/li&gt;
&lt;li&gt;小树枝：Fishing Hole 内随机钓到，所谓的垃圾，不记入钓鱼日记中。&lt;/li&gt;
&lt;li&gt;罐子：Fishing Hole 内随机钓到，所谓的垃圾，不记入钓鱼日记中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id30"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id68"&gt;普通钓法的鱼饵&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;普通钓法（扔竿→浮标下沉→拉竿→成功）&lt;/p&gt;
&lt;p&gt;普通钓法是静态钓法，只要等待就会有收获，珊瑚耳饰是直接装备的，蜜蜂幼虫和蚯蚓则需要主道具是钓竿的时候使用进行装备。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;蜜蜂幼虫：打蜂巢获得后，用瓶子装获得，一次 10 只，Kakariko Village 墓地和 Fishing Hole 都可以获得。&lt;/li&gt;
&lt;li&gt;蚯蚓：Fishing Hole 的看板后面就有，用瓶子装获得。&lt;/li&gt;
&lt;li&gt;珊瑚耳饰：剧情获得。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id31"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id69"&gt;船钓的鱼饵&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;（钓到的鱼不记入钓鱼日记，只能钓到部分鱼，会放在钓鱼屋里展示）&lt;/p&gt;
&lt;p&gt;船钓钓法（扔竿→晃动右手手柄→摇钩→左手转动拉竿→成功）&lt;/p&gt;
&lt;p&gt;船钓需要到 Fishing Hole 付钱钓，20 和 100 元，20 是自己钓，100 则有教学服务。如果普通钓法是静态钓法，船钓则是动态钓法，需要不断运动，能上钩的鱼竿扔出去后是看得见的，如果看不到换地方吧，更换鱼饵需要在不使用钓竿的情况下按 A 出菜单选第二项。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;スィースィー：初期入手的钓饵，吸引温柔的鱼类。&lt;/li&gt;
&lt;li&gt;ポコポコ：初期入手的钓饵，吸引一般的鱼类。&lt;/li&gt;
&lt;li&gt;クルクル：初期入手的钓饵，吸引凶猛的鱼类。&lt;/li&gt;
&lt;li&gt;沈むルアー：在 Fishing Hole 小木屋右边木桥处，有珊瑚耳饰的情况下，多钓几次可以钓到，一个人钓的时候才可以使用，否则会被没收，很强悍的鱼饵，能钓到你看不见的鱼，但不能拿来钓ハイラルドジョウ。&lt;/li&gt;
&lt;li&gt;青蛙鱼饵：Fishing Hole 小木屋，观察相片右边的小盒子（按 C 观看），玩小游戏 8 关后，获得，神之鱼饵，几乎无敌。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id32"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id70"&gt;季节变幻&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;（由 cngba 贵宾 lvyou 提供）&lt;/p&gt;
&lt;p&gt;钓鱼的地方有四种季节，一般第一次进都是春天（有樱花树），出门后再进就是夏天（一片绿），再出去再进就是秋天（枫叶），最后是冬天。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id33"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id71"&gt;传说之鱼&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;（由 cngba 贵宾 lvyou 提供）&lt;/p&gt;
&lt;p&gt;在夏天时租船去很多荷叶的地方钓鱼能钓到传说之鱼，并且在租船小屋会多一张你钓到传说之鱼的照片。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cngba.com/viewthread.php?tid=16520313&amp;amp;page=1#pid15114268"&gt;《塞尔达传说 黄昏公主》研究部分&lt;/a&gt; by 鸡蛋&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id34"&gt;
&lt;span id="trialscave"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id72"&gt;试炼的洞窟&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;试炼的洞窟各层敌人（GC 版第二次打五十层的敌人情况）：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;一个小怪物&lt;/li&gt;
&lt;li&gt;蝙蝠 + 老鼠 = 6&lt;/li&gt;
&lt;li&gt;食人花四朵&lt;/li&gt;
&lt;li&gt;三个大蜘蛛&lt;/li&gt;
&lt;li&gt;三个弓箭兵&lt;/li&gt;
&lt;li&gt;九个小火虫&lt;/li&gt;
&lt;li&gt;两个蜥蜴 + 若干蝙蝠&lt;/li&gt;
&lt;li&gt;五只特克迪蜘蛛&lt;/li&gt;
&lt;li&gt;弓箭兵 + 小怪物&lt;/li&gt;
&lt;li&gt;精灵（一）&lt;/li&gt;
&lt;li&gt;老鼠 + 铁壳怪&lt;/li&gt;
&lt;li&gt;液体敌人&lt;/li&gt;
&lt;li&gt;四个在水球里的敌人&lt;/li&gt;
&lt;li&gt;会飞的头骨若干&lt;/li&gt;
&lt;li&gt;小怪若干&lt;/li&gt;
&lt;li&gt;蝙蝠 + 老鼠&lt;/li&gt;
&lt;li&gt;狗状怪&lt;/li&gt;
&lt;li&gt;一圈嗜血仙人掌&lt;/li&gt;
&lt;li&gt;液体&lt;/li&gt;
&lt;li&gt;精灵（二）&lt;/li&gt;
&lt;li&gt;小怪 + 冰蝙蝠&lt;/li&gt;
&lt;li&gt;蝙蝠 + 隐藏的老鼠（用狼挖地可得 3 格血）&lt;/li&gt;
&lt;li&gt;小骷髅若干&lt;/li&gt;
&lt;li&gt;大吼四个（就是能定住林克的那种敌人）&lt;/li&gt;
&lt;li&gt;箭塔一个 + 小怪 + 弓箭手&lt;/li&gt;
&lt;li&gt;五个骷髅战士&lt;/li&gt;
&lt;li&gt;三个大蜘蛛 + 会飞的头骨若干&lt;/li&gt;
&lt;li&gt;六个小怪 + 两个带羊角的小怪&lt;/li&gt;
&lt;li&gt;小骷髅 + 两个骷髅战士 + 会飞的头骨&lt;/li&gt;
&lt;li&gt;精灵（三）&lt;/li&gt;
&lt;li&gt;激光石像五座 + 蝙蝠若干&lt;/li&gt;
&lt;li&gt;火蝙蝠 + 蜥蜴 + 会飞的头骨&lt;/li&gt;
&lt;li&gt;大吼四个&lt;/li&gt;
&lt;li&gt;隐藏的老鼠 + 液体（用狼挖地可得 1 格血）&lt;/li&gt;
&lt;li&gt;喷冰怪一个 + 蝙蝠若干&lt;/li&gt;
&lt;li&gt;六个冰战士&lt;/li&gt;
&lt;li&gt;会飞的骷髅 + 一圈嗜血仙人掌&lt;/li&gt;
&lt;li&gt;冰蝙蝠 + 冰战士 + 两个喷冰怪&lt;/li&gt;
&lt;li&gt;铁甲武士三个&lt;/li&gt;
&lt;li&gt;精灵（四）&lt;/li&gt;
&lt;li&gt;九个石像敌人&lt;/li&gt;
&lt;li&gt;小怪六个 + 食人花六个&lt;/li&gt;
&lt;li&gt;弓箭兵 + 带羊角的小怪&lt;/li&gt;
&lt;li&gt;四个有盾的怪物&lt;/li&gt;
&lt;li&gt;三个箭塔 + 五个大吼&lt;/li&gt;
&lt;li&gt;两个喷冰怪 + 隐藏的老鼠 + 冰战士&lt;/li&gt;
&lt;li&gt;老鼠 + 小怪一个 + 小骷髅&lt;/li&gt;
&lt;li&gt;两个飞天兽 + 铁甲武士一个&lt;/li&gt;
&lt;li&gt;铁甲武士四个&lt;/li&gt;
&lt;li&gt;精灵（五）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://zelda-link.blog.sohu.com/28706589.html"&gt;50 层简要说明及黎明公主 GC 版地图&lt;/a&gt; by 搜狐博客 ZELDA(塞尔达)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="游戏"></category><category term="Twilight Princess"></category></entry><entry><title>黎明公主攻略：终章 世界秩序的平衡</title><link href="https://blog.gocalf.com/zelda-tp-epilogue" rel="alternate"></link><published>2012-01-10T20:46:00+08:00</published><updated>2012-01-10T20:46:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2012-01-10:/zelda-tp-epilogue</id><summary type="html">&lt;p class="first last"&gt;加农终于倒下了，但他仍然不甘心自己的失败，扬言终有一天黎明和黑暗世界都将被血洗，且自己也不会被杀死在这里。&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;终章 世界秩序的平衡（光与影）&lt;/h2&gt;
&lt;p&gt;加农终于倒下了，但他仍然不甘心自己的失败，扬言终有一天黎明和黑暗世界都将被血洗，且自己也不会被杀死在这里。随后加农启动了黎明魔力向赞特寻求帮助以逃离此地，而此时却被无情地拒绝了，受到双重打击的加农终于倒下了，世界也终于恢复了平衡。此时，远处的光之精灵开始绽放耀眼的光芒，在那光芒之下依稀能见到米德娜那弱小的身影，于是林克激动地跑了过去，惊喜地看到了不但没死反而变回了黎明公主的米德娜，此时的米德娜笑着调侃目瞪口呆的林克。&lt;/p&gt;
&lt;p&gt;短暂的相聚最终还是要面对分别，来自不同世界的人永远不能在一起，而与林克一起经历了一切冒险的米德娜也不得不回到自己的世界，回到自己子民的身边。终于，众人来到镜子古墓为米德娜送行，米德娜明白光明与黑暗本不能在一起，也知道只要镜子还存在于这个世界，那么两个世界就会被一直连接在一起，互相干扰。为了两个世界之间不再起纠葛，米德娜不得不将自己对林克的好感深深地埋藏于内心深处，纵使不愿意，她最终还是选择了将镜子彻底粉碎并回到自己的世界中去，告别了海拉尔，也永别了林克……&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2012/01/tp_epilogue_01.jpg"&gt;&lt;img alt="tp_epilogue_01" src="https://blog.gocalf.com/images/2012/01/tp_epilogue_01.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;加农终于倒下了&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2012/01/tp_epilogue_02.jpg"&gt;&lt;img alt="tp_epilogue_02" src="https://blog.gocalf.com/images/2012/01/tp_epilogue_02.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;仍然不甘心失败的加农片，扬言终有一天黎明和黑暗世界都将被血洗&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2012/01/tp_epilogue_03.jpg"&gt;&lt;img alt="tp_epilogue_03" src="https://blog.gocalf.com/images/2012/01/tp_epilogue_03.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;光之精灵开始绽放耀眼的光芒，米德娜来了&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2012/01/tp_epilogue_04.jpg"&gt;&lt;img alt="tp_epilogue_04" src="https://blog.gocalf.com/images/2012/01/tp_epilogue_04.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;光明与黑暗即有联系，却又不能在一起&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2012/01/tp_epilogue_05.jpg"&gt;&lt;img alt="tp_epilogue_05" src="https://blog.gocalf.com/images/2012/01/tp_epilogue_05.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;米德娜变回黎明公主的原貌（感觉没有小小的时候可爱）&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2012/01/tp_epilogue_06.jpg"&gt;&lt;img alt="tp_epilogue_06" src="https://blog.gocalf.com/images/2012/01/tp_epilogue_06.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;米德娜对林克充满了好感&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2012/01/tp_epilogue_07.jpg"&gt;&lt;img alt="tp_epilogue_07" src="https://blog.gocalf.com/images/2012/01/tp_epilogue_07.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;毕竟是不同世界的人，终究还是要分开&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2012/01/tp_epilogue_08.jpg"&gt;&lt;img alt="tp_epilogue_08" src="https://blog.gocalf.com/images/2012/01/tp_epilogue_08.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;米德娜最终还是选择了将镜子彻底粉碎并回到自己的世界中去，告别了海拉尔，也永别了林克&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2012/01/tp_epilogue_09.jpg"&gt;&lt;img alt="tp_epilogue_09" src="https://blog.gocalf.com/images/2012/01/tp_epilogue_09.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;剧终……&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wii.tgbus.com/glmj/gl/200611/20061129114849.shtml"&gt;《塞尔达传说：黄昏公主》图文全攻略&lt;/a&gt;&amp;nbsp;by WiiBbs 攻研部 Szh、三代鬼彻、天堂的翅膀&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="游戏"></category><category term="Twilight Princess"></category></entry><entry><title>条件概率：两个都是男孩的概率</title><link href="https://blog.gocalf.com/the-probability-of-two-boys" rel="alternate"></link><published>2011-12-30T21:07:00+08:00</published><updated>2013-10-14T11:19:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-12-30:/the-probability-of-two-boys</id><summary type="html">&lt;p class="first last"&gt;这个问题其实不难，只是很多时候，尤其在没有任何提示的时候，容易想错。条件概率的题目一定要看清楚条件信息。问题描述：老王有两个孩子，已知至少有一个孩子是在星期二出生的男孩。问：两个孩子都是男孩的概率是多大？【假设生男生女的概率相等】&lt;/p&gt;
</summary><content type="html">
&lt;p&gt;这个问题其实不难，只是很多时候，尤其在没有任何提示的时候，容易想错。条件概率的题目一定要看清楚条件信息。&lt;/p&gt;
&lt;p&gt;问题描述：老王有两个孩子，已知至少有一个孩子是在星期二出生的男孩。问：两个孩子都是男孩的概率是多大？【假设生男生女的概率相等】&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;刚看到题目的时候，我也愣了一下：一个孩子星期二出生，对于另一个孩子是不是男孩有什么影响吗？&lt;/p&gt;
&lt;p&gt;先说一下，这道题的答案是 &lt;strong&gt;13 /
27&lt;/strong&gt;，如果你算出来的不是这个数，那建议你继续往下看看。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;思维缜密的项目经理的解题思路&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;项目经理小李，虽然数学功底不深，编程技术不精，但有个很大的好处是处事不惊，有条不紊。看到题目之后，略加思索，就用最简单的办法弄懂了这个问题，并求出了结果。&lt;/p&gt;
&lt;p&gt;首先看如果只知道老王有两个孩子，其他信息都不知道的情况下，两个孩子都是男孩的概率显然是 1/4。&lt;/p&gt;
&lt;p&gt;再来看看没有“星期二”这个条件的情况，题目变成：老王有两个孩子，已知至少有一个孩子是男孩，问两个孩子都是男孩的概率是多大？那结果显然是 1/3。因为在“至少有一个男孩”这样的条件下，只有三种可能：兄妹俩、姐弟俩、兄弟俩。这三种情况是等概率的，而只有一种情况是两个男孩，因此是 1/3。&lt;/p&gt;
&lt;p&gt;最后再把星期二也考虑进来。还是在上面的基础上扩展，先按照两个孩子的四种可能的性别组合进行划分，然后在每种组合里看看满足有至少一个周二男孩的情况数目：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;姐妹俩：不用看了，不满足至少有一个周二男孩的条件。&lt;/li&gt;
&lt;li&gt;兄妹俩：那哥哥一定是周二出生的了，妹妹出生的星期数有 7 种可能。&lt;/li&gt;
&lt;li&gt;姐弟俩：弟弟一定是周二出生，姐姐出生的星期数有 7 种可能。&lt;/li&gt;
&lt;li&gt;兄弟俩：兄弟二人出生的星期数总共有 7 * 7 = 49 种可能，但其中有 6 * 6 =
36 种都不满足至少有一个人是周二出生的条件，因此实际上有 49 - 36 =
13 种可能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，满足条件的情况（这里的情况是指综合考虑孩子的性别和出生星期数）总数为 7
+ 7 + 13 =
27。而其中有 13 中可能对应于两个孩子都是男孩。因此题目所求概率是 &lt;strong&gt;13 /
27&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;没错，13 /
27 就是这道题的答案，出现这样的数字是因为已知条件所提供的信息使得样本空间发生了变化（变小了一点儿）。这就是条件概率带来的影响。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;博学多才的数据挖掘专家的解题思路&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;小陈是一个有丰富的数据挖掘和机器学习经验的专家，在听到这个题目的时候，想都没想，干脆地说：“这题简单，用贝叶斯公式就能搞定”。&lt;/p&gt;
&lt;p&gt;根据题目，可以认定两个事件，事件 A 是：至少有一个周二出生的男孩；事件 B 是：两个孩子都是男孩。题目要求的是 P(B|A) 即在事件 A 发生的条件下，事件 B 发生的概率。根据贝叶斯公式，容易知道：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
P(B|A)=\frac{P(AB)}{P(A)}=\frac{P(A|B)P(B)}{P(A)}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;依次算出等号右边的各个概率值：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;在已知两个孩子都是男孩的条件下，至少有一个是周二出生的男孩：&lt;span class="math"&gt;\(P(A|B)=1-{(\frac{6}{7})}^2=\frac{13}{49}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;两个孩子都是男孩：&lt;span class="math"&gt;\(P(B)=\frac{1}{4}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;至少有一个孩子是周二出生的男孩：&lt;span class="math"&gt;\(P(A)=1-{(\frac{1}{2}\times\frac{6}{7}+\frac{1}{2})}^2=\frac{27}{196}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此可以求出：&lt;span class="math"&gt;\(P(B|A)=\frac{P(A|B)P(B)}{P(A)}=\frac{13}{49}\times\frac{1}{4}\div\frac{27}{196}=\frac{13}{27}\)&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;苦逼的无证程序员的解题方法&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;无证程序员小周看到题目后，二话不说，写了一小段程序（Python）来计算概率的近似值：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;IsTwoBoys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;genders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'M'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;weekdays&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;genders&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weekdays&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'M'&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'M'&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'M'&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

&lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;
&lt;span class="n"&gt;twoboys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;IsTwoBoys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;twoboys&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'p(twoboys) ='&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;twoboys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'='&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;twoboys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;运行结果，题目所求概率值近似为：0.48213，与 13 / 27 = 0.(481) 非常接近。&lt;/p&gt;
&lt;/div&gt;
</content><category term="数学"></category><category term="Interview Question"></category><category term="Probability"></category></entry><entry><title>黎明公主攻略：第九章 斩破黑暗的利刃</title><link href="https://blog.gocalf.com/zelda-tp-ch9" rel="alternate"></link><published>2011-12-25T19:01:00+08:00</published><updated>2011-12-25T19:01:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-12-25:/zelda-tp-ch9</id><summary type="html">&lt;p class="first last"&gt;赶到城堡，米德娜用自己刚刚觉醒的力量解除了城堡外面的结界，让林克得以进入城堡。&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;第九章 斩破黑暗的利刃（黎明公主）&lt;/h2&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_01.jpg"&gt;&lt;img alt="tp_ch09_01" src="https://blog.gocalf.com/images/2011/12/tp_ch09_01.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;米德娜的力量已经觉醒，帮助林克解除城堡外面的结界&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;赶到城堡，米德娜用自己刚刚觉醒的力量解除了城堡外面的结界，让林克得以进入城堡，随后来到房间 1。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;王城迷宫&lt;/h3&gt;
&lt;div class="figure"&gt;
&lt;img alt="tp_ch09_02" src="https://blog.gocalf.com/images/2011/12/tp_ch09_02.jpg" /&gt;
&lt;p class="caption"&gt;海拉尔城堡迷宫第一层地图&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="tp_ch09_03" src="https://blog.gocalf.com/images/2011/12/tp_ch09_03.jpg" /&gt;
&lt;p class="caption"&gt;海拉尔城堡迷宫第二层和第三层地图&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="tp_ch09_04" src="https://blog.gocalf.com/images/2011/12/tp_ch09_04.jpg" /&gt;
&lt;p class="caption"&gt;海拉尔城堡迷宫第四层地图&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 1：&lt;/strong&gt;先去东面，在门前会被一个结界所困住并会出现大量的小怪物，碰到结界的周围是会受伤的，把他们全部消灭掉后结界会消失，并且之后几乎大部分战斗都会以结界来困住林克，所以必须消灭掉结界中的怪物才能继续前进进入房间 2。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 2：&lt;/strong&gt;朝东北面走，在门前又会遭遇一次战斗，结束后可以通过，朝里面庭院的西北角走会看到一个机关，将其拉出后能打开旁边的门，进去后再次遭遇兽王布林布尔，战胜之后，兽王抛下一句：我只和强者站在一边。并将一把小钥匙交给林克后离开，看来他最终也折服于林克的强大之下了。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_05.jpg"&gt;&lt;img alt="tp_ch09_05" src="https://blog.gocalf.com/images/2011/12/tp_ch09_05.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;林克与兽王布林布尔的最后一次战斗&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 3：&lt;/strong&gt;回到房间 1，从西面的门进入房间 3，这里有许多栅栏和兽人弓箭手，干掉他们，走前面的哨塔向右拐过去不远会看到兽人的野猪坐骑，用他一直冲到房间最里面有 6 个风车图腾的地方，先用回旋镖将地上的落叶吹开能够看见标记，按照标记吹动风车后可以打开面前的门并取得地图，再利用感知发现门的另一边的地洞，挖下去后进入房间 10。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 10：&lt;/strong&gt;变狼开感应模式，在西面的一颗树边能找到一圈鬼魂，用炸弹炸他们中间的石头，区域西面的门将打开。点亮西面的灯后，雨会停掉。到东面（速度要快，灯一会儿就会灭掉，就又开始下雨了），点亮门前的灯台，东面的门打开。用支配权杖将东面的猫头鹰雕像运到南面的两个坑中，爬上附近的高台，借猫头鹰跳到对面去，获得钥匙（用于打开房间 9 尽头的里有许多资源和卢比的房间），之后回到房间 1 再从北面进入房间 4。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 4：&lt;/strong&gt;走左边的台阶用飞爪上去可以取得指南针，其后利用飞爪抓到北面的阳台上并进入房间 5。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 5：&lt;/strong&gt;这里会遭遇时之神殿的小 BOSS，战胜后点燃西面的两座灯柱让房间北面的台阶升起，爬上去后再用回旋镖熄灭房间东面的灯柱，这时后面的台阶会升起，要迅速站上去并让其将林克送到高台上。这里可以选择先去西面的房间 6 或者到东面的房间 7。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_06.jpg"&gt;&lt;img alt="tp_ch09_06" src="https://blog.gocalf.com/images/2011/12/tp_ch09_06.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;时之神殿的小 BOSS 又来跟林克战斗&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 6：&lt;/strong&gt;房间 6 的中部墙上挂着一副画，用弓射落后会看到提示，依照提示点亮身边墙下的灯柱后可以打开门，进去后西南的门通往房间 8，而东北的门可回到房间 4 的上层并且能够踩下机关。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_07.jpg"&gt;&lt;img alt="tp_ch09_07" src="https://blog.gocalf.com/images/2011/12/tp_ch09_07.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;注意开门的机关&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 7：&lt;/strong&gt;房间 7 的中部也有一副画，射落后会出现状态转换开关，利用其可以帮林克打开锁上的门，过去后同样可以依靠房间西北的门到回到房间 4 或者走东南的门到房间 8。回到房间 4 的话可踩下机关打开一个装有 200 卢比的箱子，之后可以从房间 4 的 1 层通过刚降下的吊灯上去取得几个箱子中的卢比，随后来到房间 8。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 8：&lt;/strong&gt;无论从哪边进入房间 8，在桥上都会遭遇一条龙人，战胜后才可继续前进，之后还会遇到对面楼顶的弓箭手的阻挠，不过也就在此时，阿雪、奥鲁等人也赶来帮忙。随后取得左边桥尽头箱子中的小钥匙和右边桥尽头箱子中的大钥匙后，打开楼上南面的门进入房间 9。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_08.jpg"&gt;&lt;img alt="tp_ch09_08" src="https://blog.gocalf.com/images/2011/12/tp_ch09_08.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;打败龙人后，林克的朋友们赶过来帮助消灭弓箭手&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 9：&lt;/strong&gt;房间 9 的地板只有一条正确的路可以通过，一旦走错就会掉下去，不过打开感知可以看到城堡卫兵的亡灵并给林克指引道路，然后跳过第一段断梯，之后再用飞爪通过第二段断梯，随后依靠陀螺仪通过第三段断梯，战胜前面的黑骑士后终于来到了宫殿最顶层，尽头的房间里有许多资源和卢比，随后前往加农所在之处。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_09.jpg"&gt;&lt;img alt="tp_ch09_09" src="https://blog.gocalf.com/images/2011/12/tp_ch09_09.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;用狼形态开启感知就可以方便地通过这里&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;最终之战：&lt;/strong&gt;进入宫殿，林克一眼就看到了处于昏迷的塞尔达公主，而其下坐着一人，正是黑暗之王——加农道夫。加农告诉米德娜，他早已盯上了黎明世界，他知道黎民世界的人拥有与海拉尔大陆的人完全不同的另一种力量，所以他利用了赞特，他要完美地将黎明世界和海拉尔世界的力量融合在自己体内，这样他将成为世界新的主宰。加农更是要吸收塞尔达公主的力量，虽然米德娜拼命要保护塞尔达并阻止加农，但是并没有停止加农的脚步，他依然融入进了塞尔达公主的体内。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_10.jpg"&gt;&lt;img alt="tp_ch09_10" src="https://blog.gocalf.com/images/2011/12/tp_ch09_10.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;与黑暗之王——加农道夫的战斗即将开始&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_11.jpg"&gt;&lt;img alt="tp_ch09_11" src="https://blog.gocalf.com/images/2011/12/tp_ch09_11.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;米德娜拼命保护塞尔达，却也没能组织加农融入塞尔达公主的体内&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;BOSS 战：&lt;/strong&gt;加农的傀儡——塞尔达（Ganon’s Puppet——Zelda）&lt;/p&gt;
&lt;p&gt;被操控的塞尔达公主将米德娜打出了宫殿，之后与林克兵刃相向。林克的所有攻击都对公主无效，而米德娜告诉林克，其手中的剑拥有光明之力，可以将公主的力量反射回去，于是此战的唯一攻击手段是利用公主打出的光球砍回去，但是如果距离太远会被公主继续砍回来，所以要注意距离。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_12.jpg"&gt;&lt;img alt="tp_ch09_12" src="https://blog.gocalf.com/images/2011/12/tp_ch09_12.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;BOSS：加农的傀儡——塞尔达（Ganon’s Puppet——Zelda）&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_13.jpg"&gt;&lt;img alt="tp_ch09_13" src="https://blog.gocalf.com/images/2011/12/tp_ch09_13.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;唯一攻击手段是把公主打出的光球砍回去&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_14.jpg"&gt;&lt;img alt="tp_ch09_14" src="https://blog.gocalf.com/images/2011/12/tp_ch09_14.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;距离很重要&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;胜利之后，成功将加农逐出了公主的身体，正当二人以为战斗结束之时，加农却一跃而起，变身成为黑暗巨兽。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_15.jpg"&gt;&lt;img alt="tp_ch09_15" src="https://blog.gocalf.com/images/2011/12/tp_ch09_15.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;把加农逐出公主身体后，林克和米德娜以为战斗已经结束了&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;黑暗巨兽&lt;/strong&gt;——加农（Dark Beast——Ganon）&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_16.jpg"&gt;&lt;img alt="tp_ch09_16" src="https://blog.gocalf.com/images/2011/12/tp_ch09_16.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;变身为黑暗巨兽的加农（Dark Beast——Ganon）&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;巨兽加农虽然体型巨大但是行动却非常敏捷，并且会不断四处传送然后朝林克发动突袭。要注意在加农消失时周围会有传送门，一旦出现紫色的门，则表示加农会由此出现。用弓箭射击他头顶使他摔倒，随后攻可击其腹部的伤口，几轮攻击过后加农会改变战术，再用弓箭已经不能命中，此时米德娜表示自己已经恢复体力可以帮助林克战斗了。之后用狼形态，在加农冲过来的时候抓住他并和他角力将其拌倒，就象刚开始拌山羊一样，如此反复，最后终于战胜了巨兽加农。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_18.jpg"&gt;&lt;img alt="tp_ch09_18" src="https://blog.gocalf.com/images/2011/12/tp_ch09_18.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;加农消失后会从紫色的传送门出现，准备好弓箭射击他的头顶&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_17.jpg"&gt;&lt;img alt="tp_ch09_17" src="https://blog.gocalf.com/images/2011/12/tp_ch09_17.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;趁着加农被弓箭射中摔倒时赶紧攻击其腹部的伤口&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_19.jpg"&gt;&lt;img alt="tp_ch09_19" src="https://blog.gocalf.com/images/2011/12/tp_ch09_19.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;加农改变了战术，林克变身成狼，在米德娜的帮助下与加农角斗&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_20.jpg"&gt;&lt;img alt="tp_ch09_20" src="https://blog.gocalf.com/images/2011/12/tp_ch09_20.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;米德娜的力量&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;然而被击败的加农仍没有被消灭，他将自己魔力化并准备彻底消灭三人，但就在此时米德娜将林克和公主传出城堡，决定以一己之力对抗加农，一场爆炸之后，出现在二人眼前的却是高举着暗影皇冠的加农的身影。愤怒林克正要冲上前去为米德娜报仇，公主阻止了他并向四个光之精灵求助，精灵以自己的力量化为光之箭，而公主也请求林克帮助自己对抗黑暗的恶魔，林克欣然接受。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_21.jpg"&gt;&lt;img alt="tp_ch09_21" src="https://blog.gocalf.com/images/2011/12/tp_ch09_21.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;米德娜以一己之力对抗加农失败，加农高举着暗影皇冠出现&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_22.jpg"&gt;&lt;img alt="tp_ch09_22" src="https://blog.gocalf.com/images/2011/12/tp_ch09_22.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;公主向四个光之精灵求助&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_23.jpg"&gt;&lt;img alt="tp_ch09_23" src="https://blog.gocalf.com/images/2011/12/tp_ch09_23.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;精灵以自己的力量化为光之箭，而公主也请求林克帮助自己对抗黑暗的恶魔&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;接着会在艾普娜上继续进行战斗，林克必须先靠近加农后锁定目标，公主会搭弓射箭，命中后加农会减速，这时再冲上前去攻击，几次攻击过后加农会下马并展开结界将林克独自和自己困在其中。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_24.jpg"&gt;&lt;img alt="tp_ch09_24" src="https://blog.gocalf.com/images/2011/12/tp_ch09_24.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;林克骑上艾普娜继续与加农战斗&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_25.jpg"&gt;&lt;img alt="tp_ch09_25" src="https://blog.gocalf.com/images/2011/12/tp_ch09_25.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;公主用箭射中加农使之减速后，林克赶紧冲上去攻击&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_26.jpg"&gt;&lt;img alt="tp_ch09_26" src="https://blog.gocalf.com/images/2011/12/tp_ch09_26.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;公主与林克并肩作战&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;黑暗国王&lt;/strong&gt;——加农道夫（Dark Lord——Ganondorf）&lt;/p&gt;
&lt;p&gt;真正最后的决战时刻来临了，若碰到周围结界的话会对林克造成伤害，虽然加农剑术高超，而此时的林克也已经可以应付自如，本战没有什么难度，唯一需要的就是耐心。最后经过一番激烈的周旋和角逐后将加农终于被打倒在地，林克狠狠地将征服者之剑插入了黑暗国王体内，彻底清除了本不属于这个世界的黑暗。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_27.jpg"&gt;&lt;img alt="tp_ch09_27" src="https://blog.gocalf.com/images/2011/12/tp_ch09_27.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;加农下马展开结界将林克独自和自己困在其中进行战斗&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_28.jpg"&gt;&lt;img alt="tp_ch09_28" src="https://blog.gocalf.com/images/2011/12/tp_ch09_28.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;加农的剑术很高超（毕竟曾经也是女神选择的勇士）&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_29.jpg"&gt;&lt;img alt="tp_ch09_29" src="https://blog.gocalf.com/images/2011/12/tp_ch09_29.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;林克依旧可以应付自如&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_30.jpg"&gt;&lt;img alt="tp_ch09_30" src="https://blog.gocalf.com/images/2011/12/tp_ch09_30.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;不断地周旋，寻找机会发起攻击&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_31.jpg"&gt;&lt;img alt="tp_ch09_31" src="https://blog.gocalf.com/images/2011/12/tp_ch09_31.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;激烈的战斗&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_32.jpg"&gt;&lt;img alt="tp_ch09_32" src="https://blog.gocalf.com/images/2011/12/tp_ch09_32.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;战斗&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_33.jpg"&gt;&lt;img alt="tp_ch09_33" src="https://blog.gocalf.com/images/2011/12/tp_ch09_33.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;不断地战斗&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_34.jpg"&gt;&lt;img alt="tp_ch09_34" src="https://blog.gocalf.com/images/2011/12/tp_ch09_34.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;决斗——力量与勇气&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch09_35.jpg"&gt;&lt;img alt="tp_ch09_35" src="https://blog.gocalf.com/images/2011/12/tp_ch09_35.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;终于将加农打倒在地，赶紧将征服者之剑插入黑暗国王体内&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wii.tgbus.com/glmj/gl/200611/20061129114849.shtml"&gt;《塞尔达传说：黄昏公主》图文全攻略&lt;/a&gt;&amp;nbsp;by WiiBbs 攻研部
Szh、三代鬼彻、天堂的翅膀&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cngba.com/thread-16520313-1-1.html"&gt;《塞尔达传说 黄昏公主》完美攻略研究&lt;/a&gt; by www.cngba.com 鸡蛋&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="游戏"></category><category term="Twilight Princess"></category></entry><entry><title>让 11、12、13、14 通过加减乘除运算得到 46</title><link href="https://blog.gocalf.com/get-46-from-11-12-13-and-14" rel="alternate"></link><published>2011-12-15T18:15:00+08:00</published><updated>2011-12-15T18:15:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-12-15:/get-46-from-11-12-13-and-14</id><summary type="html">&lt;p class="first last"&gt;前两天同事的朋友给出了一个怪怪的题目，说是考验我们的智商，结果最后让我们大跌眼镜。题目很简单：怎样让四个不同的数 11、12、13 和 14，通过简单的数学运算得到 46，可以使用加减乘除和括号。同时还给了一条重要提示：不能按照正常的思路思考。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;前两天同事的朋友给出了一个怪怪的题目，说是考验我们的智商，结果最后让我们大跌眼镜。&lt;/p&gt;
&lt;p&gt;题目很简单：怎样让四个不同的数 11、12、13 和 14，通过简单的数学运算得到 46，可以使用加减乘除和括号。同时还给了一条重要提示：&lt;strong&gt;不能按照正常的思路思考&lt;/strong&gt;。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;虽然说不能按照正常思路思考，但看到这个题目后还是立刻祭出了 n 年前写的算 24 点的程序，这个程序（以后有时间可以好好介绍一下）的扩展版支持由任意 2 到 7 个数字通过四则运算求出任意目标数。把四个数字和目标数输入进去，果然无解。不过很快发现，如果数字可以重复，能够得到下面两个最简单的解：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;使用两次 11：&lt;span class="math"&gt;\(11+13+11\times(14-12)=46\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;使用两次 12：&lt;span class="math"&gt;\((11+12)\times(12+14)/13=46\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可惜出题人并不允许使用重复的数字，要求给定的每个数字必须用且仅用一次。&lt;/p&gt;
&lt;p&gt;后来我就想会不会用到其他进制，搞 IT 的，总得玩玩什么二进制、八进制、十六进制之类的。但是应该采用哪个进制呢？想了好久，总算让我找到一个解：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="math"&gt;\(14+12\times(13-11)=46_{oct}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是把 46 按照八进制数来考虑。结果出题人告知：“&lt;strong&gt;是十进制的 46&lt;/strong&gt;”。看来进制转换的路走不通了，于是我又想出了其他一堆更不靠谱的解：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="math"&gt;\((11+12)\ll(14-13)=46\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\((11+12)\times\left\lceil\frac{14}{13}\right\rceil=46\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\sum_{i=13}^{14}{(11+12)}=46\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\((11+12)\times\left|\left\{13,14\right\}\right|=46\)&lt;/span&gt;（这里大括号代表集合）&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\((11+12)\times\left(e^{14i\pi}-e^{13i\pi}\right)=46\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很明显越来越扯了，每个解法都引入了四则运算之外的运算符或者函数，都不是正确的解。&lt;/p&gt;
&lt;p&gt;在苦思不得其解之后，出题人给出了他的答案，我们都震惊了。不过说实在的，我上面给的八进制的解跟答案非常接近了，只怪我没有深入理解出题人的告知。&lt;/p&gt;
&lt;p&gt;正确答案是：&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="math"&gt;\(11_{bin}+12_{oct}+13_{dec}+14_{hex}=46_{dec}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原来，出题人说“是十进制的 46”，其内在含义是说：其他数字不一定是十进制。哈哈！&lt;/p&gt;
</content><category term="头脑风暴"></category><category term="Puzzle"></category></entry><entry><title>黎明公主攻略：第八章 黎明之前的黑暗</title><link href="https://blog.gocalf.com/zelda-tp-ch8" rel="alternate"></link><published>2011-12-13T21:43:00+08:00</published><updated>2011-12-13T21:43:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-12-13:/zelda-tp-ch8</id><summary type="html">&lt;p class="first last"&gt;在离开天空之城回到陆地上以后，林克可以开始搜集所有散落在大陆上的心之碎片和金色小虫了，24 只金色小虫能换取装 1000 卢比的钱包，另外还可以开始凑钱买第三套铠甲。&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;第八章 黎明之前的黑暗（伪王）&lt;/h2&gt;
&lt;p&gt;在离开天空之城回到陆地上以后，林克可以开始搜集所有散落在大陆上的心之碎片和金色小虫了，24 只金色小虫能换取装 1000 卢比的钱包，另外还可以开始凑钱买第三套铠甲。现在回到镜之古墓，林克将镜子碎片全部装回镜架之后，通往黎明宫殿的道路终于开启了，这条路也通向米德娜真正的家乡，此时，米德娜也向林克讲述了整件事情的全部。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch08_01.jpg"&gt;&lt;img alt="tp_ch08_01" src="https://blog.gocalf.com/images/2011/12/tp_ch08_01.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;开启了通往黎明宫殿的道路&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;原来，米德娜本是黎明宫殿王室的正统血脉继承人，也就是黎明世界的主宰—黎明公主。然而有一天，一个名叫赞特的强大的魔法师夺取了她的王位，并企图抢夺王室世代相传的宝物——暗影皇冠。当时的米德娜甚至根本不会运用皇冠的力量，只能眼睁睁看着赞特将自己赶下王座，并将自己封印在现在这个躯体中，米德娜拼死保护了皇冠的一部分，而其他三部分被赞特抢走，米德娜决心终有一天她会集齐皇冠并拯救自己的子民。而黎明之镜是唯一可以通往黎明世界的途径，只有黎明世界真正的王者才能完全破坏它，因此赞特只能将镜子弄成碎片企图以此来阻止其他人接近黎明世界，现在镜子已经集齐，黎明世界的入口就将打开米德娜询问林克是否愿意帮助自己拯救黎明世界，而林克则毫不犹豫地踏进了黎明世界的大门。&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;黎明宫殿迷宫&lt;/h3&gt;
&lt;div class="figure"&gt;
&lt;img alt="tp_ch08_02" src="https://blog.gocalf.com/images/2011/12/tp_ch08_02.jpg" /&gt;
&lt;p class="caption"&gt;黎明宫殿迷宫第一层地图&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="tp_ch08_03" src="https://blog.gocalf.com/images/2011/12/tp_ch08_03.jpg" /&gt;
&lt;p class="caption"&gt;黎明宫殿迷宫二层到四层地图&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 1：&lt;/strong&gt;刚进黎明世界，目前只有一条路可以通行，朝右上的门前进并进入房间 2。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 2：&lt;/strong&gt;房间最北面有一个赞特的头像雕塑，击败其后会出现箱子，里面有小钥匙，利用它打开北面的门进入房间 3。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 3：&lt;/strong&gt;房间中间有一大片黑色的雾，碰到的话会强制进入狼形态，一直朝北干掉赞特头像雕塑，之后取得钥匙打开北面的门进入房间 4。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 4：&lt;/strong&gt;在这里林克会遇到赞特的幻影，他的幻影每次只会出现几秒钟，要抓住机会给予攻击，胜利后他会在房间中间留下一片黑雾和一堆小怪，先用狼的感知解决掉藏在雾中的怪物，然后攻击北面的手状物，他会松开手中的黎明之玉，迅速捡起黎明之玉，其可以帮助林克驱散黑雾，然后放到雾中间地上的圆槽里，南面回升起台阶以供林克可以将玉搬出。此后，手状雕像会开始追击林克并取回黎明之玉，攻击三下后可以让其暂时瘫痪几秒，但是一定要在它抢走黎明之玉前将玉带回房间 1。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch08_04.jpg"&gt;&lt;img alt="tp_ch08_04" src="https://blog.gocalf.com/images/2011/12/tp_ch08_04.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;遇到赞特的幻影&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch08_05.jpg"&gt;&lt;img alt="tp_ch08_05" src="https://blog.gocalf.com/images/2011/12/tp_ch08_05.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;去前方抢夺黎明之玉&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch08_06.jpg"&gt;&lt;img alt="tp_ch08_06" src="https://blog.gocalf.com/images/2011/12/tp_ch08_06.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;台阶升起后要赶快把黎明之玉搬出去&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 3：&lt;/strong&gt;回到房间 3，驱散中间的黑雾后会出现台阶，到台阶上后再用飞爪将玉取上来并迅速离开回到房间 2。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 2：&lt;/strong&gt;东北角有块 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h29"&gt;心之碎片 29&lt;/a&gt;，此时可以利用黎明之玉帮忙取得，也可以之后获得光之神剑后再来拿，接着回到房间 1 将黎明之玉放到中间的凹槽上，随后会出现通道到左边的房间 5。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 5：&lt;/strong&gt;这里有许多来回移动的平台，通过这些平台到北面去，战胜赞特的头像雕塑后出现钥匙，之后继续前进到房间 6。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch08_07.jpg"&gt;&lt;img alt="tp_ch08_07" src="https://blog.gocalf.com/images/2011/12/tp_ch08_07.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;通过来回移动的平台到北面去&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 6：&lt;/strong&gt;和房间 3 类似的，中间还是有片黑雾，通过以后战胜赞特的头像雕塑会在房间西南边的高处出现钥匙箱子，用双飞爪过去取得后进入到房间 7。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 7：&lt;/strong&gt;再次战胜赞特的幻影并取得黎明之玉后，将其带回房间 1 的另一个凹槽里，途中房间 5 的西北角的箱子里有 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h30"&gt;心之碎片 30&lt;/a&gt;，随后将征服者之剑插入到两个黎明之玉中间可以获得光之神剑，今后拿着光之神剑舞出旋风斩的话可以象黎明之玉一样驱散黑雾。随后朝北面的黑雾瀑布处使用旋风斩，接着进入房间 8。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch08_08.jpg"&gt;&lt;img alt="tp_ch08_08" src="https://blog.gocalf.com/images/2011/12/tp_ch08_08.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;取得光之神剑&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 8：&lt;/strong&gt;利用旋风斩驱散中间部分的黑雾可以看到那里有几个被污染的黎明之玉，站在中间用旋风斩的话可以使它们暂时获得黎明之力并升起一个平台，站在平台上到房间的西南角，战胜赞特的头像雕塑后取得钥匙并从东面进入房间 9。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch08_09.jpg"&gt;&lt;img alt="tp_ch08_09" src="https://blog.gocalf.com/images/2011/12/tp_ch08_09.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;可以用光之神剑驱散黑雾&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch08_10.jpg"&gt;&lt;img alt="tp_ch08_10" src="https://blog.gocalf.com/images/2011/12/tp_ch08_10.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;用旋风斩使被污染的黎明之玉暂时获得黎明之力&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 9：&lt;/strong&gt;这里有多个赞特的头像雕塑，可以先去房间西面的黑雾瀑布后面用飞爪上到顶层取得大钥匙，随后对中间平台上的被污染的黎明之玉使用旋风斩，然后站上平台来到房间的最南边解决掉其余几个赞特的头像雕塑，随后再回到北面取得出现的小钥匙，之后进入房间 10。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch08_11.jpg"&gt;&lt;img alt="tp_ch08_11" src="https://blog.gocalf.com/images/2011/12/tp_ch08_11.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;又有被污染的黎明之玉&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 10：&lt;/strong&gt;对中间的三个被污染的黎明之玉用旋风斩使平台升起，最后朝二层的南面移动，之后用飞爪配合南面不断上升的平台并朝东南方移动，到房间东南面取得消灭赞特头像雕塑后的小钥匙并从东北的门进入房间 11。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch08_12.jpg"&gt;&lt;img alt="tp_ch08_12" src="https://blog.gocalf.com/images/2011/12/tp_ch08_12.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;离赞特的房间越来越近了&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 11：&lt;/strong&gt;消灭掉几个暗影使者后可以朝北面进入赞特的房间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BOSS 战：&lt;/strong&gt;篡位者——赞特（Usurper King—Zant）&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch08_13.jpg"&gt;&lt;img alt="tp_ch08_13" src="https://blog.gocalf.com/images/2011/12/tp_ch08_13.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;BOSS：篡位者——赞特（Usurper King—Zant）&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch08_14.jpg"&gt;&lt;img alt="tp_ch08_14" src="https://blog.gocalf.com/images/2011/12/tp_ch08_14.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;BOSS：篡位者——赞特（Usurper King—Zant）&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;米德娜质问赞特为什么要篡夺王位和入侵自己的世界，赞特一番发作后，告诉二人，自己本来是黎明世界里一个平平无奇的魔法师，但是他并没有强大的力量，然而对力量和权利的渴望让他自己陷入疯狂，也正在这时，被加农大人所看中，并承诺给自己以强大的力量，不过要成为他的傀儡替他做事，在毫不犹豫地答应了加农大人的条件后，他于是设法将米德娜赶下了台，并企图夺取米德娜的魔力和暗影皇冠。不过让人没有想到的是具有皇室血脉的米德娜竟然没有什么强大的魔力，于是也就任其带着一块暗影皇冠逃走。随后，几近疯狂的赞特向二人发起了攻击。&lt;/p&gt;
&lt;p&gt;赞特作为一个借助他人力量强大起来的傀儡法师，其战斗方式终究也只能是借鉴他人。首先是回到食人花——达巴巴的场所，而首选武器也和当时一样用回旋镖将其拉到身前攻击即可; 几个回合以后，赞特会切换到戈隆矿山小 BOSS 的能力战斗，此战穿上钢之靴待赞特跳累了喘息时再上去攻击; 几个回合之后其又会切换至水底兽——摩菲尔的战斗，这次不同的是，几个回合后赞特会一次升起 4 个巨型头像并随机从其中一个出现攻击林克，其实只需要守到其中一个前面等赞特自己送上门来就好了; 又几回合后，赞特再次切换成法隆森林的小 BOSS 的战斗方式，虽然这里他不会放回旋镖，但是只要对着他所站的柱子撞两次就可以让他掉下来并攻击之; 随后赞特又会进入到冰怪——布里泽塔的能力进行战斗，用链子球攻击后他会变小，然后再上去攻击即可; 再后赞特会最后一次切换到海拉尔城堡前自己战斗，不过他的攻击方式除了毫无章法的乱砍就是漫无目的的乱转，对于林克来说都可以轻松化解。&lt;/p&gt;
&lt;p&gt;胜利之后，赞特依然气焰嚣张地向二人叫嚣，称无论二人怎样努力战胜了自己也是无济于事的，因为其主人加农此时已经能自由穿梭于黎明世界和海拉尔大陆之间了，不久之后两个世界都将在主人的统治之下，而自己就是其手下的最大功臣。忍无可忍的米德娜突然爆发出一股强大的力量将赞特的力量夺走，连她自己都惊讶于自己的这股力量。原来在极度愤怒之下，米德娜突然掌握了祖先的力量，并将它爆发出来杀死了赞特。事不宜迟，知道加农已经逃离黎明世界后，二人也迅速赶往海拉尔城堡阻止他的邪恶计划。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch08_15.jpg"&gt;&lt;img alt="tp_ch08_15" src="https://blog.gocalf.com/images/2011/12/tp_ch08_15.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;林克与赞特打在一处&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch08_16.jpg"&gt;&lt;img alt="tp_ch08_16" src="https://blog.gocalf.com/images/2011/12/tp_ch08_16.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;米德娜自己也对自己使出那样的力量感到惊讶&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch08_17.jpg"&gt;&lt;img alt="tp_ch08_17" src="https://blog.gocalf.com/images/2011/12/tp_ch08_17.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;米德娜感受着自己强大的力量&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch08_18.jpg"&gt;&lt;img alt="tp_ch08_18" src="https://blog.gocalf.com/images/2011/12/tp_ch08_18.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;米德娜掌握了祖先的力量&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wii.tgbus.com/glmj/gl/200611/20061129114849.shtml"&gt;《塞尔达传说：黄昏公主》图文全攻略&lt;/a&gt;&amp;nbsp;by WiiBbs 攻研部
Szh、三代鬼彻、天堂的翅膀&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cngba.com/thread-16520313-1-1.html"&gt;《塞尔达传说 黄昏公主》完美攻略研究&lt;/a&gt; by www.cngba.com 鸡蛋&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="游戏"></category><category term="Twilight Princess"></category></entry><entry><title>iOS 在 UIAlertView 中显示进度条</title><link href="https://blog.gocalf.com/iphone-dev-progressview-in-alertview" rel="alternate"></link><published>2011-12-09T18:27:00+08:00</published><updated>2011-12-21T10:31:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-12-09:/iphone-dev-progressview-in-alertview</id><summary type="html">&lt;p class="first last"&gt;今天这个问题是，在一个 iPhone 程序中，我要在后台做大量的数据处理，希望在界面上显示一个进度条（Progress Bar）使得用户了解处理进度。这个进度条应该是在一个模态的窗口中，使界面上其他控件无法被操作。怎么用最简单的方法来实现这个功能？UIAlertView 是一个现成的模态窗口，如果能把进度条嵌入到它里面就好了。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;今天这个问题是，在一个 iPhone 程序中，我要在后台做大量的数据处理，希望在界面上显示一个进度条（Progress
Bar）使得用户了解处理进度。这个进度条应该是在一个模态的窗口中，使界面上其他控件无法被操作。怎么用最简单的方法来实现这个功能？&lt;a class="reference external" href="http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIAlertView_Class/UIAlertView/UIAlertView.html"&gt;UIAlertView&lt;/a&gt; 是一个现成的模态窗口，如果能把进度条嵌入到它里面就好了。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;以下内容适用于 iOS 2.0+。&lt;/p&gt;
&lt;p&gt;我们知道，如果要显示一个 alert 窗口（比如用来显示错误或警告信息、询问用户是否确认某操作等等），只要简单地创建一个 UIAlertView 对象，再调用其 show 方法即可。示意代码如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;UIAlertView&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;alertView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[[&lt;/span&gt;&lt;span class="bp"&gt;UIAlertView&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nl"&gt;initWithTitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;Title&amp;quot;&lt;/span&gt;
                                                     &lt;span class="nl"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;Message&amp;quot;&lt;/span&gt;
                                                    &lt;span class="nl"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;
                                           &lt;span class="nl"&gt;cancelButtonTitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;OK&amp;quot;&lt;/span&gt;
                                           &lt;span class="nl"&gt;otherButtonTitles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                          &lt;span class="n"&gt;autorelease&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alertView&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;如果要添加一个进度条，只要先创建并设置好一个 &lt;a class="reference external" href="http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIProgressView_Class/Reference/Reference.html"&gt;UIProgressView&lt;/a&gt; 的实例，再利用 addSubbiew 方法添加到 alertView 中即可。&lt;/p&gt;
&lt;p&gt;在实际应用中，我可能需要在类中保存进度条的对象实例，以便更新其状态，因此先在自己的 ViewController 类中添加成员变量：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//  MySampleViewController.h&lt;/span&gt;
&lt;span class="cp"&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;MySampleViewController&lt;/span&gt; : &lt;span class="bp"&gt;UIViewController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;@private&lt;/span&gt;
    &lt;span class="bp"&gt;UIProgressView&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;progressView_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;接下来写一个叫做 showProgressAlert 的方法来创建并显示带有进度条的 alert 窗口，其中高亮的部分就是把进度条添加到 alertView 中：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;showProgressAlert:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="nf"&gt;withMessage:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="bp"&gt;UIAlertView&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;alertView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[[&lt;/span&gt;&lt;span class="bp"&gt;UIAlertView&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nl"&gt;initWithTitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
                                                         &lt;span class="nl"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
                                                        &lt;span class="nl"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;
                                               &lt;span class="nl"&gt;cancelButtonTitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;
                                               &lt;span class="nl"&gt;otherButtonTitles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                              &lt;span class="n"&gt;autorelease&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="hll"&gt;    &lt;span class="n"&gt;progressView_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;UIProgressView&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nl"&gt;initWithProgressViewStyle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;UIProgressViewStyleBar&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;    &lt;span class="n"&gt;progressView_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGRectMake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;225&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alertView&lt;/span&gt; &lt;span class="nl"&gt;addSubview&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;progressView_&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alertView&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;为了让数据处理的子进程能够方便地修改进度条的值，再添加一个简单的方法：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;updateProgress:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSNumber&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;progress&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;progressView_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;progress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;progress&lt;/span&gt; &lt;span class="n"&gt;floatValue&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;另外，数据处理完毕后，我们还需要让进度条以及 alertView 消失，由于之前并没有保存 alertView 的实例，可以通过进度条的 superview 访问之：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;dismissProgressAlert&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;progressView_&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;progressView_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;superview&lt;/span&gt; &lt;span class="nl"&gt;isKindOfClass&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="bp"&gt;UIAlertView&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="bp"&gt;UIAlertView&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;alertView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;UIAlertView&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;progressView_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;superview&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alertView&lt;/span&gt; &lt;span class="nl"&gt;dismissWithClickedButtonIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nl"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;progressView_&lt;/span&gt; &lt;span class="k"&gt;release&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;progressView_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;假设处理数据的方法叫 processData，当然它会在一个单独的线程中运行，下面的片段示意了如何更新进度条状态，以及最后如何让它消失。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;processData:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;total&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Update UI to show progess.&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;progress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="bp"&gt;NSNumber&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;progressNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSNumber&lt;/span&gt; &lt;span class="nl"&gt;numberWithFloat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;performSelectorOnMainThread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;updateProgress&lt;/span&gt;&lt;span class="p"&gt;:)&lt;/span&gt;
                               &lt;span class="nl"&gt;withObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;progressNumber&lt;/span&gt;
                            &lt;span class="nl"&gt;waitUntilDone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;// Process.&lt;/span&gt;
        &lt;span class="c1"&gt;// do it.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Finished.&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;performSelectorOnMainThread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dismissProgressAlert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                           &lt;span class="nl"&gt;withObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;
                        &lt;span class="nl"&gt;waitUntilDone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="c1"&gt;// Other finalizations.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;在实际使用中，带进度条的 alert view 大概长得是这样的：&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="progress_alert" src="https://blog.gocalf.com/images/2011/12/progress_alert.png" /&gt;
&lt;p class="caption"&gt;带进度条的 alert 窗口&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://discussions.apple.com/thread/1737797"&gt;UIProgressView in UIAlertView?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="程序开发"></category><category term="iOS Develop"></category></entry><entry><title>黎明公主攻略：第七章 天堂神殿的挽歌</title><link href="https://blog.gocalf.com/zelda-tp-ch7" rel="alternate"></link><published>2011-12-08T23:11:00+08:00</published><updated>2011-12-08T23:11:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-12-08:/zelda-tp-ch7</id><summary type="html">&lt;p class="first last"&gt;再次前去特尔玛的酒馆，得知夏德（Shad）也出去调查了，于是和阿雪等人谈话，再调查桌子上的地图，原来夏德最近去了卡卡里科村，于是前去找夏德了解最后一个镜子碎片的信息。&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;第七章 天堂神殿的挽歌（天空之城）&lt;/h2&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;海拉尔城&lt;/h3&gt;
&lt;p&gt;从时之迷宫出来后统治之杖会失去魔力。再次前去特尔玛的酒馆，得知夏德（Shad）也出去调查了，于是和阿雪等人谈话，再调查桌子上的地图，原来夏德最近去了卡卡里科村，于是前去找夏德了解最后一个镜子碎片的信息。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;卡卡里科村&lt;/h3&gt;
&lt;p&gt;林克在卡卡里科村南面雷那多的房子下面找到了夏德，他正在研究一座上古雕像，并且告诉林克，这个雕像肯定和空之居民有关，而伊莉娅的记忆里一定有关于这方面的消息，只要能让伊莉娅恢复记忆就一定能有所收获。回到雷那多的房间找他谈话，雷那多告诉林克自己或许有办法找回伊莉娅的记忆，不过必须先让林克帮自己送一封信到特尔玛的酒馆去。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;海拉尔城&lt;/h3&gt;
&lt;p&gt;回到特尔玛的酒馆，林克将雷那多的的信给特尔玛看了后，她表示自己也无法帮助伊莉娅恢复记忆，不过她知道有个人或许可以帮上忙，那就是住在城西的医生，另外她还给了林克一张医生欠钱的帐单，告诉林克把帐单给医生看了之后他就一定不会拒绝林克了。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_01.jpg"&gt;&lt;img alt="tp_ch07_01" src="https://blog.gocalf.com/images/2011/12/tp_ch07_01.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;特尔玛告诉林克医生的事情&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在城西找到医生，林克将帐单给医生看过后，他也表示这种事情他不能帮上忙，不过可以提供点线索给林克，那就是伊莉娅的木雕，把它给伊莉娅看过后说不定能帮助她想起点什么，把房间的箱子推开，林克变成狼形态利用感知嗅到木雕的味道，然后可以一路追踪气味，结果气味将林克引向了特尔玛的猫，猫告诉林克，之前确实是它拿了木雕，不过前不久一群城南出没的野狗将木雕抢走了，要是想找的话去找那些野狗拿吧。如果在夜晚林克到城南的旷野上去的话就可以见到那群野狗，战胜他们后就能得到木雕了。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_02.jpg"&gt;&lt;img alt="tp_ch07_02" src="https://blog.gocalf.com/images/2011/12/tp_ch07_02.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;医生看到了账单却也没能提供太多的帮助&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;卡卡里科村&lt;/h3&gt;
&lt;p&gt;林克回到卡卡里科村，将木雕给伊莉娅看，果然让她回忆起了一点点细节，而戈隆人认出了这个木雕来自于一个隐秘的隐士之村，并答应帮林克打通通往那里的道路，查看地图得到前往村子的具体位置，然后前往村子。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_03.jpg"&gt;&lt;img alt="tp_ch07_03" src="https://blog.gocalf.com/images/2011/12/tp_ch07_03.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;伊莉娅看到木雕，回忆出一些细节&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;隐士之村&lt;/h3&gt;
&lt;p&gt;来到了村子，林克却发现村里到处都充斥着兽人，首先要将这些兽人全部干掉。解决完总共 20 只兽人后，一个叫因帕兹的老妇人出现在了自己的房子外，将一个伊莉娅的符咒交给林克，并告诉他，这个东西一定可以帮助伊莉娅恢复记忆。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_04.jpg"&gt;&lt;img alt="tp_ch07_04" src="https://blog.gocalf.com/images/2011/12/tp_ch07_04.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;来到被兽人占领的隐士之村&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;卡卡里科村&lt;/h3&gt;
&lt;p&gt;林克带着伊莉娅的符咒回到卡卡里科村并将符咒给伊莉娅看了之后，伊莉娅果然完全恢复了记忆，她不但记起了和林克在一起的时候的事，也想起了关于天空城的一些事，但是她不是很清晰，不过她记得隐士之村的老妇人知道些关于天空城的具体情况。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_05.jpg"&gt;&lt;img alt="tp_ch07_05" src="https://blog.gocalf.com/images/2011/12/tp_ch07_05.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;伊莉娅终于恢复了记忆&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;隐士之村&lt;/h3&gt;
&lt;p&gt;林克再次回到隐士村，将支配者权杖给老妇人看，她确定林克就是传说中自己一直在等待的人，她告诉林克其实这个村子是很久以前海拉尔的一位贵族建立的，当时预言将来当这个世界出现危机的时候会有一位手持支配力量的勇士来到这里，而老妇人就是世代守护这里的隐士的后代，之后便将古代天空之书交给林克，并告诉书上记载了关于天空城的一切。但是林克看不懂上面的文字，于是将古代天空之书带回卡卡里科村并交给夏德看，夏德看到书后兴奋异常，然后对前面的古代雕像念起了咒语，却什么也没发生，不过他告诉林克要仔细研究下这本书，随后告诉林克这本只写了一部分，要想到天空之城，必须收集齐全部的天空之书才能知道去天空城的方法，并将所有失落在海拉尔大陆的古代天空之书的位置标记在了林克的地图上。而支配权杖此时也重新获得了力量。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_06.jpg"&gt;&lt;img alt="tp_ch07_06" src="https://blog.gocalf.com/images/2011/12/tp_ch07_06.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;夏德告诉林克需要收集到全部的古代天空之书&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;第一本：&lt;/strong&gt;第一本古代天空之书在南艾尔丁地区，就在从卡卡里科村出来朝左转不远的地方，有个山壁上有块石头，炸开后能看到一座上古雕像，用支配权杖将其移开林克得到第一本古代天空之书。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_07.jpg"&gt;&lt;img alt="tp_ch07_07" src="https://blog.gocalf.com/images/2011/12/tp_ch07_07.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;炸掉山壁上的石块，移开上古雕像，得到第一本古代天空之书&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;第二本：&lt;/strong&gt;到艾尔丁大桥北部的，就在桥东面就有一个上古雕像，用权杖移开得到第二本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三本：&lt;/strong&gt;第三本就在海拉尔城东出来沿路走的尽头的废墟处，操纵雕像放在雕像本来放置的柱子和旁边的看台中间，然后可以从跳台上跳过去取得。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_08.jpg"&gt;&lt;img alt="tp_ch07_08" src="https://blog.gocalf.com/images/2011/12/tp_ch07_08.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;在废墟看台附近得到第三本古代天空之书&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;第四本：&lt;/strong&gt;第四本在海利亚湖上大桥的北部，一个半高的山洞里，将雕像移下来后，再用飞爪上去，落在移下的雕像上再过去取得。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第五本：&lt;/strong&gt;在沙漠南部可以找到第五个上古雕像，移开后拿到第五本古代天空之书。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最后一本：&lt;/strong&gt;最后一本书在卖灯油的科洛那里朝右边的岔路进去可以找到，将雕像移出来到不远处地上的一个洞处还可以搭起一条通往上面的路，在米德娜的帮助下可以上去取得一块 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h37"&gt;心之碎片 37&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;卡卡里科村&lt;/h3&gt;
&lt;p&gt;找齐全部的古代天空之书后，林克将天空之书带回卡卡里科村村给夏德看，他会念出咒语让前面的雕像能被支配权杖操控，移开它后见到了一门冲天炮，此时与夏德谈话将他支出房间，然后在米德娜的帮助下将冲天炮传送到海利亚湖。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_09.jpg"&gt;&lt;img alt="tp_ch07_09" src="https://blog.gocalf.com/images/2011/12/tp_ch07_09.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;巨大的冲天炮，需要送到海利亚湖去维修&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;海利亚湖&lt;/h3&gt;
&lt;p&gt;和费尔谈话，他答应帮助林克修理冲天炮，不过需要 300 卢比，付钱以后，林克终于来到了天空之城。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_10.jpg"&gt;&lt;img alt="tp_ch07_10" src="https://blog.gocalf.com/images/2011/12/tp_ch07_10.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;费尔帮助修好了冲天炮，林克终于来到天空之城&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3&gt;天空之城迷宫&lt;/h3&gt;
&lt;div class="figure"&gt;
&lt;img alt="tp_ch07_11" src="https://blog.gocalf.com/images/2011/12/tp_ch07_11.jpg" /&gt;
&lt;p class="caption"&gt;天空之城迷宫第一层地图&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="tp_ch07_12" src="https://blog.gocalf.com/images/2011/12/tp_ch07_12.jpg" /&gt;
&lt;p class="caption"&gt;天空之城第二层地图&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="tp_ch07_13" src="https://blog.gocalf.com/images/2011/12/tp_ch07_13.jpg" /&gt;
&lt;p class="caption"&gt;天空之城第三层到第五层地图&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;来到天空城，林克在北边不远见到个池塘，水里有一个炸弹和卢比，西边的房间是欧库的商店，这里可以得到欧库。之后回到外面向北前进，要注意在起风的时候是有被吹下去的危险的，而且在起风的时候是不能用弓箭的，攻击门上面的机关可以打开大门，然后朝北进入房间 1。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 1：&lt;/strong&gt;注意地上的蓝色地砖，踩到后会掉下去，抓一只欧库可以方便过去，朝北面进入房间 2。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 2：&lt;/strong&gt;先去东面的门，出去到阳台朝右走，可以用飞爪抓藤条过去，并发现一个用陀螺仪的机关，打开后东面的桥会伸过来，过去后到房间 3。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_14.jpg"&gt;&lt;img alt="tp_ch07_14" src="https://blog.gocalf.com/images/2011/12/tp_ch07_14.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;利用飞抓抓住对面的藤条过去&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 3：&lt;/strong&gt;从右边用飞爪过去可以到对面取得小钥匙，然后返回房间 2，过桥后龙会把桥撞断，之后进房间 2 走西面的门出去。阳台左边又有一个陀螺仪机关，打开后会出现到房间 4 的桥，过去到房间 4。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_15.jpg"&gt;&lt;img alt="tp_ch07_15" src="https://blog.gocalf.com/images/2011/12/tp_ch07_15.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 4：&lt;/strong&gt;房间里有很多鼓风机，直接过去的话会被吹下去，首先去左边攻击状态转换开关关闭最里面的鼓风机，然后可以用穿钢之靴或者拿链子球通过第一个鼓风机，最后利用飞爪抓上藤条过第 2 个鼓风机，走房间西面的门到房间 5。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_16.jpg"&gt;&lt;img alt="tp_ch07_16" src="https://blog.gocalf.com/images/2011/12/tp_ch07_16.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;要小心不要被鼓风机吹下去&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 5：&lt;/strong&gt;在里面取得地图后返回房间 4，走西南的门到房间 6。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 6：&lt;/strong&gt;注意要在风停的时候才能往前跳，还要小心地板下藏着的敌人，之后朝房间西南移动到房间 7。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 7：&lt;/strong&gt;消灭掉房间内的所有怪后南面楼上的门会打开，用飞爪上去后再抓头顶的球状机关，可以将房间正中的鼓风机打开，抓一只欧库能飞到对面到房间 8。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_17.jpg"&gt;&lt;img alt="tp_ch07_17" src="https://blog.gocalf.com/images/2011/12/tp_ch07_17.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;抓住头顶的球状机关打开鼓风机&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 8：&lt;/strong&gt;进门后利用欧库和房间里的鼓风机，朝房间东北飞过墙壁到房间 8 的上半部分，这里还有一个球形机关，打开后会启动对面的鼓风机，然后可以利用其进入对面 2 楼，通过房间西北角的门到房间 9。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_18.jpg"&gt;&lt;img alt="tp_ch07_18" src="https://blog.gocalf.com/images/2011/12/tp_ch07_18.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;利用欧库和房间里的鼓风机，朝房间东北飞过墙壁到房间 8 的上半部分&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 9：&lt;/strong&gt;进门后处于房间的高层，下面有两个朝外吹的鼓风机，抓住一只欧库后向下跳，途中要注意两个鼓风机，一直朝最下层、最西面的门移动，除了用欧库，这里也可以用飞爪下去，之后进去房间 10 进行小 BOSS 战。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_19.jpg"&gt;&lt;img alt="tp_ch07_19" src="https://blog.gocalf.com/images/2011/12/tp_ch07_19.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;可以用欧库或者飞爪下去&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 10：&lt;/strong&gt;首先用飞爪拉下房间中的机关并穿上钢之靴令鼓风机停下，然后下去可以见到小 BOSS。小 BOSS 是一只机敏的龙人，普通情况下的弓箭、飞爪攻击都无法命中其，必须等到他准备攻击，也就是翅膀明显加快速度的时候，用飞爪把他抓过来攻击。之后他会到处乱飞，但是攻击方式不变，所以还是很好应对。战胜后去房间南边取得双飞爪（Double Clawshot）。然后从天花板上用双飞爪出去回到房间 9。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_20.jpg"&gt;&lt;img alt="tp_ch07_20" src="https://blog.gocalf.com/images/2011/12/tp_ch07_20.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;和小 BOSS——龙人——战斗&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 9：&lt;/strong&gt;利用双飞爪一路爬升，中途打开中间的球状开关，之后不要松手，否则门会复位，直接用双飞爪抓到门里面去，进入房间 11。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_21.jpg"&gt;&lt;img alt="tp_ch07_21" src="https://blog.gocalf.com/images/2011/12/tp_ch07_21.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;打开球状开关，然后直接利用飞爪进入打开的门里&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 11：&lt;/strong&gt;两边都有可以抓的地方，但是一旦抓上去后会慢慢滑落，所以要抓紧时间朝房间东面行动，出门后来到一座桥下方，这里利用下面的铁丝网朝桥东移动，途中注意先将铁丝网上的食人花用双飞爪打落，之后回到房间 2 东面的阳台上，这里可以用双飞爪抓天上直升机一样的植物通过断桥回到房间 3。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_22.jpg"&gt;&lt;img alt="tp_ch07_22" src="https://blog.gocalf.com/images/2011/12/tp_ch07_22.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;利用铁丝网向前移动，注意沿途的食人花&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 3：&lt;/strong&gt;利用双飞爪，从房间东面下到楼下，然后可以见到之前那种会滑落的机关，之后来到下面第三层的西面，朝西北方向用飞爪，注意天花板上的食人花要提前用飞爪打掉，之后攻击状态转换开关后进入大门，再用双飞爪一路向上回到东北的门进入房间 12。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_23.jpg"&gt;&lt;img alt="tp_ch07_23" src="https://blog.gocalf.com/images/2011/12/tp_ch07_23.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;攻击转换开关以便进入大门&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 12：&lt;/strong&gt;进门后遇到一个大型食人花，干掉后朝上用飞爪上去，到 2F 以后沿着边缘小心前进，需注意的是到尽头的一段路要抓住台沿爬过去，后面可以取得 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h27"&gt;心之碎片 27&lt;/a&gt;。然后再继续用飞爪向上爬，达最顶层后从南面的门到房间 13。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_24.jpg"&gt;&lt;img alt="tp_ch07_24" src="https://blog.gocalf.com/images/2011/12/tp_ch07_24.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;利用飞爪一路来到顶层&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 13：&lt;/strong&gt;利用空中的飞行植物一路朝西北方向前进，途中可以在最南面的平台上取得 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h28"&gt;心之碎片 28&lt;/a&gt;，然后进入西北的门到房间 14。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_25.jpg"&gt;&lt;img alt="tp_ch07_25" src="https://blog.gocalf.com/images/2011/12/tp_ch07_25.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;利用空中的飞行植物前进&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 14：&lt;/strong&gt;先从藤条上到房间上层，然后从右边沿着绳索一直到 2 层西面的门进入房间 15。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_26.jpg"&gt;&lt;img alt="tp_ch07_26" src="https://blog.gocalf.com/images/2011/12/tp_ch07_26.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 15：&lt;/strong&gt;关掉大型球状开关可关掉鼓风机并能取得大钥匙，然后从楼下关闭的鼓风机回到房间 2，这里暂时不要放掉飞爪，朝房间 2 北面门上的天花板处观察能发现机关，打开后会启动鼓风机并可以朝北面过去到达房间 16。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_27.jpg"&gt;&lt;img alt="tp_ch07_27" src="https://blog.gocalf.com/images/2011/12/tp_ch07_27.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;注意寻找鼓风机的机关&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 16：&lt;/strong&gt;这里首先会遇到两个龙人，战胜后将门上的状态转换开关打开，一直朝上可以上到最顶部见到最终 BOSS。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_28.jpg"&gt;&lt;img alt="tp_ch07_28" src="https://blog.gocalf.com/images/2011/12/tp_ch07_28.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;将转换开关打开&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;BOSS 战：&lt;/strong&gt;巨龙——阿戈洛克（Twilit Dragon—Argorok）&lt;/p&gt;
&lt;p&gt;首先向上爬到屋顶的平台，阿戈洛克会出现，第一阶段穿上钢之靴并抓它的尾部可以将其拽到地上并攻击其背后的水晶，几下之后阿戈洛克会飞到高处喷射火焰并且不再靠近林克，这时需要利用周围的几个柱子用飞爪朝上爬到最顶部，然后再向上抓飞行植物，之后阿戈洛克喷火时朝一个方向不停用飞爪移动到其背部，再用飞爪抓到背上攻击水晶，再几个回合之后，阿戈洛克会喷射两次火焰，注意在喷完第一次以后要反向用飞爪抓行到其背部进行攻击，最后击败阿戈洛克并取得第三块镜子碎片。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_29.jpg"&gt;&lt;img alt="tp_ch07_29" src="https://blog.gocalf.com/images/2011/12/tp_ch07_29.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;BOSS：巨龙——阿戈洛克（Twilit Dragon—Argorok）&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch07_30.jpg"&gt;&lt;img alt="tp_ch07_30" src="https://blog.gocalf.com/images/2011/12/tp_ch07_30.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;与巨龙战斗&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wii.tgbus.com/glmj/gl/200611/20061129114849.shtml"&gt;《塞尔达传说：黄昏公主》图文全攻略&lt;/a&gt;&amp;nbsp;by WiiBbs 攻研部
Szh、三代鬼彻、天堂的翅膀&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cngba.com/thread-16520313-1-1.html"&gt;《塞尔达传说 黄昏公主》完美攻略研究&lt;/a&gt; by www.cngba.com 鸡蛋&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="游戏"></category><category term="Twilight Princess"></category></entry><entry><title>黎明公主攻略：第六章 时间遗忘的裂缝</title><link href="https://blog.gocalf.com/zelda-tp-ch6" rel="alternate"></link><published>2011-12-01T19:53:00+08:00</published><updated>2011-12-01T19:53:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-12-01:/zelda-tp-ch6</id><summary type="html">&lt;p class="first last"&gt;回到海拉尔城，林克去特尔玛的酒馆了解信息，得知最近鲁斯尔（Rusl）外出了，林克和那群人谈话后调查地图知道鲁斯尔去了北法隆森林。&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;第六章 时间遗忘的裂缝（时之神殿）&lt;/h2&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;海拉尔城&lt;/h3&gt;
&lt;p&gt;回到海拉尔城，林克去特尔玛的酒馆了解信息，得知最近鲁斯尔（Rusl）外出了，林克和那群人谈话后调查地图知道鲁斯尔去了北法隆森林。随后林克回到雪山，在之前第一次见到亚托的地方可以和亚托进行一场滑雪比赛，胜利后能和亚塔进行比赛，再次获胜后还能得到一片 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h43"&gt;心之碎片 43&lt;/a&gt;。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch06_01.jpg"&gt;&lt;img alt="tp_ch06_01" src="https://blog.gocalf.com/images/2011/12/tp_ch06_01.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;林克打听鲁斯尔的去向&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;北法隆森林&lt;/h3&gt;
&lt;p&gt;林克在回到之前米德娜传送进神圣之森的位置见到了鲁斯尔，他告诉林克，在这里的深处有一座神殿，那里隐藏着一个秘密，并且还提供了一只金鸡（Golden Cucco）帮助林克进入神圣之森（利用金鸡往森之神殿门口的右边飞）。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch06_02.jpg"&gt;&lt;img alt="tp_ch06_02" src="https://blog.gocalf.com/images/2011/12/tp_ch06_02.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;鲁斯尔给林克一只金鸡&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;神圣之森&lt;/h3&gt;
&lt;p&gt;林克一路进入到森林深处并再次见到了那个提灯吹喇叭的小妖怪（Skull Kid），它又开始和林克玩捉迷藏，林克只好不停的找它并攻击以打开新的道路，不过这次他会藏得更隐蔽，第一次他躲到柱子后面，第二次他会站到水中间的一块岩石上，第三次他则躲到树上，这里林克需要先爬到高处才能在对面的树顶看到他，用弓把他打下来，林克还是依靠他的提灯发出的火光追踪他。随后来到先前与他战斗之地，取胜后来到之前得到征服者之剑的地方，把剑插回取剑的地方会打开通往时之神殿（Temple of Time）的路。出来后会出现五个暗影使者，林克先杀死其中三个以后，再迅速杀死另外两个即可顺利解决。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch06_03.jpg"&gt;&lt;img alt="tp_ch06_03" src="https://blog.gocalf.com/images/2011/12/tp_ch06_03.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;提灯吹喇叭的小妖怪把林克引到时之神殿前&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch06_04.jpg"&gt;&lt;img alt="tp_ch06_04" src="https://blog.gocalf.com/images/2011/12/tp_ch06_04.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;把剑插回取剑的地方，打开通往时之神殿（Temple of Time）的路&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;时之神殿迷宫&lt;/h3&gt;
&lt;p&gt;林克进入后直接走到一个可以插剑的地方，插进去后出现通往房间 1 的路。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="tp_ch06_05" src="https://blog.gocalf.com/images/2011/12/tp_ch06_05.jpg" /&gt;
&lt;p class="caption"&gt;时之神殿迷宫一至四层地图&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="tp_ch06_06" src="https://blog.gocalf.com/images/2011/12/tp_ch06_06.jpg" /&gt;
&lt;p class="caption"&gt;时之神殿迷宫五至八层地图&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 1：&lt;/strong&gt;进入房间 1，在米德娜的提示下切换狼形态并打开感知，发现门口旁边的上古铜像少了一座，但是目前并不知道雕像去了哪儿，在门前的台子上有一个无法破坏的上古铜壶，将它搬到另一边的台子并放到地上的机关上，随后会升起一个台阶，爬上去到路的尽头点亮两个灯座，就会出现箱子并得到一把小钥匙，用它可以打开南面的门并进入房间 2，回来后能得到这个迷宫的欧库。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch06_07.jpg"&gt;&lt;img alt="tp_ch06_07" src="https://blog.gocalf.com/images/2011/12/tp_ch06_07.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;把上古铜壶搬到台子地上的机关上&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 2：&lt;/strong&gt;房间正中有一个机关，搬个坛子放在上面可以打开门，南面的箱子里有箭，随后向西进第一道门后用箭把坛子射掉可通过第二道门，沿着路走上去后会遇见一个时之守卫，他的弱点在背部，干掉他后能取得这个迷宫的地图，将南面台子上的两个上古铜壶分别放到门左边的两个机关上可以将门打开，沿路可到房间 3。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch06_08.jpg"&gt;&lt;img alt="tp_ch06_08" src="https://blog.gocalf.com/images/2011/12/tp_ch06_08.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;将南面台子上的两个上古铜壶分别放到门左边的两个机关上可以将门打开&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 3：&lt;/strong&gt;走左边沿旋梯一路上升，用陀螺仪通过中间的断裂处到顶部可以见到一个电梯，转动中间的把手让电梯降到最底部，将底部的上古铜壶搬到电梯上并运到上层，放到南边的机关上，再将西边的另一个铜壶放到另一边，这时要迅速站到前面的白色墙壁上，之后墙壁会升起将林克送上去，接着向南进入房间 4。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch06_09.jpg"&gt;&lt;img alt="tp_ch06_09" src="https://blog.gocalf.com/images/2011/12/tp_ch06_09.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;将底部的上古铜壶搬到电梯上并运到上层，放到南边的机关上，再将西边的另一个铜壶放到另一边&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 4：&lt;/strong&gt;这里又有两个时之守卫，将他们解决以后会出现一个箱子，里面有把小钥匙，之后回到房间 3 的上部，走北边开门进入房间 5。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 5：&lt;/strong&gt;这里有一个攻击后转换状态的机关，每攻击一次会转换房间内墙壁的位置，先攻击一次将第一道墙壁移开，之后进去用弓攻击使第 2 道墙壁移开，前面的箱子有指南针，随后再攻击一次后朝东面前进。上楼后又有一个这种开关，用弓射击使其不断转换状态后朝东面通过，沿路前进到房间 6。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 6：&lt;/strong&gt;去楼上，用上古铜壶帮忙通过天平后继续前进到房间 7。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 7：&lt;/strong&gt;进门后朝西边前进通过一条走廊来到陷阱房间，注意躲避陷阱，箱子里有小钥匙，在电网前的机关处，可到旁边取一个铜壶放到陷阱上，然后继续前进，干掉两个时之守卫后会出现新的路，爬上去打开锁的门后进入房间 8。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch06_10.jpg"&gt;&lt;img alt="tp_ch06_10" src="https://blog.gocalf.com/images/2011/12/tp_ch06_10.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;这个房间里有陷阱&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 8：&lt;/strong&gt;这里是小 BOSS 铁甲战士，小 BOSS 也分两个阶段，首先要先攻击他剥落外面的盔甲。等到盔甲全部剥落后他会丢掉盾牌进行白刃战，总的来说难度不高，两个阶段都可以用背后斩进行有效攻击。胜利后可以在箱子里取得支配权杖（Dominion Rod）。作用是将其光球打入上古雕像和铜壶后可以让其按照林克的行动而行动。在支配权杖上方就是失踪的上古雕像，用支配权杖将其取下后带到门口的钟下就会被传送回房间 7，随后进入房间 7。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch06_11.jpg"&gt;&lt;img alt="tp_ch06_11" src="https://blog.gocalf.com/images/2011/12/tp_ch06_11.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;与小 BOSS 铁甲战士战斗&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 7：&lt;/strong&gt;操纵雕像破坏掉栅栏继续前进，另外如果找不到雕像可以看地图，雕像会以红点的形式标记出来。先搬个坛子放到中间的机关上令墙壁降下，待林克和雕像上去后再将坛子破坏后下去到陷阱房，这里可以让雕像先过去踩下机关关闭陷阱后林克再过。那些陷阱都可以用雕像摧毁，带到地上有许多旋转陀螺的房间，用雕像将中间的雕塑摧毁会出现机关，将雕像移到最南边后，再用支配权杖把两边的铜壶取下一个放到机关上令雕像升起，随后去房间 6。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 6：&lt;/strong&gt;先把雕像移到天平上，把左边天平上的铜壶扔到右边，再从楼下上去到另一边，墙壁上的铜壶用支配权杖取下两个放到天平上，然后让雕像过来，接着再将 4 个铜壶扔到对面后林克离开天平，使天平平衡后将雕像移动到楼下的钟处，随后，再到升到最高的天平上，钟的正上方有可以抓的地方，用飞爪上去后再利用陀螺仪到房间 9。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch06_12.jpg"&gt;&lt;img alt="tp_ch06_12" src="https://blog.gocalf.com/images/2011/12/tp_ch06_12.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;利用支配权杖控制雕像移动来完成任务&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 9：&lt;/strong&gt;解决掉房间里的怪后用飞爪抓到上层，然后将楼下的壳抓上来，再加上本来的两个铜壶，压在四个机关上可以打开楼下的栅栏取得大钥匙，接着回房间 5。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 5：&lt;/strong&gt;房间 5 的墙壁可以用雕像全部破坏掉，另外让雕像在里面踩下机关关闭电网后可以取得 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h24"&gt;心之碎片 24&lt;/a&gt;，随后将雕像带回楼下的钟处，传送回房间 3。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch06_13.jpg"&gt;&lt;img alt="tp_ch06_13" src="https://blog.gocalf.com/images/2011/12/tp_ch06_13.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 3：&lt;/strong&gt;先去房间 4，拿一个铜壶扔到最左下的走道上去，接着再用支配权杖将其移动到走道尽头的机关上，然后把对面对称位置的铜壶也移到尽头的机关上可以打开隐藏箱子并得到 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h25"&gt;心之碎片 25&lt;/a&gt;。回到房间 3 将升降梯转到最高处把雕像移过来，接着将升降梯转到最下层，消灭掉所有的小蜘蛛后电网会自动关闭，然后再将雕像移动到 1 楼把栅栏破坏，其中另一边的栅栏后有灵魂灯怪，最后将雕像传送回房间 2。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 2：&lt;/strong&gt;用飞爪通过第一道栏杆后可以控制雕像，接着一直将其带到尽头的钟处，然后进入房间 1。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 1：&lt;/strong&gt;将雕像放回到门的另一边后能打开北面的门，随后可以进入房间 10。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch06_14.jpg"&gt;&lt;img alt="tp_ch06_14" src="https://blog.gocalf.com/images/2011/12/tp_ch06_14.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;让雕像归位便可打开门&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 10：&lt;/strong&gt;注意躲避陷阱一直朝北面移动，到机关前面，将一个铜壶扔过去并用支配权杖控制使其打开第一道门，随后再操控让其离开并打开第 2 道门，之后可以进入 BOSS 房间。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch06_15.jpg"&gt;&lt;img alt="tp_ch06_15" src="https://blog.gocalf.com/images/2011/12/tp_ch06_15.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;注意躲避陷阱&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;BOSS 战：&lt;/strong&gt;蜘蛛怪——阿摩戈玛（Twilit Arachnid—Armogohma）&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/12/tp_ch06_16.jpg"&gt;&lt;img alt="tp_ch06_16" src="https://blog.gocalf.com/images/2011/12/tp_ch06_16.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;BOSS：蜘蛛怪——阿摩戈玛（Twilit Arachnid—Armogohma）&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;阿摩戈玛会在天花板上用眼睛喷火攻击林克，只有在他喷火时，眼睛才会张开，利用这个时机用弓箭攻击其眼睛会让它掉下来，然后迅速切换成支配权杖，并控制离它最近的一个巨型上古雕像对阿摩戈玛攻击，之后阿摩戈玛还会放出小蜘蛛来干扰林克，可以先解决掉小蜘蛛后再处理阿摩戈玛，3 次攻击后阿摩戈玛就会被消灭，但是他的眼睛仍然可生长出新的触手，不过此时他的威力已经大大减弱了，只需要用弓再直接攻击三次后就可以消灭掉。林克也取得了第二块镜子碎片。&lt;/p&gt;
&lt;p&gt;此刻米德娜感觉到黑暗力量已经越来越强大，敦促林克赶紧找到最后一片镜子碎片以尽快进入黎明世界阻止赞特的邪恶计划。之后会传送到神殿门口，先别急着离开，到下面的房间的楼梯旁边，这里有两座上古雕像，用支配权杖控制令其出来后，左边是一个鬼魂之魂，右边则是一片 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h26"&gt;心之碎片 26&lt;/a&gt;，拿到后就离开时之神殿返回海拉尔城吧。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wii.tgbus.com/glmj/gl/200611/20061129114849.shtml"&gt;《塞尔达传说：黄昏公主》图文全攻略&lt;/a&gt;&amp;nbsp;by WiiBbs 攻研部
Szh、三代鬼彻、天堂的翅膀&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cngba.com/thread-16520313-1-1.html"&gt;《塞尔达传说 黄昏公主》完美攻略研究&lt;/a&gt; by www.cngba.com 鸡蛋&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="游戏"></category><category term="Twilight Princess"></category></entry><entry><title>iOS 隐藏系统状态栏</title><link href="https://blog.gocalf.com/iphone-dev-hide-status-bar" rel="alternate"></link><published>2011-11-30T14:45:00+08:00</published><updated>2011-12-02T13:01:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-11-30:/iphone-dev-hide-status-bar</id><summary type="html">&lt;p class="first last"&gt;最近在写 iPhone 上的程序，第一次在 Mac 下进行开发，也是第一次写手机上的程序，虽然之前看了少许相关的书籍，但在开发的过程中还是遇到了很多的问题。在这个系列中记录一些遇到的实际的问题，方便淡忘了之后再次查阅。今天的问题是怎么在 App 中隐藏系统状态栏（Status Bar）。&lt;/p&gt;
</summary><content type="html">
&lt;p&gt;最近在写 iPhone 上的程序，第一次在 Mac 下进行开发，也是第一次写手机上的程序，虽然之前看了少许相关的书籍，但在开发的过程中还是遇到了很多的问题。在这个系列中记录一些遇到的实际的问题，方便淡忘了之后再次查阅。&lt;/p&gt;
&lt;p&gt;今天的问题是怎么在 App 中隐藏系统状态栏（Status Bar）。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;以下内容适用于 iOS 3.2+。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;一、始终隐藏状态栏&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果在 App 中需要状态栏一直是隐藏着的，可以在 &lt;tt class="docutils literal"&gt;&amp;lt;YOUR_APP&amp;gt;AppDelegate&lt;/tt&gt; 的 &lt;tt class="docutils literal"&gt;application:didFinishLaunchingWithOptions:&lt;/tt&gt; 函数中进行设置，比如下面这段示意代码可以让状态栏以淡出的方式隐藏起来：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;application:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;UIApplication&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;application&lt;/span&gt; &lt;span class="nf"&gt;didFinishLaunchingWithOptions:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSDictionary&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;launchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Override point for customization after application launch.&lt;/span&gt;
&lt;span class="hll"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="nl"&gt;setStatusBarHidden&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;NO&lt;/span&gt; &lt;span class="nl"&gt;withAnimation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;UIStatusBarAnimationFade&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/span&gt;
    &lt;span class="c1"&gt;// Add the view controller's view to the window and display.&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="nl"&gt;addSubview&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;viewController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="n"&gt;makeKeyAndVisible&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;相关的方法或属性是 &lt;a class="reference external" href="http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIApplication_Class/Reference/Reference.html"&gt;UIApplication&lt;/a&gt; 的：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIApplication_Class/Reference/Reference.html#//apple_ref/occ/instm/UIApplication/setStatusBarHidden:withAnimation:"&gt;setStatusBarHidden:withAnimation:&lt;/a&gt;（iOS 3.2+）&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplication_Class/Reference/Reference.html#//apple_ref/occ/instp/UIApplication/statusBarHidden"&gt;statusBarHidden&lt;/a&gt;（iOS 2.0+）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外还有一个方法 &lt;a class="reference external" href="http://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplication_Class/DeprecationAppendix/AppendixADeprecatedAPI.html#//apple_ref/occ/instm/UIApplication/setStatusBarHidden:animated:"&gt;setStatusBarHidden:animated:&lt;/a&gt;，已经不推荐使用了（deprecated
in iOS 3.2）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="app"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;二、App 启动时就隐藏状态栏&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;用了上面的方法之后，App 在运行过程中，状态栏确实被隐藏起来了，但是我发现在 App 启动的那个瞬间，还是可以看到状态栏的，然后一闪即过。虽然时间很短暂，看着还是很不舒服。为了让状态栏从启动的时候就隐藏起来，可以修改 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;YOUR_APP&amp;gt;-Info.plist&lt;/span&gt;&lt;/tt&gt;。如果在 Xcode 中修改，在根结点 Infomation
Property List 下面新加一项 “Status bar is initially
hidden”（不用手动输入，可以直接在下拉菜单中选取）。这是个 BOOL 类型的键值，将 Value 栏中的复选框勾选上即可。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="status_bar_initially_hidden" src="https://blog.gocalf.com/images/2011/11/status_bar_initially_hidden.png"/&gt;
&lt;p class="caption"&gt;在 Info.plist 中设置状态栏为隐藏&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;也可以以文本方式修改，在根节点中添加 UIStatusBarHidden 键值，值设为 true 即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;UIStatusBarHidden&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;三、在运行过程中隐藏或显示状态栏&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;与第一段中的方法一样，只是可以在任何地方调用。只要利用 UIApplication 类的静态方法 &lt;a class="reference external" href="http://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplication_Class/Reference/Reference.html#//apple_ref/occ/clm/UIApplication/sharedApplication"&gt;sharedApplication&lt;/a&gt; 拿到 application 实例即可。&lt;/p&gt;
&lt;/div&gt;
</content><category term="程序开发"></category><category term="iOS Develop"></category></entry><entry><title>七阶魔方花样：5x5 数独</title><link href="https://blog.gocalf.com/5x5-sudoku-in-vcube7" rel="alternate"></link><published>2011-11-26T15:48:00+08:00</published><updated>2011-11-26T15:49:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-11-26:/5x5-sudoku-in-vcube7</id><summary type="html">&lt;p class="first last"&gt;之前有一段时间特别喜欢玩魔方，从二阶到七阶，在桌子上摆了长长的一排。后来听说九阶和十一阶也有卖的了，心中甚是痒痒，可惜囊中羞涩啊。特别喜欢高阶魔方的一个原因，就是它们每个面上的小方格数很多（就像人们都喜欢高分辨率的显示屏一样），可以玩的花样也就多了很多。今天分享一下我的一个七阶魔方花样作品：混乱中的秩序——五阶数独。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;之前有一段时间特别喜欢玩魔方，从二阶到七阶，在桌子上摆了长长的一排。后来听说九阶和十一阶也有卖的了，心中甚是痒痒，可惜囊中羞涩啊。&lt;/p&gt;
&lt;p&gt;特别喜欢高阶魔方的一个原因，就是它们每个面上的小方格数很多（就像人们都喜欢高分辨率的显示屏一样），可以玩的花样也就多了很多。今天分享一下我的一个七阶魔方花样作品：混乱中的秩序——五阶数独。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;看一看照片，你能发现其中的规律么？&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="cube7_corner" src="https://blog.gocalf.com/images/2011/11/cube7_corner.png" /&gt;
&lt;p class="caption"&gt;七阶魔方花样（你能看出其中的规律么？）&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;如果边角处看不清楚，那再来看看六个面的特写：&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="cube7_face" src="https://blog.gocalf.com/images/2011/11/cube7_face.png" /&gt;
&lt;p class="caption"&gt;七阶魔方花样，六个面特写——混乱中亦有规律&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;是不是有点儿意思？&lt;/p&gt;
&lt;p&gt;规律是这样的，一个面周围一圈棱边的小方格颜色是一样的，六个面六种颜色。中间五乘五的二十五个小方格，恰好包含除了棱边之外的五种颜色，且每个颜色恰好出现五次。并且每个横行、竖列和两条对角线上的五个方格中都不出现重复颜色。这是不是跟五阶 &lt;a class="reference external" href="http://zh.wikipedia.org/wiki/%E5%AF%B9%E8%A7%92%E7%BA%BF%E6%95%B0%E7%8B%AC"&gt;对角线数独&lt;/a&gt; 非常像呢？&lt;/p&gt;
&lt;p&gt;怎么设计这样的花样？关键在于，什么样的花样可以用魔方表现出来？&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="cube7_blocks" src="https://blog.gocalf.com/images/2011/11/cube7_blocks.png" /&gt;
&lt;p class="caption"&gt;七阶魔方面块的不同位置&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;上面这张图是七阶魔方的一个面的示意。由于我的这个花样方案中不用考虑棱块和角块，再除去不会动的面心，剩下的 24 个方格由于旋转对称性可以分成四个等价的分区（图中用四种颜色表示）。每个分区中都有六个不同的位置，用不同的字母表示。根据魔方的运动规律，不同字母位置的方块是永远都不会互换的，就是说字母 A 永远不会跑到其他字母所在的位置去；但是任意两个（也可以是不同面的）相同字母位置的方块都是可以互换的（只考虑颜色的话，可以做到互换后不改变任何其他方块）。每个面都有六种不同的字母，每个字母出现四次。因此只要设计出来的花样满足：“每个字母在六个面中总共对应 4
* 6 =
24 个方格，在这些方格中每种颜色都恰好出现 4 次”，那这种花样就一定可以转的出来。&lt;/p&gt;
&lt;p&gt;接着来设计花样，先找一个五阶对角线数独的分布，用下面这段随意写出的 Python 代码就可以搞定。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;FillBoard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xy&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xy&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
  &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xy&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Find a possible solution.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

  &lt;span class="n"&gt;existValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;existValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;existValues&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;union&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;xx&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
  &lt;span class="n"&gt;existValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;existValues&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;union&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;yy&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;yy&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;existValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;existValues&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;union&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;xx&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;existValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;existValues&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;union&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;xx&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;

  &lt;span class="n"&gt;validValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;existValues&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;validValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;validValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;FillBoard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xy&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;GenerateBoard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;FillBoard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;No solution.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt;

&lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GenerateBoard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;用程序找到第一组解是：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1, 2, 3, 4, 5]
[2, 4, 5, 3, 1]
[5, 3, 2, 1, 4]
[3, 1, 4, 5, 2]
[4, 5, 1, 2, 3]
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;下面来确定每个数字在每一面所对应的颜色。首先六个面的面心是不能动的，因此每个面的 2 号颜色就都确定了。接着要考虑每个面的底色（就是棱块和角块的颜色），这个颜色不能随便选，要考虑魔方六个面的位置关系。我所选定的方案是，面心色蓝、红、绿、橙、黄、黑分别的对应于棱角色黑、蓝、黄、绿、橙、红。最后给每个面分配第 1、3、4、5 号颜色，稍微注意一下限制条件就好了。最后得到六个面的配色方案（程序中的 W 对应于黑色）：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ApplyColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;newboard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;newboard&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;DrawBoard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;allcolors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;B Center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;R&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;O&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;W&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;R Center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;G&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;R&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;W&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;G Center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;O&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;G&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;R&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;W&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;O Center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;G&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;O&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;W&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Y Center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;R&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;O&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;G&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;W Center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;R&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;W&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;O&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;G&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;allcolors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Colors:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;colorboard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ApplyColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;DrawBoard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colorboard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;最后一步就是纯体力活——转魔方。这里就不详细说了，基本的过程是先把棱块和角块转好，最后就可以随意调换每个面中部的颜色了。因为图案看起来乱乱的，转的时候很容易忘记哪边已经转好哪边还没转，只能是小心仔细慢慢进行。&lt;/p&gt;
</content><category term="头脑风暴"></category><category term="Rubic Cube"></category><category term="Sudoku"></category></entry><entry><title>计算斐波纳契数，分析算法复杂度</title><link href="https://blog.gocalf.com/calc-fibonacci" rel="alternate"></link><published>2011-11-22T20:34:00+08:00</published><updated>2012-12-04T17:00:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-11-22:/calc-fibonacci</id><summary type="html">&lt;p class="first last"&gt;问题描述：Fibonacci 数（Fibonacci Number）的定义是：F(n) = F(n - 1) + F(n - 2)，并且 F(0) = 0，F(1) = 1。对于任意指定的整数 n（n &amp;gt;= 0），计算 F(n)，并分析算法的时间、空间复杂度。&lt;/p&gt;
</summary><content type="html">
&lt;p&gt;问题描述：Fibonacci 数（&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Fibonacci_number"&gt;Fibonacci Number&lt;/a&gt;）的定义是：F(n) = F(n -
1) + F(n - 2)，并且 F(0) = 0，F(1) = 1。对于任意指定的整数 n（n ≥
0），计算 F(n) 的精确值，并分析算法的时间、空间复杂度。&lt;/p&gt;
&lt;p&gt;假设系统中已经提供任意精度长整数的运算，可以直接使用。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;这其实是个老生常谈的问题了，不过可能在复杂度分析的时候，很多人忽略了一些事情。另外这个问题恰好有几种复杂度迥异的算法，在刚刚介绍完 &lt;a class="reference external" href="https://blog.gocalf.com/algorithm-complexity-and-master-theorem"&gt;算法复杂度&lt;/a&gt; 之后，正好来直观地理解一下。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;一、递归法&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一个看起来很直观、用起来很恐怖的算法就是递归法。根据 Fibonacci 的递推公式，对于输入的 n，直接递归地调用相同的函数分别求出 F(n
- 1) 和 F(n -
2)，二者相加就是结果。递归的终止点就是递推方程的初值，即 n 取 0 或 1 的时候。&lt;/p&gt;
&lt;p&gt;程序（in
Python）写出来那也是相当的简洁直观（为了跟后面的程序区分开来，这里取名 &lt;tt class="docutils literal"&gt;SlowFibonacci&lt;/tt&gt;）。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;SlowFibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'invalid n'&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;  &lt;span class="c1"&gt;# F(0) = 0, F(1) = 1&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;SlowFibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;SlowFibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;这个算法的时间复杂度有着跟 Fibonacci 类似的递推方程：T(n) = T(n - 1) + T(n
- 2) + O(1)，很容易得到 &lt;strong&gt;T(n) = O(1.618 ^
n)&lt;/strong&gt;（1.618 就是黄金分割，&lt;span class="math"&gt;\((1+\sqrt5)/2\)&lt;/span&gt;）。空间复杂度取决于递归的深度，显然是 &lt;strong&gt;O(n)&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;二、递推法&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;虽然只是一字之差，但递推法的复杂度要小的多。这个方法就是按照递推方程，从 n
= 0 和 n =
1 开始，逐个求出所有小于 n 的 Fibonacci 数，最后就可以算出 F(n)。由于每次计算值需要用到前两个 Fibonacci 数，更小的数就可以丢弃了，可以将空间复杂度降到最低。算法如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;NormFibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'invalid n'&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# F(0), F(1)&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;显然时间复杂度是 &lt;strong&gt;O(n)&lt;/strong&gt;，空间复杂度是 &lt;strong&gt;O(1)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;比较一下递归法和递推法，二者都用了分治的思想——把目标问题拆为若干个小问题，利用小问题的解得到目标问题的解。二者的区别实际上就是普通分治算法和动态规划的区别。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;三、矩阵法&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;算 Fibonacci 数精确值的最快的方法应该就是矩阵法，看过的人都觉得这个方法很好。如果你跟我一样，曾经为记住这个方法中的矩阵而烦恼，那今天就来看看怎么进行推导。其实方法非常简单，想清楚了也就自然而然地记住了。&lt;/p&gt;
&lt;p&gt;我们把 Fibonacci 数列中相邻的两项：F(n) 和 F(n -
1) 写成一个 2x1 的矩阵，然后对其进行变形，看能得到什么：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{bmatrix}F_n\\F_{n-1}\end{bmatrix}
=\begin{bmatrix}F_{n-1}+F_{n-2}\\F_{n-1}\end{bmatrix}
=\begin{bmatrix}1\times F_{n-1}+1\times F_{n-2}\\1\times F_{n-1}+0\times F_{n-2}\end{bmatrix}
=\begin{bmatrix}1&amp;amp;1\\1&amp;amp;0\end{bmatrix}\times\begin{bmatrix}F_{n-1}\\F_{n-2}\end{bmatrix}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;是不是非常自然呢？把等式最右边继续算下去，最后得到：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{bmatrix}F_n\\F_{n-1}\end{bmatrix}
=\begin{bmatrix}1&amp;amp;1\\1&amp;amp;0\end{bmatrix}^{n-1}\times\begin{bmatrix}F_{1}\\F_{0}\end{bmatrix}
=\begin{bmatrix}1&amp;amp;1\\1&amp;amp;0\end{bmatrix}^{n-1}\times\begin{bmatrix}1\\0\end{bmatrix}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;因此要求 F(n)，只要对这个二阶方阵求 n -
1 次方，最后取结果方阵第一行第一列的数字就可以了。&lt;/p&gt;
&lt;p&gt;看起来有点儿化简为繁的感觉，但关键点在于，幂运算是可以二分加速的。设有一个方阵 a，利用分治法求 a 的 n 次方，有：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
a^n=\begin{cases}
a^{n/2}\times a^{n/2}&amp;amp;,\text{ if }x\text{ is even}\\
a^{(n-1)/2}\times a^{(n-1)/2}\times a&amp;amp;,\text{ if }x\text{ is odd}
\end{cases}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;可见复杂度满足 T(n) = T(n / 2) + O(1)，根据 &lt;a class="reference external" href="https://blog.gocalf.com/algorithm-complexity-and-master-theorem"&gt;Master 定理&lt;/a&gt; 可得：T(n) =
O(log n)。&lt;/p&gt;
&lt;p&gt;在实现的时候，可以用循环代替递归实现这里的二分分治，好处是降低了空间复杂度（用递归的话，空间复杂度为 O(log
n)）。下面的 Python 程序直接利用的 numpy 库中的矩阵乘法（当然这个库也实现了矩阵的幂运算，我把它单独写出来是为了强调这里的分治算法）。另外如果不用第三方库，我也给出了矩阵乘法的简单实现。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Using numpy Library&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;MatrixPower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'invalid n'&lt;/span&gt;
  &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
  &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;FastFibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'invalid n'&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;  &lt;span class="c1"&gt;# F(0) = 0, F(1) = 1&lt;/span&gt;
  &lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MatrixPower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;ul class="simple"&gt;
&lt;li&gt;Without numpy Library&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;DotProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'x and y must have the same length'&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;MatrixMultiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="c1"&gt;# x is a m*a matrix, y is a a*n matrix.&lt;/span&gt;
  &lt;span class="c1"&gt;# x * y is a m*n matrix.&lt;/span&gt;
  &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;

  &lt;span class="c1"&gt;# transpose y&lt;/span&gt;
  &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

  &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;DotProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;MatrixPower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'invalid n'&lt;/span&gt;
  &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
  &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MatrixMultiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MatrixMultiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;FastFibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'invalid n'&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;  &lt;span class="c1"&gt;# F(0) = 0, F(1) = 1&lt;/span&gt;
  &lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
  &lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MatrixPower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;二阶方阵相乘一次可以看成是常数时间（虽然这个常数会比较大），因此整个算法的时间复杂度是 &lt;strong&gt;O(log
n)&lt;/strong&gt;，空间复杂度是 &lt;strong&gt;O(1)&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;四、运行时间大比拼&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;至此，我们得到的时间复杂度分别是 O(1.618 ^ n)、O(n) 和 O(log
n) 的算法，让我们来直观地比较比较它们。&lt;/p&gt;
&lt;p&gt;用 Python 的 timeit 模块对以上三个算法的运行时间进行了测量，记录了每个算法对于不同的 n 的每千次运算所消耗的时间（单位是秒），部分数据记录在 &lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/11/fibonacci_data.zip"&gt;fibonacci_data&lt;/a&gt;。利用 Mathematica 可以很方便地对这些数据进行拟合，对于较小的 n，用三个复杂度表达式分别去拟合，得到的效果都非常好。尤其值得注意的是，对于第一个算法，我用 a
* b ^ n 去拟合，结果得到 b 等于 1.61816，这与黄金分割数的正确值相差无几。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;递归法拟合结果：0.000501741 * 1.61816 ^ n，RSquare = 0.999993。&lt;/li&gt;
&lt;li&gt;递推法拟合结果：0.000788421 + 0.000115831 * n，RSquare = 0.999464。&lt;/li&gt;
&lt;li&gt;矩阵法拟合结果：-0.0114923 + 0.0253609 log(n)，RSquare = 0.986576。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下图是 n &amp;lt;= 35 时，三种算法的千次运行耗时比较。其中红色为 O(1.618 ^
n) 的递归法；蓝色为 O(n) 的递推法；绿色为 O(log
n) 的矩阵法。散点为实际测量到的运行时间，实线为拟合方程的曲线。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="compare_a" src="https://blog.gocalf.com/images/2011/11/compare_a.png"/&gt;
&lt;p class="caption"&gt;三种算法的运行时间比较&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;当 n &amp;gt;
10 的时候，指数时间就已经超出画面范围了。另外在这张图里，身为对数时间复杂度的矩阵法似乎没有任何优势，其耗时远远高于线性时间复杂度的递推法。这是因为 n 还不够大，体现不出 log(n) 的优势。在考虑更大的 n 之前，先来看看指数时间复杂度会增大到什么程度。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="compare_b" src="https://blog.gocalf.com/images/2011/11/compare_b.png"/&gt;
&lt;p class="caption"&gt;三种算法的运行时间比较（对数坐标轴）&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;五、大整数情况下的复杂度&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python 内置了大整数支持，因此上面的程序都可以直接接受任意大的 n。当整数在 32 位或 64 位以内时，加法和乘法都是常数时间，但大整数情况下，这个时间就不能忽略了。&lt;/p&gt;
&lt;p&gt;先来看一下 Fibonacci 数的二进制位数。我们知道 Fibonacci 数的通项公式是：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
F_n=\frac{1}{\sqrt5}\left(\frac{1+\sqrt5}{2}\right)^n-\frac{1}{\sqrt5}\left(\frac{1-\sqrt5}{2}\right)^n
\end{equation*}
&lt;/div&gt;
&lt;p&gt;当 n 充分大（其实都不需要很大）的时候，第二项就可以忽略不计了。把第一项对 2 取对数，就可以得到 Fibonacci 数的二进制位数的近似表达式，大概是 &lt;span class="math"&gt;\(\log_2{1.618}\times n-0.5\log_2{5}=\log_2{1.618}\times n-1.161=O(n)\)&lt;/span&gt;。由此可以算出，F(47) 是 32 位无符号整数可以表达的最大的 Fibonacci 数，F(93) 是 64 位无符号整数可以表达的最大的 Fibonacci 数。上面图中的 n 在 36 以内，不需要动用大整数运算，复杂度也比较符合之前的结论。但对于更大的 n，之前的复杂度就不再适用了。&lt;/p&gt;
&lt;p&gt;指数复杂度的算法就不管了，还不等用到大整数，它就已经慢到不行了。&lt;/p&gt;
&lt;p&gt;来看看 O(n) 时间复杂度的递推法。每次递推的时候都要计算两个 Fibonacci 数之和，第 i 次运算时，这两个 Fibonacci 数分别有 O(i) 个二进制位，完成加法需要 O(i) 的时间。因此总的时间大约是：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\sum_{i=1}^n{O(i)}=O(n^2)
\end{equation*}
&lt;/div&gt;
&lt;p&gt;可见对于很大的 n，递推法的时间复杂度实际上是 &lt;strong&gt;O(n ^
2)&lt;/strong&gt; 的，空间复杂度是 &lt;strong&gt;O(n)&lt;/strong&gt; 用来存储 Fibonacci 数的各个二进制位。&lt;/p&gt;
&lt;p&gt;再看矩阵法，注意到矩阵运算中有乘法，两个长度为 n 的大整数相乘，传统算法是 O(n
^ 2) 时间复杂度，较好的 Karatsuba 算法是 O(n ^ (log 3 / log
2)) 时间，更快的快速傅立叶变换法是 O(n log n) 时间。Python
2.5 中使用的是 Karatsuba 算法（Python
3 里面似乎是快速傅立叶变换法）（参见 &lt;a class="reference external" href="http://www.endless-loops.com/2011/01/python%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-%E4%B9%8B-%E5%A4%A7%E6%95%B4%E6%95%B0%E4%B9%98%E6%B3%95-378.html"&gt;Python 源码中的算法分析 之 大整数乘法&lt;/a&gt;）。以 Karatsuba 算法为例，矩阵法的时间复杂度递推方程为：&lt;span class="math"&gt;\(T(n)=T(n/2)+O(n^{\log_2{3}})\)&lt;/span&gt;，应用 &lt;a class="reference external" href="https://blog.gocalf.com/algorithm-complexity-and-master-theorem"&gt;Master 定理&lt;/a&gt; 求得 &lt;span class="math"&gt;\(T(n)=O(n^{\log_2{3}})\)&lt;/span&gt;。因此对于很大的 n，矩阵法的时间复杂度为 &lt;strong&gt;O(n
^ 1.585)&lt;/strong&gt;，空间复杂度 &lt;strong&gt;O(n)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;利用 Mathematica 对大 n 情况下这两种算法每千次运行时间进行拟合，分别得到：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;递推法大整数拟合结果：0.0131216 + 0.000102101 * n + 2.44765 * 10 ^
-7 * n ^ 2，RSquare = 0.999482。&lt;/li&gt;
&lt;li&gt;矩阵法大整数拟合结果：0.171487 + 9.74496 * 10 ^ -7 * n ^
1.51827，RSquare = 0.998395。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看一下 n 在 4000 以内时，两种复杂度的对比情况：&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="compare_c" src="https://blog.gocalf.com/images/2011/11/compare_c.png"/&gt;
&lt;p class="caption"&gt;递推法（蓝色）与矩阵法（绿色）运行时间比较（大整数）&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;从图中可以看出，递推法的增长速度也是很快的，当 n 增大到 60 多的时候，它的运行时间就超过矩阵法了。矩阵法的增长速度非常慢，看起来像是线性的，让我们把 n 调的更大来看一下。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="compare_d" src="https://blog.gocalf.com/images/2011/11/compare_d.png"/&gt;
&lt;p class="caption"&gt;矩阵法的运行时间（更大的 n）&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;六、更快的算法？&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;试了试 Mathematica 中的 &lt;tt class="docutils literal"&gt;Fibonacci&lt;/tt&gt; 函数，发现其运算速度相当惊人，估计时间复杂度在 O(n
log
n) 上下，而且对于相同的 n，运算速度远远高于我的矩阵法。可惜我还不了解它的算法，只是在帮助文档里看到：&lt;/p&gt;
&lt;blockquote&gt;
Fibonacci[n] uses an iterative method based on the binary digit
sequence of n.&lt;/blockquote&gt;
&lt;p&gt;来看看它到底有多快：&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="compare_e" src="https://blog.gocalf.com/images/2011/11/compare_e.png"/&gt;
&lt;p class="caption"&gt;矩阵法（绿色）与 Mathematica Fibonacci 函数（橙色）运行时间比较&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;好吧，这个问题留待以后慢慢研究。&lt;/p&gt;
&lt;p&gt;最后相关的 Mathematica 命令文件放在这里：&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/11/fibonacci_timecost.zip"&gt;fibonacci_timecost&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
</content><category term="算法"></category><category term="Interview Question"></category><category term="Algorithm Complexity"></category><category term="Fibonacci"></category></entry><entry><title>黎明公主攻略：第五章 冰封魔镜的罪恶</title><link href="https://blog.gocalf.com/zelda-tp-ch5" rel="alternate"></link><published>2011-11-22T19:47:00+08:00</published><updated>2011-11-22T19:47:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-11-22:/zelda-tp-ch5</id><summary type="html">&lt;p class="first last"&gt;来到镜之古墓，在接近中间的高台时，暗影怪物再次出现，消灭他们后用陀螺仪到达顶部转动机关使其降下，之后一群镜子看守者会出现，并讲述这里以前曾发生的故事。&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;第五章 冰封魔镜的罪恶（雪山！兽人！爱！）&lt;/h2&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;镜之古墓&lt;/h3&gt;
&lt;p&gt;离开房间后，来到镜之古墓，在接近中间的高台时，暗影怪物再次出现，消灭他们后用陀螺仪到达顶部转动机关使其降下，之后一群镜子看守者会出现，并讲述这里以前曾发生的故事。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch05_01.jpg"&gt;&lt;img alt="tp_ch05_01" src="https://blog.gocalf.com/images/2011/11/tp_ch05_01.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;来到镜之古墓&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;原来之前这里曾关押过一名用有强大恶魔力量的黑暗盗贼—— &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-characters#ganondorf"&gt;加农道夫（Ganondorf）&lt;/a&gt;。在经过审判后，镜子看守者决定将其处死，然而，拥有强大力量的加农道夫在被刺穿身体后并没有死亡，他反而依靠自己的力量挣脱枷锁并杀死了一名镜子看守，其余几名镜子看守急忙联合自己的全部力量终于将其封印在了黎明世界中，而由于镜子看守的死亡，他所守护的那面镜子也裂成碎片并遗落到世界各地。现在要打开通往黎明世界的入口，就必须找回三片失落镜子碎片。在几名镜子看守的恳求下，林克答应帮助找回三片失落的碎片。而米德娜也被林克的举动所感动，告诉林克自己最初本来只打算利用林克帮自己夺回暗影皇冠（Fused Shadow），然而在长期和林克相处之下慢慢被林克感化。随后林克便离开镜之古墓，回到海拉尔城特尔玛的酒馆。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch05_02.jpg"&gt;&lt;img alt="tp_ch05_02" src="https://blog.gocalf.com/images/2011/11/tp_ch05_02.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;在镜子看守的恳求下，林克答应帮助找回三片失落的碎片&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;海拉尔城&lt;/h3&gt;
&lt;p&gt;在酒馆里，林克从特尔玛那里得知那群人里的阿雪（Ashei）最近离开了。于是前去和他们谈话，得知阿雪去了雪山（Snowpeak），于是查看桌上的地图后知道了阿雪的具体位置，随后林克让米德娜传送到佐拉原住地，顺着河游下瀑布，从左下的路出去到达雪山。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;雪山&lt;/h3&gt;
&lt;p&gt;找到阿雪后，她告诉林克，前面的暴风雪太大，普通人根本不可能通过，只有一种叫 Reekfish 的特殊红鱼能通过前面的暴风雪地带。拿到阿雪的草图（Ashei's Sketch），林克决定找到这种鱼。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch05_03.jpg"&gt;&lt;img alt="tp_ch05_03" src="https://blog.gocalf.com/images/2011/11/tp_ch05_03.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;得到阿雪的草图&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;先将阿雪的草图出示给门口的两个佐拉士兵看，他们告诉林克红鱼是种很特殊的鱼，他们知道的也并不多，但是告诉林克拉里司王子（Prince Ralis）知道许多关于红鱼的事，于是林克前去卡卡里科村找拉里斯王子询问关于红鱼的事。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;卡卡里科村&lt;/h3&gt;
&lt;p&gt;在之前得到佐拉盔甲的地方找到了拉里斯王子，他告诉林克红鱼是种很特别的鱼，生活在佐拉原住地下面湖泊的子母岩（Mother-and- Child Rock）附近，并且需要特别的鱼饵才钓得到，随后王子将鱼饵交给林克，拿到鱼饵后再回到佐拉原住地，到瀑布下面的湖泊的子母岩旁边的岸上钓红鱼（即一大一小露出水面的岩石），得手后变狼调查红鱼后，可以得到追踪红鱼气味的能力，随即前往冰山。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch05_04.jpg"&gt;&lt;img alt="tp_ch05_04" src="https://blog.gocalf.com/images/2011/11/tp_ch05_04.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;使用特殊的鱼饵钓到了红鱼&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;冰山&lt;/h3&gt;
&lt;p&gt;林克到冰山后，利用感知追寻红鱼气味一路前进（不然在第一块区域会因为迷路而冷死）。该区域的冰狼，狼形态下会比较容易对付（人会因为雪地和攻击速度的问题倍受打击），一路前进，只要跟着气味走，应该没什么问题，在尽头会发现气味朝山上延伸，从右边的台阶上可以爬到上层，继续追踪，途中还会遇到一处过不去的地方，撞击面前的墙会使上面的雪落下并铺出一条新的路，林克一直追踪气味直到尽头后，挖地上的土可进入到一个山洞。&lt;/p&gt;
&lt;p&gt;进入山洞林克跟随气味一直出去，继续追踪会发现一处嚎叫岩石，然后在四周寻找会发现红鱼被一个雪人抓住了，林克前去和雪人谈话，谈论中林克得知雪人叫亚托（Yeto），并且他家中有一片镜子碎片，随后雪人邀请林克去自己家共进晚餐，随后滑着雪板离开。撞击旁边的树后同样能得到一块滑雪板，随后顺着路一直滑到尽头的雪山废墟（Snowpeak Ruins）。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch05_05.jpg"&gt;&lt;img alt="tp_ch05_05" src="https://blog.gocalf.com/images/2011/11/tp_ch05_05.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;跟随着红鱼的气味，林克遇到了雪人亚托，后者邀请林克去他家&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;雪山废墟迷宫&lt;/h3&gt;
&lt;div class="figure"&gt;
&lt;img alt="tp_ch05_06" src="https://blog.gocalf.com/images/2011/11/tp_ch05_06.jpg" /&gt;
&lt;p class="caption"&gt;雪山废墟迷宫地图&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 1：&lt;/strong&gt;杀掉进门遇到的灵魂妖怪得到魂魄后从北面的门来到房间 2。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 2：&lt;/strong&gt;这里遇到了亚托的妻子亚塔（Yeta）。亚塔告诉林克，家里确实有一块镜子碎片，就放在自己的卧室里，而且自己得到这块碎片以后自己的身体就日渐削弱，所以老公才去给自己抓鱼吃滋补身体，另外亚塔将废墟的地图交给林克并将钥匙所在位置标记在地图上。去西面的房间找到亚托，他会让林克先尝一口汤，这里开始可以用空瓶装汤回血，这点很重要，因为这个迷宫的怪物和坛子是不会掉回血物品的。南面的坛子里有这个迷宫的欧库。走北面的门进入房间 4。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch05_07.jpg"&gt;&lt;img alt="tp_ch05_07" src="https://blog.gocalf.com/images/2011/11/tp_ch05_07.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;亚托请林克喝汤&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch05_08.jpg"&gt;&lt;img alt="tp_ch05_08" src="https://blog.gocalf.com/images/2011/11/tp_ch05_08.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;亚塔告诉林克家里镜子碎片的事情&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 4：&lt;/strong&gt;这个房间中间有片冰冻地，上面有三个箱子，不过其中一个被冻上了，将可以推动的箱子推到一块机关上打开东面的门，注意在这个迷宫里千万不能穿佐拉盔甲。走东面的门到房间 5。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 5：&lt;/strong&gt;这里用狼开感知可以发现地洞，挖出去能到房间 6。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch05_09.jpg"&gt;&lt;img alt="tp_ch05_09" src="https://blog.gocalf.com/images/2011/11/tp_ch05_09.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;利用狼的感知发现地洞&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 6：&lt;/strong&gt;在地上看到一个冒出雪地的东西，挖下去能发现一个箱子，里面有小钥匙一把，打开西面的门能回到房间 5，注意房间 5 里的冰螺怪，被碰到的话会被冻成冰块，朝北面到房间 7。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 7：&lt;/strong&gt;干掉所有的冰螺怪后打开门，接着去房间 8&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch05_10.jpg"&gt;&lt;img alt="tp_ch05_10" src="https://blog.gocalf.com/images/2011/11/tp_ch05_10.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;消灭冰螺怪&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 8：&lt;/strong&gt;这里会遇到两个冰骷髅，站到一定距离的话他们会扔冰矛攻击林克，不过可以站到更远的地方用炸弹箭攻击他们，当然也可以直接冲上去砍掉，干掉他们两个后朝南面到亚塔标记的房间 9。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch05_11.jpg"&gt;&lt;img alt="tp_ch05_11" src="https://blog.gocalf.com/images/2011/11/tp_ch05_11.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 9：&lt;/strong&gt;看到了箱子，打开后却只有一个蓝瓜，于是回到房间 2 问亚塔。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 2：&lt;/strong&gt;亚塔说可能是亚托把钥匙拿到其他地方了，让她回忆一下，顺便让林克把蓝瓜交给她的丈夫，他刚才正在找蓝瓜做调料。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 3：&lt;/strong&gt;去房间 3 将蓝瓜给亚托，于是他将鱼汤升级，这样鱼汤就能恢复更多的生命值了。再回到房间 2，亚塔回忆起钥匙的位置了，于是给林克标记了新的位置，并将东北的门打开，可以通往房间 6 的右半部分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 6：&lt;/strong&gt;这次到的是房间 6 右边的部分，中间有门大炮，当然现在还不能使用，房间没什么能做的，直接到东北的窗子爬过去到房间 10。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch05_12.jpg"&gt;&lt;img alt="tp_ch05_12" src="https://blog.gocalf.com/images/2011/11/tp_ch05_12.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;爬窗子进入房间 10&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 10：&lt;/strong&gt;从过道中过去，小心两边的冰块和地上的冰螺怪，途中的铁球记得一起搬走，这个是炮弹，在房间东北有门大炮，将炮弹放进去，然后再放一颗炸弹进去可以发射，发射之前记得先把炮口调整到最南面。之后大炮会轰出一条路，接着走南面的门到房间 11。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch05_13.jpg"&gt;&lt;img alt="tp_ch05_13" src="https://blog.gocalf.com/images/2011/11/tp_ch05_13.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;把炮弹放入大炮内，用炸点发射炮弹，轰出一条路来&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 11：&lt;/strong&gt;房间西南角的箱子里有指南针，一定要拿到，过去的路很危险，要注意不要做大幅度运动，先朝南面走，路上的冰螺可以用飞爪打掉，冰蝙蝠可以在远处先用弓射掉，先朝南走在第一段路的尽头不要直走，靠近岔道的时候直接朝右边跳，否则走上去就会直接滑下去，再向前前进一段后可以用陀螺仪过最后的岔口，也可以朝右边绕过去拿指南针，之后能利用飞爪回到进来的门而不用再走一次，返回到房间 6。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch05_14.jpg"&gt;&lt;img alt="tp_ch05_14" src="https://blog.gocalf.com/images/2011/11/tp_ch05_14.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;生命值不高的时候林克看起来就弱弱的，一定要提前用瓶子装上汤来回复体力&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 6：&lt;/strong&gt;在指南针的指引下找到东北附近的箱子，里面有小钥匙，可以打开东面的大门，进去后到房间 12。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 12：&lt;/strong&gt;房间 12 有炮弹，先将门旁边的机器拉下来，让勺子处于房间 12 这边，然后抱一个炮弹放到上面去，再回到房间 6，在对应位置拉下把手可以把炮弹取出来，之后可以利用大炮将北面的怪物干掉，随后进入房间 13。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch05_15.jpg"&gt;&lt;img alt="tp_ch05_15" src="https://blog.gocalf.com/images/2011/11/tp_ch05_15.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;将门旁边的机器拉下来&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 13：&lt;/strong&gt;这里是小 BOSS 战斗，BOSS 使用一个链子球进行攻击，只有背面对 BOSS 的攻击才有效果，注意躲避他的攻击，可以利用天花板用飞爪躲避，在 BOSS 做出攻击后会有一段硬直时间，利用此时迅速砍其后面露出的尾巴，胜利后可取得 BOSS 的武器链子球（Ball and Chain），能用其砸开冰块和不结实的地板，还能干掉之前需要用大炮才能干掉的大冰怪。随后去北面标记的房间里拿钥匙，结果却是一个奶酪，只好再回到房间 2 找亚塔。亚塔告诉林克可能又是丈夫把钥匙放别处去了，不过现在他正在找奶酪做汤，让林克先把奶酪交给丈夫而自己再回忆下钥匙的位置。去房间 3 把奶酪交给亚托后，汤可以恢复更多的生命了，回到房间 2 找亚塔，她再次为林克标记新的钥匙位置并将房间东面的门打开，进入房间 14。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch05_16.jpg"&gt;&lt;img alt="tp_ch05_16" src="https://blog.gocalf.com/images/2011/11/tp_ch05_16.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;和小 BOSS 作战&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 14：&lt;/strong&gt;来到房间 14 先去旁边的门到房间 12，把箱子推下去然后取一个炮弹回来，利用门上的机器将炮弹送回房间 14，然后从螺旋梯上到房间 14 的顶部，注意把路上的两个怪干掉，否则后面拿炮弹的时候会很麻烦。上到顶部，将冰块砸开可以见到一个灵魂妖怪和一门大炮，先不管，房间东南的地板可以用链子球砸开，跳下去可以得到一片 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h23"&gt;心之碎片 23&lt;/a&gt;，然后用飞爪回到房间 14，走北面的门到房间 15。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 15：&lt;/strong&gt;用链子球砸中间的吊灯下部让吊灯晃动起来，然后跳过去到对面的箱子取得小钥匙，回来的时候可以用西南墙上的飞爪，回到房间 14，打开房间西南的锁到房间 1 的楼上。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch05_17.jpg"&gt;&lt;img alt="tp_ch05_17" src="https://blog.gocalf.com/images/2011/11/tp_ch05_17.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;在宝箱中拿到小钥匙&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 1：&lt;/strong&gt;先把墙上的冰块砸开，利用链子球砸动吊灯，再去最南边的 2 层的箱子里取得 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h22"&gt;心之碎片 22&lt;/a&gt;，然后走西北的门过去到房间 16。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 16：&lt;/strong&gt;将箱子推下去到房间 4，把中间的冰块和被冻上的箱子都砸开，随后想办法把箱子推到正中的机关上打开房间 2 楼东面的门，再从刚才推下楼的箱子上可以爬回 2 楼，从东面的门进去到下一个房间，一路朝北走，在挡路的墙前面用飞爪过去，可以到房间 8 的楼上，然后利用链子球打吊灯，过去房间南面取得一把小钥匙后回到房间 16，用钥匙打开右边的门再到房间 17。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch05_18.jpg"&gt;&lt;img alt="tp_ch05_18" src="https://blog.gocalf.com/images/2011/11/tp_ch05_18.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;这里要用飞抓才能过去&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 17：&lt;/strong&gt;干掉房子中间的大冰怪，再把东面的冰块打开，把箱子推下去，可来到房间 14，将之前放在门口的的炮弹搬上楼，并用大炮朝房间 17 发射，之后再到房间 17，利用北面墙上的机器将炮弹送出去到阳台上，再出去到阳台上将炮弹放进大炮然后朝东北方发射，可以干掉楼梯上挡路的大冰怪，之后可从那里上去到房间 18。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch05_19.jpg"&gt;&lt;img alt="tp_ch05_19" src="https://blog.gocalf.com/images/2011/11/tp_ch05_19.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;利用大炮干掉大冰怪&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 18：&lt;/strong&gt;干掉房间里的全部冰骷髅后北面的门可以打开，随后终于取得了大钥匙，出门后亚塔也刚到这里，然后她会带林克去卧室拿镜子，跟着她去卧室，结果因为亚塔太沉迷于照镜子，被镜子的魔力所影响，而成为了冰怪——布里泽塔（Twilit Ice--Blizzeta）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BOSS 战：&lt;/strong&gt;冰怪——布里泽塔&lt;/p&gt;
&lt;p&gt;布里泽塔体型异常巨大，攻击方式是震落身上的冰块并向四周扩散进行攻击，对付碎冰只需将链子球舞动起来就可以解决，用链子球三下就能轻松搞定布里泽塔的第一阶段。之后布里泽塔会飞起来并召唤许多小冰柱，注意地上的反光，先躲开小柱子的攻击，冰柱会在周围落下一个圈，然后布里泽塔就会在中间落下，躲开后用链子球攻击，很快就可以击败她。&lt;/p&gt;
&lt;p&gt;战胜布里泽塔后，亚托会冲进来，而布里泽塔也变回亚塔，一番亲热后林克也得到了第一片镜子碎片。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch05_20.jpg"&gt;&lt;img alt="tp_ch05_20" src="https://blog.gocalf.com/images/2011/11/tp_ch05_20.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;BOSS：冰怪——布里泽塔&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wii.tgbus.com/glmj/gl/200611/20061129114849.shtml"&gt;《塞尔达传说：黄昏公主》图文全攻略&lt;/a&gt;&amp;nbsp;by WiiBbs 攻研部
Szh、三代鬼彻、天堂的翅膀&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cngba.com/thread-16520313-1-1.html"&gt;《塞尔达传说 黄昏公主》完美攻略研究&lt;/a&gt; by www.cngba.com 鸡蛋&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="游戏"></category><category term="Twilight Princess"></category></entry><entry><title>算法的复杂度与 Master 定理</title><link href="https://blog.gocalf.com/algorithm-complexity-and-master-theorem" rel="alternate"></link><published>2011-11-16T14:16:00+08:00</published><updated>2011-11-16T14:16:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-11-16:/algorithm-complexity-and-master-theorem</id><summary type="html">&lt;p class="first last"&gt;平时设计或者阅读一个算法的时候，必然会提到算法的复杂度（包括时间复杂度和空间复杂度）。比如我们说一个二分查找算法的平均时间复杂度为 O(log n)，快速排序可能是 O(n log n)。那这里的 O 是什么意思？这样的表达是否准确呢？今天来复习一下与算法复杂度相关的知识：函数渐进阶；记号 O、Ω、θ和 o；Master 定理。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;平时设计或者阅读一个算法的时候，必然会提到算法的复杂度（包括时间复杂度和空间复杂度）。比如我们说一个二分查找算法的平均时间复杂度为 O(log
n)，快速排序可能是 O(n log
n)。那这里的 O 是什么意思？这样的表达是否准确呢？&lt;/p&gt;
&lt;p&gt;今天来复习一下与算法复杂度相关的知识：函数渐进阶，记号 O、Ω、θ和 o；Master 定理。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;先插一句，在算法复杂度分析中，log 通常表示以 2 为底的对数。&lt;/p&gt;
&lt;p&gt;算法复杂度（算法复杂性）是用来衡量算法运行所需要的计算机资源（时间、空间）的量。通常我们利用渐进性态来描述算法的复杂度。&lt;/p&gt;
&lt;p&gt;用 n 表示问题的规模，T(n) 表示某个给定算法的复杂度。所谓渐进性态就是令 n→∞ 时，T(n) 中增长最快的那部分。严格的定义是：如果存在 &lt;span class="math"&gt;\(\widetilde{T}(n)\)&lt;/span&gt;，当 n→∞ 时，有&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\frac{T(n)-\widetilde{T}(n)}{T(n)} \to 0
\end{equation*}
&lt;/div&gt;
&lt;p&gt;就说 &lt;span class="math"&gt;\(\widetilde{T}(n)\)&lt;/span&gt; 是 T(n) 当 n→∞ 时的渐进性态。&lt;/p&gt;
&lt;p&gt;比如 T(n) = 2 * n ^ 2 + n log n + 3，那么显然它的渐进性态是 2 * n ^
2，因为当 n→∞ 时，后两项的增长速度要慢的多，可以忽略掉。引入渐进性态是为了简化算法复杂度的表达式，只考虑其中的主要因素。当比较两个算法复杂度的时候，如果他们的渐进复杂度的阶不相同，那只需要比较彼此的阶（忽略常数系数）就可以了。&lt;/p&gt;
&lt;p&gt;总之，分析算法复杂度的时候，并不用严格演算出一个具体的公式，而是只需要分析当问题规模充分大的时候，复杂度在渐进意义下的阶。记号 O、Ω、θ和 o 可以帮助我们了解函数渐进阶的大小。&lt;/p&gt;
&lt;p&gt;假设有两个函数 f(n) 和 g(n)，都是定义在正整数集上的正函数。上述四个记号的含义分别是：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;f(n) = O(g(n))：&lt;span class="math"&gt;\(\exists c&amp;gt;0,n_0\in\mathbb{N},\forall n\geq n_0,f(n)\leq c g(n)\)&lt;/span&gt;；f 的阶&lt;strong&gt;不高于&lt;/strong&gt; g 的阶。&lt;/li&gt;
&lt;li&gt;f(n) =&amp;nbsp;Ω(g(n))：&lt;span class="math"&gt;\(\exists c&amp;gt;0,n_0\in\mathbb{N},\forall n\geq n_0,f(n)\geq c g(n)\)&lt;/span&gt;；f 的阶&lt;strong&gt;不低于&lt;/strong&gt; g 的阶。&lt;/li&gt;
&lt;li&gt;f(n) =&amp;nbsp;θ(g(n))：&lt;span class="math"&gt;\(\iff f(n)=O(g(n))\&amp;amp;\&amp;amp;f(n)=\Omega(g(n))\)&lt;/span&gt;；f 的阶&lt;strong&gt;等于&lt;/strong&gt; g 的阶。&lt;/li&gt;
&lt;li&gt;f(n) =&amp;nbsp;o(g(n))：&lt;span class="math"&gt;\(\forall\varepsilon &amp;gt; 0,\exists n_0\in \mathbb{N},\forall n\geq n_0,f(n)/g(n) &amp;lt; \varepsilon\)&lt;/span&gt;；f 的阶&lt;strong&gt;低于&lt;/strong&gt; g 的阶。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可见，记号 O 给出了函数 f(n) 在渐进意义下的上界（但不一定是最小的），相反，记号Ω给出的是下界（不一定是最大的）。如果上界与下界相同，表示 f(n) 和 g(n) 在渐进意义下是同阶的（θ），亦即复杂度一样。&lt;/p&gt;
&lt;p&gt;列举一些常见的函数之间的渐进阶的关系：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\log n!=\Theta(n\log n)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\log n^2=\Theta(\log n)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\log n^2=O(\sqrt n)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(n=\Omega(\log^2n)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\log^2n=\Omega(\log n)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(2^n=\Omega(n^2)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(2^n=O(3^n)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(n!=o(n^n)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(2^n=o(n!)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有些人可能会把这几个记号跟算法的最坏、最好、平均情况复杂度混淆，它们有区别，也有一定的联系。&lt;/p&gt;
&lt;p&gt;即使问题的规模相同，随着输入数据本身属性的不同，算法的处理时间也可能会不同。于是就有了最坏情况、最好情况和平均情况下算法复杂度的区别。它们从不同的角度反映了算法的效率，各有用处，也各有局限。&lt;/p&gt;
&lt;p&gt;有时候也可以利用最坏情况、最好情况下算法复杂度来粗略地估计算法的性能。比如某个算法在最坏情况下时间复杂度为θ(n
^ 2)，最好情况下为θ(n)，那这个算法的复杂度一定是 O(n&amp;nbsp;^
2)、Ω(n) 的。也就是说 n ^ 2 是该算法复杂度的上界，n 是其下界。&lt;/p&gt;
&lt;p&gt;接下来看看 Master 定理。&lt;/p&gt;
&lt;p&gt;有些算法在处理一个较大规模的问题时，往往会把问题拆分成几个子问题，对其中的一个或多个问题递归地处理，并在分治之前或之后进行一些预处理、汇总处理。这时候我们可以得到关于这个算法复杂度的一个递推方程，求解此方程便能得到算法的复杂度。其中很常见的一种递推方程就是这样的：&lt;/p&gt;
&lt;p&gt;设常数 a &amp;gt;= 1，b &amp;gt; 1，f(n) 为函数，T(n) 为非负整数，T(n) = a T(n / b) +
f(n)，则有：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;若 &lt;span class="math"&gt;\(f(n)=O(n^{\log_b a-\varepsilon}),\varepsilon &amp;gt; 0\)&lt;/span&gt;，那么 &lt;span class="math"&gt;\(T(n)=\Theta(n^{\log_b a})\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;若 &lt;span class="math"&gt;\(f(n)=\Theta(n^{\log_b a})\)&lt;/span&gt;，那么 &lt;span class="math"&gt;\(T(n)=\Theta(n^{\log_b a}\log n)\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;若 &lt;span class="math"&gt;\(f(n)=\Omega(n^{\log_b a+\varepsilon}),\varepsilon &amp;gt; 0\)&lt;/span&gt;，并且对于某个常数 c &amp;lt; 1 和充分大的 n 有 &lt;span class="math"&gt;\(a f(n/b)\leq c f(n)\)&lt;/span&gt;，那么 &lt;span class="math"&gt;\(T(n)=\Theta(f(n))\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;比如常见的二分查找算法，时间复杂度的递推方程为 T(n) = T(n / 2) +
θ(1)，显然有 &lt;span class="math"&gt;\(n^{\log_b a}=n^0=\Theta(1)\)&lt;/span&gt;，满足 Master 定理第二条，可以得到其时间复杂度为 T(n)
= θ(log n)。&lt;/p&gt;
&lt;p&gt;再看一个例子，T(n) = 9 T(n / 3) + n，可知 &lt;span class="math"&gt;\(n^{\log_b a}=n^2\)&lt;/span&gt;，令ε取 1，显然满足 Master 定理第一条，可以得到 T(n) =&amp;nbsp;θ(n ^
2)。&lt;/p&gt;
&lt;p&gt;来一个稍微复杂一点儿例子，T(n) = 3 T(n / 4) + n log
n。&lt;span class="math"&gt;\(n^{\log_b a}=O(n^{0.793})\)&lt;/span&gt;，取ε = 0.2，显然当 c = 3 /
4 时，对于充分大的 n 可以满足 a * f(n / b) = 3 * (n / 4) * log(n / 4) &amp;lt;=
(3 / 4) * n * log n = c * f(n)，符合 Master 定理第三条，因此求得 T(n)
=&amp;nbsp;θ(n log n)。&lt;/p&gt;
&lt;p&gt;运用 Master 定理的时候，有一点一定要&lt;strong&gt;特别注意&lt;/strong&gt;，就是第一条和第三条中的ε必须&lt;strong&gt;大于零&lt;/strong&gt;。如果无法找到大于零的ε，就不能使用这两条规则。&lt;/p&gt;
&lt;p&gt;举个例子，T(n) = 2 T(n / 2) + n log n。可知 &lt;span class="math"&gt;\(n^{\log_b a}=n^1\)&lt;/span&gt;，而 f(n) = n log
n，显然不满足 Master 定理第二条。但对于第一条和第三条，也无法找到大于零的ε使得 &lt;span class="math"&gt;\(n \log n=O(n^{1-\varepsilon})\)&lt;/span&gt; 或者 &lt;span class="math"&gt;\(n \log n=\Omega(n^{1+\varepsilon})\)&lt;/span&gt;，因此不能用 Master 定理求解，只能寻求别的方式求解。比如可以利用递归树求出该算法的复杂度为 &lt;span class="math"&gt;\(T(n)=O(n \log^2{n})\)&lt;/span&gt;。简单的说一下计算过程：&lt;/p&gt;
&lt;p&gt;递归树的建立过程，就像是模拟算法的递推过程。树根对应的是输入的规模为 n 的问题，在递归处理子问题之外，还需要 n
log
n 的处理时间。然后根据递推公式给根节点添加子节点，每个子节点对应一个子问题。这里需要两个子节点，每个节点处理规模为 n
/ 2 的问题，分别需要 (n / 2) * log(n / 2) 的时间。因此在第二层一共需要 n *
(log n -
1) 的时间。第三层节点就是将第二层的两个节点继续分裂开，得到四个各需要 (n /
4) * log(n / 4) 时间的节点，总的时间消耗为 n * (log n -
2)。依此类推，第 k（设树根为 k = 0）层有 2 ^ k 的节点，总的时间为 n * (log n
- k)。而且可以知道，这棵树总共有 log
n 层（最后一层每个节点只处理规模为 1 的子问题，无须再分治）。最后将每一层消耗的时间累加起来，得到：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\sum_{k=0}^{\log n}{n(\log n-k)}=\frac{1}{2}n\log n(\log n + 1)=O(n\log^2{n})
\end{equation*}
&lt;/div&gt;
</content><category term="算法"></category><category term="Algorithm Complexity"></category><category term="Master Theorem"></category></entry><entry><title>黎明公主攻略：第四章 沙漠深处的审判</title><link href="https://blog.gocalf.com/zelda-tp-ch4" rel="alternate"></link><published>2011-11-10T11:32:00+08:00</published><updated>2011-11-10T11:32:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-11-10:/zelda-tp-ch4</id><summary type="html">&lt;p class="first last"&gt;林克和米德娜来到精灵之泉，最后一位光之精灵拉内鲁被解放了，但是就在这时魔法师赞特出现，并嘲笑林克和米德娜所做的一切都是没有意义的。随后其将米德娜打伤并把一块水晶碎片插入林克头部，让林克无法变回人形。&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;第四章 沙漠深处的审判（死者之沙漠）&lt;/h2&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;影之王的阴谋&lt;/h3&gt;
&lt;p&gt;随后，林克和米德娜来到精灵之泉，最后一位光之精灵拉内鲁被解放了，但是就在这时魔法师赞特出现，并嘲笑林克和米德娜所做的一切都是没有意义的。随后其将米德娜打伤并把一块水晶碎片插入林克头部，让林克无法变回人形。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch04_01.jpg"&gt;&lt;img alt="tp_ch04_01" src="https://blog.gocalf.com/images/2011/11/tp_ch04_01.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;米德娜被魔法师赞特打伤&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;海拉尔城&lt;/h3&gt;
&lt;p&gt;时间越来越少了，看着米德娜的身体慢慢的由黑色变成了灰色。林克不顾一切的冲入了王城城下町中，在人们惊恐的目光中，主角心中只有一个信念就是要找到塞尔达公主。因为王城守卫森严，林克完全无法进入王城，和动物说话后，得知特尔玛的酒馆有一只知道办法的猫。为了救米德娜，林克将她带到特尔玛的酒馆寻求帮助，却被酒保赶了出来。无助的林克准备带着受伤的米德娜离开时，特尔玛的猫出现并决定帮忙，它告诉林克，酒馆后面有条密道可以通向海拉尔城堡，并把窗户打开让林克从上面过去。进到酒馆后，可以利用阁楼之间连接的绳子移动，一直走到最里面的洞钻进去，来到了一间密室。林克通过开感知战胜房间角落的灵魂妖怪并取得它身上的魂魄，再去和房间北面的乔瓦尼说话，他会为林克打开通往城堡下水道的洞（当身上的鬼魂数到达一定数字的时候可以来这里换取东西，以后回来可以从城下町的东南的门外很多猫的地方变狼挖进来）。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch04_02.jpg"&gt;&lt;img alt="tp_ch04_02" src="https://blog.gocalf.com/images/2011/11/tp_ch04_02.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;林克通过开感知发现房间角落的灵魂妖怪&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;林克来到下水道，捡起地上的木棍并在旁边的灯上引燃火可以烧掉挡路的蜘蛛网，随后进入之前被关押的监狱，林克跳入水中向左边游，向后来到螺旋楼梯处，虽然没有米德娜的帮助，林克还是可以利用楼梯间的绳索上到顶部。在顶部，没有了米德娜，林克只好借助风的力量才能通过一些地方，还记得第一次见到塞尔达公主的地方吗，赶紧到那里请求公主的帮助吧。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch04_03.jpg"&gt;&lt;img alt="tp_ch04_03" src="https://blog.gocalf.com/images/2011/11/tp_ch04_03.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;没有米德娜的帮助，林克需要利用楼梯间的绳索上到顶部&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;公主看出林克被恶魔力量封印而不能变回人型，她告诉林克要解除封印，必须得去法隆森林找到圣剑才可以，不过那里的具体情况公主也不清楚，为了拯救米德娜，公主将自己的力量传给米德娜，难过的林克也无能为力，只有消灭黑暗源头才能拯救世界。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch04_04.jpg"&gt;&lt;img alt="tp_ch04_04" src="https://blog.gocalf.com/images/2011/11/tp_ch04_04.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;公主将自己的力量传给米德娜&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;北法隆森林&lt;/h3&gt;
&lt;p&gt;恢复活力的米德娜带着林克传送回到了北法隆森林，刚一到这里就看到一只被攻击的猴子，救下她后朝右边走，米德娜的传送会帮助林克进入神圣之森，这里又有一个嚎叫之岩，用过后会在海拉尔城南面找到他。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch04_05.jpg"&gt;&lt;img alt="tp_ch04_05" src="https://blog.gocalf.com/images/2011/11/tp_ch04_05.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;恢复活力的米德娜带着林克进入神圣之森&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;神圣之森（森之圣域）&lt;/h3&gt;
&lt;p&gt;进入到神圣之森，这里的地形比较具有迷惑性，在入口处能发现一块印有 Triforce（黄金三角力量）的石碑，按提示哼出正确的旋律，一个提灯吹喇叭的小妖怪（Skull Kid）出现，林克一直追着，他会不断打开新的道路。不过每次被攻击后其都会跑掉并躲起来，林克借助地上的灯光，可以帮助确定他逃向哪个房间，到最后无路可逃，小妖怪会在一个象斗技场一样的地方和林克决战，林克只有在其吹喇叭的时候才能打到他，否则他会不停瞬移，战而胜之后其再次逃跑，林克穿过这里，一路来到有两个雕塑的空地。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch04_06.jpg"&gt;&lt;img alt="tp_ch04_06" src="https://blog.gocalf.com/images/2011/11/tp_ch04_06.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;提灯吹喇叭的小妖怪（Skull Kid）&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;林克正准备进入北面的门时，雕塑被激活了，他们会根据林克的移动方向移动，只要将他们移到两个发光的地板处就可以打开门，随后取得征服者之剑（Master Sword）并解开封印，以后的林克就可以随时在狼和人形态之间切换了。具体的走法是：左下右右上左上上左下下右上，或者：右下上上上左左下下下右上。之后所有开通的门都会关闭，森之圣域还无法自由活动，到游戏后期再回来吧。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch04_07.jpg"&gt;&lt;img alt="tp_ch04_07" src="https://blog.gocalf.com/images/2011/11/tp_ch04_07.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;取得征服者之剑（Master Sword）&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;林克回到之前的斗技场，炸开中央的岩石并利用感知能发现地洞，挖下去后可以取得 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h42"&gt;心之碎片 42&lt;/a&gt; 和一个魂魄。随后让米德娜帮助传送回海拉尔城。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch04_08.jpg"&gt;&lt;img alt="tp_ch04_08" src="https://blog.gocalf.com/images/2011/11/tp_ch04_08.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;炸开斗技场中央的岩石，就可以利用感知发现地洞&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;海拉尔城&lt;/h3&gt;
&lt;p&gt;来到特尔玛的酒馆，和特尔玛谈话了解到了角落的几个人也正在调查海拉尔王国的异常现象，并且其中一个叫奥鲁（Auru）的人去了海利亚湖，和他们三人对话然后调查桌子上的地图后可以得知奥鲁的具体位置。林克随后可以先去城南外面找到金狼，和不死勇士战斗后学会新技能暴烈劈（Helm Splitter），然后再让米德娜帮忙传送去海利亚湖。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;海利亚湖&lt;/h3&gt;
&lt;p&gt;林克根据得到的标志到地图右下角的哨塔找到奥鲁并获得奥鲁的信物（Auru's memo），之后再来到湖中间的大炮处并将奥鲁的信物出示给他看，他会将林克发射到戈鲁多沙漠（Gerudo Desert）。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch04_09.jpg"&gt;&lt;img alt="tp_ch04_09" src="https://blog.gocalf.com/images/2011/11/tp_ch04_09.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;在湖中央“乘坐”奥鲁的大炮&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch04_10.jpg"&gt;&lt;img alt="tp_ch04_10" src="https://blog.gocalf.com/images/2011/11/tp_ch04_10.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;来到戈鲁多沙漠（Gerudo Desert）&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;戈鲁多沙漠&lt;/h3&gt;
&lt;p&gt;林克一直朝地图右上跑可以见到营地，先干掉两个骑猪的兽人后，夺过他们的坐骑野猪，可以用其冲破前面的栅栏继续向北前进。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch04_11.jpg"&gt;&lt;img alt="tp_ch04_11" src="https://blog.gocalf.com/images/2011/11/tp_ch04_11.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;戈鲁多沙漠（Gerudo Desert）北方的营地&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="outside-arbiter-s-grounds"&gt;
&lt;h3&gt;仲裁者之地外围（Outside Arbiter's Grounds）&lt;/h3&gt;
&lt;p&gt;一路朝西北方向前进，林克在最里面干掉一个腰部闪闪发亮的兽人卫兵后掉落一把小钥匙，林克将广场上的烤猪打掉会掉落一片 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h18"&gt;心之碎片 18&lt;/a&gt;。随后回到路上的一个锁住的门，打开进入后和兽人头领布尔布林决斗（用背斩很容易就能解决掉），战胜后用猪冲破栅栏来到仲裁者之地（Arbiter's Grounds）。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch04_12.jpg"&gt;&lt;img alt="tp_ch04_12" src="https://blog.gocalf.com/images/2011/11/tp_ch04_12.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;在仲裁者之地外围&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;仲裁者之地（沙漠刑场迷宫）&lt;/h3&gt;
&lt;div class="figure"&gt;
&lt;img alt="tp_ch04_13" src="https://blog.gocalf.com/images/2011/11/tp_ch04_13.jpg" /&gt;
&lt;p class="caption"&gt;仲裁者之地（沙漠刑场迷宫）一层、二层地图&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="tp_ch04_14" src="https://blog.gocalf.com/images/2011/11/tp_ch04_14.jpg" /&gt;
&lt;p class="caption"&gt;仲裁者之地（沙漠刑场迷宫）地下一层、二层地图&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;这里到处都是流沙，林克站在上面会不断下沉，所以要尽量快速通过，另外中间的旋涡状的流沙碰到就会直接沉下去。右边墙上有一个可以抓的地方，用飞爪抓过去，然后朝房间左边走，在房间左上角能看到开关，用飞爪抓过来可以打开北面的门，进去后来到房间 1。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch04_15.jpg"&gt;&lt;img alt="tp_ch04_15" src="https://blog.gocalf.com/images/2011/11/tp_ch04_15.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;中间的旋涡状的流沙碰到就会直接沉下去&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 1：&lt;/strong&gt;房间 1 的右边有钥匙，注意地上的虫子，如果被太多虫子爬到身上会大大降低移动速度，可用旋风斩将它们扫开，房间左边的盆子里有灯油，把油灯装满，拿了钥匙之后去房间 2。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 2：&lt;/strong&gt;房间很黑，而且有很多骷髅兵，注意不要在流沙里和它们纠缠太久，朝北走有道被拦住的门，将两边的灯点亮可以打开，前进去房间 4。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch04_16.jpg"&gt;&lt;img alt="tp_ch04_16" src="https://blog.gocalf.com/images/2011/11/tp_ch04_16.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;把门两边的油灯点亮便可打开门&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 3：&lt;/strong&gt;这里会出现 3 个灵魂灯怪并将北面四个灯的火取走使大门关上，于是接下来的任务就需要去取回四个灯火，先在这里解决第一个灯怪并得到他的一个魂魄，随后调查灯怪尸体可以获得灯怪的气味并在感知状态下追踪，根据气味找到房间西南角落的沙，挖开后能发现一个开关，拉开出现一个地道，在房间左上的箱子里有一块 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h19"&gt;心之碎片 19&lt;/a&gt;，而右上对应位置的箱子里有迷宫的地图，随后进入地道来到房间 4（B1）。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch04_17.jpg"&gt;&lt;img alt="tp_ch04_17" src="https://blog.gocalf.com/images/2011/11/tp_ch04_17.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;跟着灯怪气味寻找其他的灯怪&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 4（B1）：&lt;/strong&gt;这个房间中间有个可以转动的柱子，转动后能改变房间周围的墙壁，并在北面出现墙壁后的箱子，里面能得到小钥匙，拿到后站到本来是墙壁的地方向上看可以发现天花板上有个洞，用飞抓抓到楼上。进入房间 5 发现第二个灯怪，消灭他并得到其魂魄后回到房间 4（B1），将中间的柱子转回之前的位置，再回到房间 3，接着从房间 3 左边的门到房间 4（一层）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 4（一层）：&lt;/strong&gt;打开左边锁住的门，到房间 6。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 6：&lt;/strong&gt;这个房间除了流沙还有隐藏在沙里的陷阱，利用狼的感知的话可以看到这些陷阱，朝右上前进翻到台上，可以看到一个箱子，将箱子拉出来后上到上面去，这里有一条铁链，拉出来以后前面不远处的吊灯会慢慢上升，拉的时候注意不要掉到下面和碰到右边的刺，升到最高处后会放开链条并迅速通过，否则灯会掉下来并砸到林克头上（建议变狼再拉，狼跑的速度比人快），然后朝南边走一直上楼。这里也有一个可以推动的柱子，将其向两边不同方向推动会在西边和南边都出现箱子，其中西边的箱子里面有把小钥匙而南边的箱子里面有指南针，接着去东边开门进入房间 7。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch04_18.jpg"&gt;&lt;img alt="tp_ch04_18" src="https://blog.gocalf.com/images/2011/11/tp_ch04_18.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;拉动铁链&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 7：&lt;/strong&gt;房间 7 有很多小骷髅和几个会恐吓的大骷髅，把他们全部干掉后打开感知，跟随气味可以发现一个和房间 3 中一样的机关，拉开后找到第 3 个灯怪，再朝北面走去房间 8。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch04_19.jpg"&gt;&lt;img alt="tp_ch04_19" src="https://blog.gocalf.com/images/2011/11/tp_ch04_19.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 8：&lt;/strong&gt;这里林克会突然发现移动速度下降，打开感知发现有许多老鼠幽灵爬在身上，把他们干掉后到南边的箱子里拿把小钥匙，再走东边的门回到房间 3 的上层，然后从吊灯上跳到对面来到房间 9。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 9：&lt;/strong&gt;从左边的楼梯跳下去后把箱子推开，可以从箱子上爬上台子，这里又有一个拉吊灯的机关，这里拉起吊灯后到路的尽头能找到一个箱子，不过里边是钱。拉起吊灯后不要过去而站在吊灯最下面的凹陷处等吊灯落下后，可以爬上吊灯跳到对面到房间 10。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 10：&lt;/strong&gt;进入房间后门会被关上，并出现一个打死后会复活的骷髅，等到米德娜提示后，再次把骷髅打倒，在其的尸体上放个炸弹将他炸碎（也可以直接用炸弹箭炸死他）后门会打开，房间周围的木条打碎后炸弹可以拿，之后再继续朝南进入房间 11。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 11：&lt;/strong&gt;这里有两排灯柱，后面的一排有 5 盏，点燃最右边的一盏和前面的那盏后可以打开西面的门（点错的话会被小骷髅们围殴），然后进入房间 12。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch04_20.jpg"&gt;&lt;img alt="tp_ch04_20" src="https://blog.gocalf.com/images/2011/11/tp_ch04_20.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 12：&lt;/strong&gt;这里会遇到最后一个灯怪，他会分 4 个分身出来，因此这个时候是攻击不到他的，不过注意观察会发现等他要攻击的时候，有一个分身颜色会逐渐变深，这个就是其本体，攻击之，消灭后取得最后一个灯火，回到房间 3，这时北面的门会打开，进入来到房间 13。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 13：&lt;/strong&gt;现在这个房间还不能有所作为，所以先去西面到房间 14&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 14：&lt;/strong&gt;这个房间里有一个巨大的可转动的柱子，通过左右转动能使最下面的盘子上升或者下降。先使其上升两层，就是按大地图显示在 B1 的时候，到周围的某间房间里可以找到一把小钥匙，然后再将转盘转到最底层，打开北面的门，来到房间 15。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 15：&lt;/strong&gt;房间里有许多老鼠灵魂，另外还有许多陷阱，打开感知能一一发现，然后找没有陷阱的路一直朝南面走，在尽头处能找到一个链条，拉动后可将档在南边的门打开，放开链条机关会复位，所以要迅速通过并进入房间 16。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch04_21.jpg"&gt;&lt;img alt="tp_ch04_21" src="https://blog.gocalf.com/images/2011/11/tp_ch04_21.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 16：&lt;/strong&gt;这个房间内一共有 3 个会复活的骷髅，将他们全部消灭后可打开门，利用飞爪到南边的台子上能得到欧库，然后朝北面到房间 17。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch04_22.jpg"&gt;&lt;img alt="tp_ch04_22" src="https://blog.gocalf.com/images/2011/11/tp_ch04_22.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;小 BOSS&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 17：&lt;/strong&gt;这里是小 BOSS 的房间，砍断中间捆剑的绳子后激活小 BOSS，先用狼开感知能发现 BOSS 的本体，攻击后他会现出原形，这个时候切换回人形态用弓箭攻击，之后 BOSS 会靠近林克，再用剑砍他，随后他又会进入幽灵形态，如此反复几次可战胜 BOSS，随后可到北面的房间取得陀螺仪（旋转齿轮，Spinner），利用陀螺仪能在周围墙壁上像轨道一样的地方行动，注意在轨道上前进的时候不能攻击防御和做其他动作，但是可以按 B 键弹离轨道。回到房间 16，利用陀螺仪可通过东面的流沙到房间 18。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 18：&lt;/strong&gt;这个房间要充分利用陀螺仪的特性，先从正对面的轨道到 2 楼，在最左边的箱子处有 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h20"&gt;心之碎片 20&lt;/a&gt;，然后再用陀螺仪往回走，躲过中间的旋转机关后到两边都是轨道的地带，这里注意按 B 键左右跳来通过轨道上的断裂处，随后在轨道尽头会自己飞出来到一个封闭的小沙丘里，这里有另一条向上的轨道，用陀螺仪在上面移动来到 3 楼，有另一个双边轨道，上面有很多机关，注意左右跳跃躲避那些旋转机关后到门前面，进入后回到房间 13。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch04_23.jpg"&gt;&lt;img alt="tp_ch04_23" src="https://blog.gocalf.com/images/2011/11/tp_ch04_23.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 13：&lt;/strong&gt;这时是从房间右边的门回到房间，并取得大钥匙，回到房间正中，地上有一个和陀螺仪相吻合的凹槽，在上面用陀螺仪后可以将北面的墙壁移开并出现新的路，利用墙上轨道一直到顶端，破坏罐子可抓到一只精灵，跳到中间的高台上再用陀螺仪启动机关会升起另一段轨道，用陀螺仪上去一直通到最上部来到最终 BOSS 的房间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BOSS 战：&lt;/strong&gt;化石怪——斯塔罗德&lt;/p&gt;
&lt;p&gt;进入房间后见到了赞特，他将正中的巨龙遗骸复活并让其与林克战斗，在周围有一条环行轨道，可在上面利用陀螺仪转到斯塔罗德的背后再跳离轨道，朝斯塔罗德的脊椎处撞去同时再按 B 键进行攻击可以将其椎骨打碎，3 次攻击后斯塔罗德就会倒下，但是他并没有被消灭，其头骨会再次复活和林克战斗，普通攻击对斯塔罗德的头骨是无效的，同样利用陀螺仪在中间巨柱上的轨道向上移动，其间斯塔罗德会吐火球攻击林克，这时要跳到另一边的轨道上躲避，最后到达和斯塔罗德水平相当的位置再次用陀螺仪弹出后进行攻击，斯塔罗德的头部会落地，这时再用剑砍其头顶的剑，如此几次以后则可将其彻底消灭。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch04_24.jpg"&gt;&lt;img alt="tp_ch04_24" src="https://blog.gocalf.com/images/2011/11/tp_ch04_24.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;BOSS：化石怪——斯塔罗德&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wii.tgbus.com/glmj/gl/200611/20061129114849.shtml"&gt;《塞尔达传说：黄昏公主》图文全攻略&lt;/a&gt;&amp;nbsp;by WiiBbs 攻研部
Szh、三代鬼彻、天堂的翅膀&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cngba.com/thread-16520313-1-1.html"&gt;《塞尔达传说 黄昏公主》完美攻略研究&lt;/a&gt; by www.cngba.com 鸡蛋&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="游戏"></category><category term="Twilight Princess"></category></entry><entry><title>黎明公主攻略：第三章 深海鱼族的传说</title><link href="https://blog.gocalf.com/zelda-tp-ch3" rel="alternate"></link><published>2011-11-05T10:13:00+08:00</published><updated>2011-11-04T22:58:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-11-05:/zelda-tp-ch3</id><summary type="html">&lt;p class="first last"&gt;回到卡卡里科村，林克遇见塔洛，他看到了林克的英雄之弓，又闹着要林克表演箭术，并要林克射中西北山丘房子顶上的一根木棒，就算是救世主。&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;第三章 深海鱼族的传说（最后的影之碎片）&lt;/h2&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;卡卡里科村&lt;/h3&gt;
&lt;div class="section" id="id4"&gt;
&lt;h4&gt;新的旅行&lt;/h4&gt;
&lt;p&gt;回到卡卡里科村，林克遇见塔洛，他看到了林克的英雄之弓，又闹着要林克表演箭术，并要林克射中西北山丘房子顶上的一根木棒，就算是救世主。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;要看清那么远的物体也还是有点勉强，林克只好到商店买了一副鹰眼（Hawkeye），有了这个就能够看清楚远处的物体了。林克一箭射中目标，孩子们都非常佩服林克，并给了林克一片 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h09"&gt;心之碎片 09&lt;/a&gt;（射箭的时候不使用鹰眼才能得到心之碎片）。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch03_02.jpg"&gt;&lt;img alt="tp_ch03_02" src="https://blog.gocalf.com/images/2011/11/tp_ch03_02.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;买到了鹰眼&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;告别了孩子们，林克来到巴恩斯的炸弹商店，在这可以买到炸弹，利用它林克炸开村口泉水旁的一个石头，出现了一个山洞，林克进入后使用钢之靴潜入水中得到一个 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h10"&gt;心之碎片 10&lt;/a&gt;，出来后在炸开的山洞正上方还有一个巨石，使用炸弹箭将其炸开，会发现另一个 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h11"&gt;心之碎片 11&lt;/a&gt;。林克在村里做好了补给，准备继续去寻找失踪的伊莉娅。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch03_01.jpg"&gt;&lt;img alt="tp_ch03_01" src="https://blog.gocalf.com/images/2011/11/tp_ch03_01.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;拿到一个心之碎片&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h4&gt;死寂的王城&lt;/h4&gt;
&lt;p&gt;走出卡卡里科村，林克来到海拉尔平原，经过艾尔丁大桥，没走多远，第三堵黑暗之墙前出现在林克面前，进入黑暗世界，不远处发现了伊莉娅留下的包裹，随后追随伊莉娅的气味，进入了海拉尔城堡（Hyrule
Castle），跟着气味来到一间酒吧前，门是开着的。林克钻了进去，看到了伊莉娅，眼前还有一个陌生种族的病人，听到旁边的卫兵说这个可能是佐拉（Zora）族的后裔，通过他们的谈话还得知海利亚湖（Hylia
Lake）是佐拉鱼人出没的地区，林克在桌子的地图上看到了海利亚湖的位置，既然伊莉娅安然无恙，那么就动身前往海利亚湖吧。来到海利亚大桥上，林克发现桥上撒满了火药，原来兽人们早就埋伏在了这里，兽人从两边点燃了火药，林克进退两难，底下又是海利亚湖，看来只有跳下去了，林克迅速把附近的箱子推到桥边，然后爬上去坠入了海利亚湖。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;海利亚湖&lt;/h3&gt;
&lt;div class="section" id="id7"&gt;
&lt;h4&gt;冰湖，母爱&lt;/h4&gt;
&lt;p&gt;林克上岸后，来到一座奇怪的房屋前，听到房前的人说不远处有一个兽人弓箭手时常骚扰他，林克当然不会放过这个兽人弓箭手，看来这不是一个普通的弓箭手，他召唤来一只巨大的飞龙，骑到飞龙背上与林克周旋，就是这样林克也不会退缩，获胜后米德娜将飞龙驯服了。飞龙带着林克飞进了一个山洞，这里地势险要，稍不注意就会撞到峭壁上。飞出山洞，林克来到了佐拉河上游（Upper
Zora's
River），这里的河床都结冰了，林克跳下河床，沿着冰川向东前进，随后米德娜会带着林克攀登上北边的冰川，到达冰川顶部后，进入最北边的洞穴。这里又遇到了三个黑暗使者，消灭后出现了这个地区的黑暗空洞。接下来来到已经被冰冻的佐拉王国，米德娜记起了死亡山上的一块炙热的巨石，传送回死亡山，米德娜发动魔法将巨石传送到佐拉王座处，炙热的巨石将整个冰河都融化了，随后佐拉女皇鲁特拉（Rutela）的亡魂出现，她向林克表示感谢，她还请求林克找到并解救王子拉里斯（Ralis），难道就是海拉尔城中那个正被伊莉娅照顾的佐拉人？女皇承诺如果林克完成任务的话，会赐予林克水中呼吸的能力。林克一路返回到海利亚湖，上岸后发现一个洞穴，林克进入后找到最后一个光之精灵，它将最后一个光之容器交给林克。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch03_03.jpg"&gt;&lt;img alt="tp_ch03_03" src="https://blog.gocalf.com/images/2011/11/tp_ch03_03.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;完全结冰的海利亚湖&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch03_04.jpg"&gt;&lt;img alt="tp_ch03_04" src="https://blog.gocalf.com/images/2011/11/tp_ch03_04.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;死亡山上炙热的巨石，利用它来融化湖水&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;拉内鲁地区&lt;/h3&gt;
&lt;div class="section" id="id9"&gt;
&lt;h4&gt;再见影子虫&lt;/h4&gt;
&lt;p&gt;林克又踏上了收集光之泪的旅程，在精灵之泉的右边道路上不远的地方就有一只，往北尽头处的湖边还有一只，南边的草丛中藏有一只，把草打掉就可以看到。林克向西边游去，在一个小半岛上也有一只，向海利亚湖的南边游去，上岸后林克发现灌木，在遇到阴影怪物的南边，在一排有空隙的石头中，来回跳跃，会发现一支正在挖洞的虫。米德娜告诉他可以在这里召唤之前被收服的飞龙，飞龙带着林克飞进之前的那个洞穴，整个洞穴里一共有四支小虫子，林克用感知可以轻松发现到处乱飞的虫，让飞龙撞击虫子收集光之泪（用 Z 键锁定目标，然后快速抓住，在飞行时不能转身，如果没有抓住所有虫子就回到河的尽头话，就不得不重来一次了）。来到佐拉河上游，林克看到这里的女主人正被虫子吓得发抖，消灭虫子后，林克在河对岸找到嚎叫之岩，记下金狼出现的位置后，林克继续收集光之泪。林克顺着河向佐拉原住地（Zora's
Domain）游去，在水域西边的斜坡上有一只，在湖东边靠近雪峰的冰峰道路旁，米德娜会帮助林克攀登上去，途中会有一只虫子，往回走在小梯子处转身向高处的岩石跳上，顺着小路林克来到佐拉王座，虫子就在左边的墙上，林克撞击墙壁惊动虫子，然后杀掉获得光之泪。林克回到佐拉河上游，东南角的水道有两个佐拉亡魂，他们会带林克进入水道，游出来到了海拉尔城的外边，进入城中，来到酒馆外面，打碎角落的箱子就能发现一只虫子。虫子消灭完了，但是光之泪还有一颗，会在哪里呢？此时米德娜会带林克来到最后一只虫子的地方——海利亚湖的正中间。这是一只巨大的母虫，看来她就是罪魁祸首，母虫全身带电的时候，没有办法攻击，林克只好先躲到水里等她冲下来，待其身上电消失后，林克跳到她身上一阵狂咬，没多久虫子就会倒在水里，林克跳到她身上发动群体攻击将其消灭，结束战斗后得到了最后的光之泪。最后一位光之精灵拉内鲁（Lanayru）也变回了原形，他告诉林克，这个世界本来就是黑暗与光明交替的世界，光明离不开黑暗，黑暗也离不开光明，一旦力量失去了平衡，这个世界就会陷入混乱。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch03_05.jpg"&gt;&lt;img alt="tp_ch03_05" src="https://blog.gocalf.com/images/2011/11/tp_ch03_05.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;光之精灵拉内鲁（Lanayru）向林克讲述这个世界光与影的故事&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch03_06.jpg"&gt;&lt;img alt="tp_ch03_06" src="https://blog.gocalf.com/images/2011/11/tp_ch03_06.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;这是林克？&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h4&gt;护送马车&lt;/h4&gt;
&lt;p&gt;林克暂时不能完全理解拉内鲁的话，不过林克知道此时他还有重任在身。变回人形的林克从精灵洞窟出来后，一直沿着桥走，到达一间屋子边，在这里花 10 元坐大炮去到湖的上端。上去后找路回到海拉尔城，城外可以遇到金狼，见到它后，不死勇士会再次出现教授林克新的绝技。进城后可以花点时间在王城里晃晃，之前有捉到金色虫子的话还可以去王城城下町的东南街道的虫子屋里换个更大的钱包。之后林克一路来到特尔玛（Telma）的酒馆，终于可以和伊莉娅团聚了，但是她确显得不那么高兴，原来拉里斯的状况很糟糕，不及时救治可能会有生命危险，特尔玛记起卡卡里科村有位医术高明的人，一定就是牧师雷那多了，准备好马车，护送的责任自然落到了林克身上，途中的桥上再次遇到兽人首领阻挡林克一行的去路，下场当然不会很好过，这次他穿上了盔甲，用剑砍是没辙了，不过林克的骑射技术也不是盖的，林克又一次将他打败。之后道路还比较忙碌，林克一边要防止飞鸟放炸弹（要用弓箭将它们清理干净，不然马车会不断的转圈），还要防止马车被兽人射手的火箭烧着（马车着火后，要及时用回力标灭火），最后林克安全将他们送到了卡卡里科村，王子得救了。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch03_07.jpg"&gt;&lt;img alt="tp_ch03_07" src="https://blog.gocalf.com/images/2011/11/tp_ch03_07.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;护送马车（感觉这里还挺难的，一定要阻止飞鸟放炸弹）&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h4&gt;潜水服&lt;/h4&gt;
&lt;p&gt;此时佐拉女王应约出现，带着林克来佐拉王的墓穴，将佐拉之铠（Zora
Armor）交给了林克，从此林克就可以在水中自由的呼吸行动了（摇杆上代表上浮，下代表下潜，A 加速）。回到村中，来到巴恩斯的炸弹商店，他又研制出了新型的炸弹，这种炸弹可以在水里爆炸（要穿上铁鞋，脚沾地后才能使用），林克买下后马不停蹄地来到海利亚湖（可以炸开墓地湖中的石头走捷径），穿上佐拉之铠跳入湖中。林克游到水底，找到入口，但是被一个巨石堵住了，林克发现底下有一个裂缝，放个水炸弹将其炸开，水柱一下冲了出来，再放个水炸弹，借助水柱的冲力，炸弹会浮上去把巨石炸开，顺着洞一直往里游，林克来到了湖底神殿（Lakebed
Temple）。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch03_08.jpg"&gt;&lt;img alt="tp_ch03_08" src="https://blog.gocalf.com/images/2011/11/tp_ch03_08.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;穿上潜水服，向湖底出发！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3&gt;湖底神殿迷宫&lt;/h3&gt;
&lt;div class="figure"&gt;
&lt;img alt="tp_ch03_09" src="https://blog.gocalf.com/images/2011/11/tp_ch03_09.jpg" /&gt;
&lt;p class="caption"&gt;湖底神殿迷宫地图&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;来到海利亚湖底部找到一堵有岩石的墙壁，在下面的水泡中放置一枚水炸弹，随后水泡会把炸弹浮上去并把岩石炸开，然后就可以进入迷宫了。顺着水道一直游到尽头上岸后向北前进，爬上梯子向前跳抓住天花板上的机关打开通向北边的门。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 2：&lt;/strong&gt;放出炸弹箭炸下天花板上的钟乳石使其落下，创造一条前进的路后朝北前进进入房间 3。穿盔甲的怪物，要闪到后面才能伤害它，有了飞爪以后可以直接将它的甲夺走再杀。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 3：&lt;/strong&gt;房间中间有一个可以转动的楼梯，目前没办法控制，只能先从东边或西边的出口出去。一开始从梯子下去，在底部朝右边走，一直走到屋子的南边，然后跳过去抓住黄色的机关，可以转动台阶。再上到上层，到屋子上层的东边，同样抓住机关，这下可以通过底面西边的门来到房间 4 了。注意东北面的箱子里有地图。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 4：&lt;/strong&gt;用炸弹箭射下天花板上的钟乳石后，穿过隧道舷梯向右。通过岩石可以到达中央的石柱，可以看到附近还有一个钟乳石，往那边走，在箱子里能得到一把小钥匙，然后回到房间 3，来到上层西边的门前，得到欧库，打开门进入房间 5。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 5：&lt;/strong&gt;天花板上有钟乳石，打下来后可以借助其爬到墙上的藤蔓上。然后看到开关，跳过去抓住将它打开，接着向西北面移动。在西面林克能看到破损的墙壁，
先不管它，通过门来到南面，在南面的门处的箱子内可以得到小钥匙。有了这个，回到刚才看到的破墙那，炸开就可以通向房间 6。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 6：&lt;/strong&gt;当林克到达水闸控制室这里，顺着屋子中间的洞来到北边。一路向前到达顶部的房间内，爬上梯子打开机关，开始放水。当水流入屋子后，可以直接跳进水中，找到水中心台子上的另一个机关，拉动机关让水流到房间 3 内。通过南面的门在水车下可以发现一个小精灵。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 4：&lt;/strong&gt;房间内的第三层开始转动，跳上去通过北面的门到达房间 7。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 7：&lt;/strong&gt;这里有个装有小钥匙的箱子，拿到后返回房间 4，通过转动的平台到达西面的门，从这里进入房间 7，向前打开门可到达房间 8。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 8：&lt;/strong&gt;在尽头有个岩石阻挡了去路，换上负重靴，下到水中，在石头下安置水炸弹，即可通过并前往房间 9。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 9：&lt;/strong&gt;这里天花板上有一个小 BOSS：青蛙。注意在他跳起来后地上的影子，躲开影子然后攻击他的舌头使其张开嘴，这时再向嘴里射炸弹箭便能将其消灭，并且还能得到道具飞爪（Clawshot）。用飞爪攻击屋子南面门上的机关使门打开后，回到房间 3。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 3：&lt;/strong&gt;用飞爪可以在房间中心的吊灯上发现 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h13"&gt;心之碎片 13&lt;/a&gt;，同样用飞爪也能在箱子内得到 20 卢比。然后到上层的西面使用飞爪击中机关，使楼梯转动，形成一个水渠，让进入房间的流水流向东面的出口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 10：&lt;/strong&gt;熟练运用飞爪不断爬高，到达上层的出口进入房间 11（另外藤条也可以用飞爪抓）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 11：&lt;/strong&gt;利用飞爪朝东面移动进入房间 12。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 12：&lt;/strong&gt;一直前进沿着旋梯上到顶部，途中的断处可以用飞爪通过，之后跳到机关上开始放水。这里有个箱子可以用飞爪上去后取得指南针。返回房间 10。用飞爪击打东面的机关，下到下面的平台上，从东面的门到达房间 13。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 13：&lt;/strong&gt;房间 13 有三条渠道，都通往南面。另外这里有 2 条路可以通往房间 14，其中一条过去后发现拿不到钥匙，需要返回再朝左下游找到另一条路，接着可从上方跳到房间 14 并取得大钥匙，然后回到房间 3 水中台子上的通往最终房间的大门。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BOSS 战：&lt;/strong&gt;水底兽——摩菲尔（Twilit Aquatic——Morpheel）&lt;/p&gt;
&lt;p&gt;穿上钢之靴降到水底后会遇到摩菲尔，第一阶段的时候会见到象海葵一样的它，远离周围的触手并保持在飞爪射程之内，然后将在其触手内不断移动的眼球抓出来进行攻击，中途摩菲尔会释放一些炸弹鱼进行干扰，如果抓到炸弹鱼的话要迅速离开其爆炸范围，几次攻击之后摩菲尔会露出本体。此后脱掉钢之靴游到摩菲尔的上方，找准时机锁定 Boss 的额头，用飞爪抓住其头顶处的眼睛后进行攻击，三次之后就可战胜摩菲尔。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch03_10.jpg"&gt;&lt;img alt="tp_ch03_10" src="https://blog.gocalf.com/images/2011/11/tp_ch03_10.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;湖底神殿迷宫中的机关&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch03_11.jpg"&gt;&lt;img alt="tp_ch03_11" src="https://blog.gocalf.com/images/2011/11/tp_ch03_11.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;BOSS：水底兽——摩菲尔（Twilit Aquatic——Morpheel）第一阶段&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/11/tp_ch03_12.jpg"&gt;&lt;img alt="tp_ch03_12" src="https://blog.gocalf.com/images/2011/11/tp_ch03_12.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;BOSS：水底兽——摩菲尔（Twilit Aquatic——Morpheel）现出原形&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wii.tgbus.com/glmj/gl/200611/20061129114849.shtml"&gt;《塞尔达传说：黄昏公主》图文全攻略&lt;/a&gt;&amp;nbsp;by WiiBbs 攻研部
Szh、三代鬼彻、天堂的翅膀&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cngba.com/thread-16520313-1-1.html"&gt;《塞尔达传说 黄昏公主》完美攻略研究&lt;/a&gt; by www.cngba.com 鸡蛋&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://tv.duowan.com/0710/57154029137.html"&gt;Wii《塞尔达传说：黎明公主》流程攻略&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="游戏"></category><category term="Twilight Princess"></category></entry><entry><title>自动机编程游戏：Manufactoria（流水线编程）</title><link href="https://blog.gocalf.com/manufactoria" rel="alternate"></link><published>2011-11-03T21:42:00+08:00</published><updated>2011-11-03T21:42:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-11-03:/manufactoria</id><summary type="html">&lt;p class="first last"&gt;前几天在 Matrix67 的博客里看到了这个益智小游戏：Manufactoria，抽空玩了玩，虽然关卡不算多，但非常有趣。这是个程序设计类的游戏，感觉就像是个状态机吧（有限自动机？），从纸带上读取数据，具有分支和写数据的功能，利用简单的几种原件组装成一台可以识别特定模式或者完成指定运算的机器。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;前几天在 &lt;a class="reference external" href="http://www.matrix67.com/blog/"&gt;Matrix67&lt;/a&gt; 的博客里看到了这个益智小游戏：&lt;a class="reference external" href="http://www.matrix67.com/blog/archives/3306"&gt;Manufactoria&lt;/a&gt;，抽空玩了玩，虽然关卡不算多，但非常有趣。&lt;/p&gt;
&lt;p&gt;这是个程序设计类的游戏，感觉就像是个状态机吧（有限自动机？），从纸带上读取数据，具有分支和写数据的功能，利用简单的几种元件组装成一台可以识别特定模式或者完成指定运算的机器。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;游戏的背景大概是一家工业机器人（Industrial
Robotics）生产厂请你（机器人工程师，Robotics
Engineer）来测试和修复他们制造的机器人，所谓的“测试”就是对机器人内部纸带上的红蓝色点进行检测，判断其是否满足指定的模式；“修复”就是对纸带上的红蓝色点进行处理或者运算，产生指定的结果。这个游戏还支持自定义关卡，看到过有人提出求最大公约数之类的问题。&lt;/p&gt;
&lt;p&gt;不知道别人是怎么思考的，反正我是先画想好用什么算法，然后在纸上画状态图把细节尤其是边界条件考虑清楚，然后开始布局，通过验证之后再不断地优化（减少使用的元件数量）。&lt;/p&gt;
&lt;p&gt;开头几关非常简单，玩了七八关之后，每开启新的一关就在想，这怎么可能实现啊，但解决了之后又发现其实很简单。主要还是开始没有适应它的这种工作方式吧。&lt;/p&gt;
&lt;p&gt;我的建议是每个程序员都应该玩一下这个游戏，我甚至考虑可以把它用在第一轮面试上，跟 candidate 随便聊聊天，让他玩一两关看看他的思路如何。&lt;/p&gt;
&lt;p&gt;Matrix67 的这篇博客是一年多之前发的了，后来我又找到了这个游戏的 &lt;a class="reference external" href="http://pleasingfungus.com/"&gt;官方网站&lt;/a&gt;（&lt;a class="reference external" href="http://pleasingfungus.com/#!/Manufactoria"&gt;http://pleasingfungus.com/#!/Manufactoria&lt;/a&gt;），发现游戏版本更新了，细节上有不少改进，增加了不少测试用例，统计出来的运行时间也有所变化（另外要注意的是，在新版本中如果想让两个传送带正交于某个方格，需要按 Shift 键，否则就会替换）。&lt;/p&gt;
&lt;embed height="480" pluginspage="http://www.macromedia.com/go/getflashplayer" quality="high" src="http://pleasingfungus.com/Manufactoria/Manufactoria.swf" type="application/x-shockwave-flash" width="640"&gt;&lt;/embed&gt;&lt;p&gt;（如果上面的 Flash 无法加载，可以尝试我在这里上传的：&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/11/Manufactoria.swf"&gt;Manufactoria.swf&lt;/a&gt;。）&lt;/p&gt;
&lt;p&gt;分享一下我在各关的解法（进入一个关卡，点击磁盘图标，在文本框中粘贴解法代码即可；注意贴入的代码中的关卡序号不需要与当前所在的关卡序号一致，游戏会自动跳转到正确的关卡，除非你还没有激活那一关）。另外很多关卡都有无数种解法，我一般会尽量优化使之元件个数最少（比较测试时间没有太大意义，一旦下一个版本的测试用例变化，测试时间就不一样了）。&lt;/p&gt;
&lt;p&gt;下面这张图是游戏当前版本（v1.30）的关卡分布图，为了方便查找，我特意用红色字体添加了关卡序号在每关图标的左上角处。其中第 29 到 31 关是隐藏关，要通过了第 24 关才能显示出来。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="manufactoria-main" src="https://blog.gocalf.com/images/2011/11/manufactoria-main.png" /&gt;
&lt;p class="caption"&gt;Manufactoria 主界面（添加了关卡序号）&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;我的各关卡解决方案（第 30 和 31 关没有时间优化了，其他关都是尽可能优化过的）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;?lvl=1&amp;amp;code=c12:6f3;c12:7f3;c12:8f3;
?lvl=2&amp;amp;code=c12:8f3;p12:6f2;c12:7f3;
?lvl=3&amp;amp;code=p12:5f3;c13:5f0;p11:6f2;c11:5f3;p11:8f2;c11:7f3;c11:9f3;c11:10f2;
?lvl=4&amp;amp;code=p12:6f3;c11:6f2;c12:7f3;c12:8f3;
?lvl=5&amp;amp;code=p12:4f3;c12:6f3;c12:7f3;c12:8f3;c12:9f3;c12:10f3;p11:4f6;p13:4f4;p11:5f6;p13:5f4;c12:5f3;
?lvl=6&amp;amp;code=c12:4f3;p12:5f2;p12:6f2;c12:8f3;c12:9f3;c12:10f3;p12:7f7;c13:7f0;c11:7f1;c11:6f1;c11:5f2;
?lvl=7&amp;amp;code=c12:8f3;c12:9f3;c12:10f3;c11:3f3;c11:6f1;c12:5f3;c12:6f3;c13:3f3;c13:6f1;c12:7f3;p12:4f3;p11:4f6;p11:5f0;p13:4f4;p13:5f2;
?lvl=8&amp;amp;code=p12:6f3;b11:6f3;r13:6f3;c11:7f2;c13:7f0;c12:7f3;c12:8f3;
?lvl=9&amp;amp;code=c12:7f3;c12:8f3;c12:9f3;p12:5f3;g11:5f2;y13:5f0;c12:6f3;
?lvl=10&amp;amp;code=g12:4f3;p12:5f3;b11:5f2;r13:5f0;y12:6f3;c12:7f3;c12:8f3;c12:9f3;c12:10f3;
?lvl=11&amp;amp;code=c12:8f3;c12:9f3;p12:5f3;p13:5f3;c11:5f2;c14:5f0;c12:6f3;c12:7f3;
?lvl=12&amp;amp;code=r12:4f3;r12:5f3;r12:6f3;c12:7f3;c12:8f3;c12:9f3;c12:10f3;
?lvl=13&amp;amp;code=c12:10f3;c12:11f3;c12:12f3;q12:2f7;y12:3f3;r12:4f2;c12:5f1;c12:7f3;c12:8f3;y13:2f0;q13:3f6;p13:4f6;q13:5f4;b13:6f3;q13:7f4;r13:8f1;b14:3f3;c14:4f0;c12:9f3;
?lvl=14&amp;amp;code=c12:10f3;c12:11f3;c12:12f3;q12:2f7;y12:3f3;c12:7f3;c12:8f3;y13:2f0;q13:3f6;q13:7f4;c14:4f0;c12:9f3;p13:4f2;r14:3f3;r13:6f3;b13:8f1;r12:4f2;q13:5f2;b14:5f1;
?lvl=14&amp;amp;code=c12:10f3;c12:11f3;c12:12f3;c12:8f3;c12:9f3;r12:4f3;p13:5f2;r13:7f3;q13:8f4;b13:9f1;b12:6f1;c12:5f2;q13:4f0;q13:6f4;q12:2f7;y13:2f0;y12:3f3;c13:3f1;
?lvl=15&amp;amp;code=c11:5f3;c13:5f3;c13:6f0;p11:11f3;c12:11f3;i11:12f7;c10:11f3;c10:12f2;p12:4f2;c12:3f3;c10:7f3;c10:8f2;c10:9f3;p11:7f3;c11:8f3;p11:9f3;c12:7f3;c12:8f0;c12:9f3;c12:10f0;c11:6f3;c12:6f0;c10:10f2;c11:10f3;p12:5f1;
?lvl=16&amp;amp;code=c12:4f3;p12:5f2;p12:6f3;c12:7f3;c12:8f3;c12:9f3;c12:10f3;p13:6f7;
?lvl=17&amp;amp;code=y12:4f3;c12:7f3;c12:8f3;c12:9f3;c12:10f3;p12:6f3;i12:5f7;p11:6f4;b11:7f1;p11:5f1;r10:5f2;q11:4f1;
?lvl=18&amp;amp;code=c10:4f2;b10:5f1;c11:4f2;p11:5f3;c12:4f3;p12:5f3;c13:4f0;p13:5f3;c14:4f0;r14:5f1;y12:3f3;q12:6f2;p12:7f3;p11:7f3;p13:7f3;y10:7f1;y14:7f1;c10:6f1;c14:6f1;c12:8f3;c12:9f3;c12:10f3;c12:11f3;
?lvl=19&amp;amp;code=c12:10f3;c12:11f3;c12:12f3;c12:6f3;c12:8f3;c12:9f3;g12:3f3;y12:4f3;q12:5f0;i12:2f7;c12:7f3;p15:3f3;b14:3f3;r16:3f3;c16:4f0;c15:4f0;y14:4f3;c13:5f0;q14:5f7;p14:6f1;r13:6f2;b15:6f0;c9:2f2;r9:3f1;c10:2f2;p10:3f1;c10:4f1;c10:5f1;c10:6f1;c11:2f2;b11:3f1;b11:4f0;p11:5f0;r11:6f0;b13:1f2;g13:2f2;p14:1f3;q14:2f1;r15:1f0;c15:2f3;
?lvl=20&amp;amp;code=c12:12f3;c12:6f3;c12:8f3;c9:2f2;r9:3f1;c10:2f2;p10:3f1;c10:4f1;c10:5f1;c10:6f1;c11:2f2;b11:3f1;b11:4f0;p11:5f0;r11:6f0;g12:3f3;y12:4f3;q12:5f0;i12:2f7;g13:2f2;q14:2f1;c15:2f3;p14:1f3;b13:1f2;r15:1f0;p15:3f3;b14:3f3;r16:3f3;c16:4f0;c15:4f0;y14:4f3;c13:5f0;q14:5f7;p14:6f1;r13:6f2;b15:6f0;y12:7f3;p11:7f7;p13:7f7;c11:8f1;c13:8f1;p12:9f3;q11:9f0;q13:9f6;p10:9f2;p14:9f0;r10:8f3;r14:10f1;b10:10f1;b14:8f3;q12:10f2;q12:11f2;
?lvl=21&amp;amp;code=c12:7f3;c12:8f3;c12:9f3;c12:10f3;c12:11f3;c12:12f3;c12:6f3;p12:3f3;c12:4f3;c12:5f3;y12:2f3;r8:2f2;p9:2f1;p9:3f4;b9:4f1;b10:1f3;p10:2f6;i10:3f1;c11:3f0;q11:2f1;
?lvl=22&amp;amp;code=c12:11f3;c12:12f3;c12:9f3;c12:10f3;c10:5f2;c10:7f1;g11:2f2;p11:3f0;y11:4f1;q11:6f7;q11:8f7;p12:3f3;c12:5f3;q12:6f7;q12:8f7;y13:3f0;q13:6f7;q13:8f7;c14:5f0;c14:7f1;c12:2f3;r12:4f3;r14:8f1;r10:8f1;p12:7f0;g10:6f1;c11:5f2;c13:5f0;y14:6f1;
?lvl=23&amp;amp;code=c12:12f3;c12:10f3;c12:11f3;c12:9f3;p12:4f3;p10:4f2;r10:3f3;b10:5f1;p14:4f0;r14:5f1;b14:3f3;c12:8f3;c11:3f2;c13:3f0;p12:6f3;b11:6f2;r13:6f0;y12:3f3;g12:2f3;g13:5f2;g11:5f0;q13:4f6;q11:4f0;q12:5f6;q12:7f2;
?lvl=24&amp;amp;code=c12:9f3;c12:10f3;c12:11f3;c12:6f3;c12:7f3;c12:8f3;c12:12f3;b10:3f3;c10:4f2;r10:5f1;p11:4f6;q11:5f4;y12:3f3;p12:4f3;c12:5f3;p13:4f4;q13:5f2;r14:3f3;c14:4f0;b14:5f1;q13:3f6;q11:3f0;c12:2f3;c11:2f2;c13:2f0;
?lvl=25&amp;amp;code=y12:5f3;p12:6f3;r11:6f2;b13:6f0;q12:7f2;c12:8f3;c12:9f3;
?lvl=26&amp;amp;code=y12:5f3;p12:6f3;c13:6f0;b11:6f2;q12:7f2;c12:8f3;c12:9f3;
?lvl=27&amp;amp;code=c12:10f3;g12:4f3;y12:5f3;p12:6f3;b11:6f2;q13:6f6;p14:6f0;b14:5f3;c13:5f0;r14:7f1;g13:7f2;q12:7f6;p12:8f3;b11:8f2;r13:8f0;q12:9f2;
?lvl=28&amp;amp;code=y12:3f3;c12:9f3;c12:10f3;c12:11f3;q11:5f5;p12:5f3;q13:5f1;c12:4f3;b11:4f2;r13:4f0;y10:5f3;y14:5f3;c10:6f2;c14:6f0;b11:6f2;r13:6f0;p12:6f3;c12:8f3;q12:7f2;
?lvl=29&amp;amp;code=p12:5f3;c12:9f3;c12:10f3;c12:11f3;p11:3f1;c11:4f1;q11:5f4;p13:3f1;c13:4f1;q13:5f2;r10:4f3;p10:5f2;b10:6f1;b14:4f3;p14:5f0;r14:6f1;q12:6f0;q12:7f0;c12:8f3;g12:3f3;c12:4f3;
?lvl=30&amp;amp;code=c12:4f3;g14:5f3;q11:5f1;q13:5f5;c14:7f3;q15:8f5;q13:8f1;g12:8f3;g16:8f3;c11:9f3;c13:9f3;c15:10f0;c14:10f0;c12:10f3;c12:12f2;c13:12f2;c14:12f2;c15:12f2;c16:12f2;c17:12f2;c18:12f1;c18:11f1;c18:10f1;c18:9f1;c18:8f1;c18:7f1;c18:6f1;c18:5f1;c18:4f1;c18:3f0;c17:3f0;c16:3f0;c15:3f0;c14:3f0;c13:3f0;q12:11f7;p12:5f7;c11:6f0;c14:6f3;p14:8f3;b13:7f2;r15:7f0;q12:9f3;g13:10f0;y11:10f2;b13:4f0;r11:4f2;q12:6f7;c14:9f2;c15:9f1;q16:10f3;c16:9f3;c17:10f3;c17:11f0;c16:11f0;c15:11f1;c9:12f2;c10:11f3;p10:12f7;q10:13f3;c11:11f0;q11:13f3;c6:9f3;c6:10f2;g7:8f3;q7:9f3;c7:10f2;b8:7f2;q8:8f1;c9:5f3;g9:6f3;c9:7f3;p9:8f3;c10:6f0;r10:7f0;q10:8f5;c9:9f2;c10:9f1;c11:8f2;c8:10f2;c9:10f2;c10:10f2;c8:9f3;g12:2f0;y11:2f3;c11:3f2;c12:3f3;c10:5f0;
?lvl=31&amp;amp;code=c18:5f1;c18:4f1;c18:3f0;c17:3f0;c16:3f0;c15:3f0;c14:3f0;r13:2f3;g12:2f2;g13:3f0;c12:3f0;p10:3f0;c11:3f0;q10:2f2;q10:4f6;r11:4f1;b11:2f3;g10:1f0;g10:5f2;i9:4f7;b6:8f3;g7:7f3;p7:8f3;b8:6f2;q8:7f1;b8:8f3;c9:6f3;p9:7f3;c9:8f2;r10:6f0;q10:7f5;c10:8f1;c11:7f2;b11:8f3;g12:7f3;p12:8f3;b13:6f2;q13:7f1;r13:8f3;c14:6f3;p14:7f3;c14:8f2;c14:9f0;r15:6f0;q15:7f5;c15:8f1;r15:9f0;g16:7f3;c16:8f3;c9:5f3;c11:5f2;c12:5f2;c13:5f2;c14:5f3;p15:10f0;r15:11f0;c16:9f3;c16:10f0;b6:11f2;p7:11f3;q7:12f3;r8:11f0;c8:12f2;q9:12f5;c7:10f3;r14:11f1;c14:10f0;c13:10f0;c12:10f0;c11:10f0;c10:10f0;c9:10f0;c8:10f0;b13:9f3;r11:9f3;c9:11f2;c10:11f2;c11:11f2;c12:11f2;c13:11f3;i13:12f5;c13:13f2;c14:13f2;c15:13f2;c16:13f2;c17:13f2;c18:13f1;c18:12f1;c18:11f1;c18:10f1;c18:9f1;c18:8f1;c18:7f1;c18:6f1;q10:12f6;c10:13f2;c11:13f2;g11:12f2;c14:12f2;c15:12f2;c16:12f2;c17:12f1;c17:11f1;c17:10f1;c17:9f1;c17:8f1;c17:7f1;c17:6f1;c17:5f0;c16:5f0;c15:5f0;g12:12f2;r8:9f3;b6:9f3;c6:10f2;i9:3f6;c8:4f2;c9:1f3;c9:2f3;c8:3f3;
(END)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;～～～～～～～～～～ 分隔符&amp;nbsp;～～～～～～～～～～&lt;/p&gt;
&lt;p&gt;以下内容有剧透，三思而后看。&lt;/p&gt;
&lt;p&gt;～～～～～～～～～～ 分隔符&amp;nbsp;～～～～～～～～～～&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Level 1: Robotoast! ACCEPT: Move robots from the entrance (top) to the exit (bottom)!&lt;/dt&gt;
&lt;dd&gt;没有任何悬念，用 3 个元件，耗时 32764（注意这是 v1.30 里的计时单位，在老版本中大概是 0:02）。&lt;/dd&gt;
&lt;dt&gt;Level 2: Robocoffee! If a robot's string starts with blue, accept. Otherwise, reject!&lt;/dt&gt;
&lt;dd&gt;要求接受以蓝色开头的机器人。也没有任何可以商量的，3 个元件，耗时 24572。&lt;/dd&gt;
&lt;dt&gt;Level 3: Robolamp! ACCEPT: if there are three or more blues!&lt;/dt&gt;
&lt;dd&gt;要求接受纸带中有至少 3 个蓝点的机器人。8 个元件，112570 时间。&lt;/dd&gt;
&lt;dt&gt;Level 4: Robofish! ACCEPT: if a robot contains NO red!&lt;/dt&gt;
&lt;dd&gt;要求接受没有红点的机器人。4 个元件，32764 时间。&lt;/dd&gt;
&lt;dt&gt;Level 5: Robobugs! ACCEPT: if the tape has only alternating colors!&lt;/dt&gt;
&lt;dd&gt;如果纸带上的颜色是交替出现的（没有连续的红色或蓝色）就接受。6 个元件，32900 时间。&lt;/dd&gt;
&lt;dt&gt;Level 6: Robocats! ACCEPT: if the tape ends with two blues!&lt;/dt&gt;
&lt;dd&gt;如果最后两个颜色是蓝色则接受。11 个元件，182272 时间。&lt;/dd&gt;
&lt;dt&gt;Level 7: Robobears! ACCEPT: Strings that begin and end with the same color!&lt;/dt&gt;
&lt;dd&gt;如果第一个和最后一个色点颜色相同则接受。注意没有色点和只有一个色点这两种特殊情况。15 个元件，176136 时间。&lt;/dd&gt;
&lt;dt&gt;Level 8: RC Cars! OUTPUT: The input, but with the first symbol at the end!&lt;/dt&gt;
&lt;dd&gt;把第一个色点放到最后去。7 个元件，49144 时间。&lt;/dd&gt;
&lt;dt&gt;Leve 9: Robocars! OUTPUT: Replace blue with green, and red with yellow!&lt;/dt&gt;
&lt;dd&gt;把蓝色和红色分别换成了绿色和黄色。7 个元件，229374 时间。&lt;/dd&gt;
&lt;dt&gt;Level 10: Robostilts! OUTPUT: Put a green at the beginning and a yellow at the end!&lt;/dt&gt;
&lt;dd&gt;在色带的最前端放一个绿色，末尾处放一个黄色。毫无悬念，9 个元件，53244 时间。&lt;/dd&gt;
&lt;dt&gt;Level 11: ACCEPT: With blue as 1 and red as 0, accept odd binary strings!&lt;/dt&gt;
&lt;dd&gt;只接受奇数数字，也就是最后一位是蓝色的。至于空色带就无所谓了，严格来讲应该是不接受，但至少这个版本里没有这样的测试数据。8 个元件，167931 时间。&lt;/dd&gt;
&lt;dt&gt;Level 12: Soldiers! OUTPUT: With blue as 1 and red as 0, multiply by 8!&lt;/dt&gt;
&lt;dd&gt;要把输入的数字乘以 8，程序员对这个应该是得心应手了，再末尾添加三个 0（红色）即可。7 个元件，65520 时间。&lt;/dd&gt;
&lt;dt&gt;Level 13: Officers! OUTPUT: With blue as 1 and red as 0, add 1 to the binary string!&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;给输入的数字做加 1 操作。开始的时候感觉是无法完成的，但仔细想想就很简单。加 1 操作，从二进制的角度来看，就是把末尾的 1 都变成 0，最后一个 0 变成 1。主要的难点是要从最后一位往前加，所以要不端地循环，每次都处理最后一个没有处理过的色点。另外在优化的时候发现，可以先把末尾的 1 变成黄色，这样就不需要再另外使用分隔符号了。分隔符用来标记字串的中止以及当前处理到的位置。&lt;/p&gt;
&lt;p class="last"&gt;19 个元件，81580 时间。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Level 14: Generals! OUTPUT: Substract 1 from the binary string! (Input&amp;gt;= 1)&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;减 1 操作，跟第 13 关其实是一样的，红色和蓝色互换就好了。19 个元件，79750 时间。&lt;/p&gt;
&lt;p class="last"&gt;但这一关还可以再稍微调整一下布局，变成 18 个元件，81686 时间。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Level 15: Robotanks! ACCEPT: With blue as 1 and red as 0, accept binary strings &amp;gt; 15!&lt;/dt&gt;
&lt;dd&gt;要求接受大于 15 的数字。也就是要求大于或等于 16，即 1 后面至少有四个二进制位。于是就是要判断第一个蓝色后面是否至少有四个色点，不论颜色。25 个元件，19958 时间。&lt;/dd&gt;
&lt;dt&gt;Level 16: Robospies! ACCEPT: With blue as 1 and red as 0, accept natural powers of four!&lt;/dt&gt;
&lt;dd&gt;要求接受 4 的幂，也就是第一个蓝色后面必须恰好有偶数（包括 0）个红色色点。注意要忽略掉开头的红色。8 个元件，57372 时间。&lt;/dd&gt;
&lt;dt&gt;Level 17: Androids! ACCEPT: Some number of blue, then the same number of red!&lt;/dt&gt;
&lt;dd&gt;要求纸带上的色点必须是若干个蓝色后面跟着同样数量的红色。开始也是觉得很难，主要是没有办法计数。当然解决办法就是一次一次循环，每次循环中判断一对红蓝色点。对于这种需要循环处理的问题，我一般都用一个黄色作为分隔符作为字符串的终结标记。12 个元件，63041 时间。&lt;/dd&gt;
&lt;dt&gt;Level 18: Robo-children! ACCEPT: An equal number of blue and red, in any order!&lt;/dt&gt;
&lt;dd&gt;判断色带上蓝色和红色的数量是否恰好相等。依旧是每次循环检查一对。23 个元件，266582 时间。&lt;/dd&gt;
&lt;dt&gt;Level 19: Police! OUTPUT: Put a yellow in the middle of the (even-length) string!&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;输入的色带上有偶数个色点（不用判断是否满足），要求在中间位置插入一个黄色。这一关开始想了好久，排满了整个棋盘才搞定，后来一直优化到 40 个元件。想到了两种方案，一种是在颜色串的首尾各放一个色点，每次循环的时候让两个色点分别向中间移动一格，直到二者相遇。另一种是用起始位置放两个色点，每次循环的时候一个色点往后移动一格，另一个色点往后移动两个。我最后的优化版是采用第二种方法的。40 个元件，291584 时间。&lt;/p&gt;
&lt;p class="last"&gt;如果输入的色带上有奇数个色点，那我的算法会在中间色点的后方插入黄色。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Level 20: Judiciary! ACCEPT: (Even-length) strings that repeat midway through!&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;判断色带上的色点（偶数个）是否恰好前半部分与后半部分的排列完全一样。比如如果前半部分是红蓝红红蓝，后半部分也必须是红蓝红红蓝。这一关我是直接利用了第 19 关和第 29 关（恰好我是先完成了第 29 关才回过头玩的这关），即先给这个颜色串的中间位置添加一个黄色（直接照搬第 19 关的布局），然后利用第 29 关的布局判断黄色分割的两个子串是否完全一致。&lt;/p&gt;
&lt;p class="last"&gt;52 个元件，319428 时间。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Level 21: Teachers! ACCEPT: X blue, then X red, then X more blue, for any X!&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;要求色带上恰好是有若干个蓝色，跟着同样数目的红色和另外同样数目个蓝色。也可以是一个色点都没有。跟第 17 关的算法完全一样，只要再考虑考虑布局即可。&lt;/p&gt;
&lt;p class="last"&gt;20 个元件，76590 时间。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Level 22: Politicians! ACCEPT: If there are exactly twice as many blues as red!&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;判断色带上蓝色是否恰好是红色的两倍。这一关其实跟第 18 关没有太大区别，一个简单高效的解决办法就是先把蓝色减半，然套用第 18 关的布局来检测减半后的蓝色是否与红色数目相等。&lt;/p&gt;
&lt;p&gt;给蓝色减半的时候，比较传统的办法是用一个黄色作为色串终止符，从头开始，每读到一个红色就写一个红色，读到两个蓝色之后写一个蓝色。或着稍微变化一下，不用额外的黄色作终止符，而是在遍历的时候直接用黄色替换红色，用一个绿色替换两个蓝色。&lt;/p&gt;
&lt;p class="last"&gt;用 29 个元件，296870 时间。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Level 23: Academics! OUTPUT: Reverse the input string!&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;把输入的颜色串反转。基本的方法就是把第一个色点放到色串的最后，再把第二个色点放到倒数第二位。除了用一个黄色标记色串的终止外，在用一个绿色分割尚未处理的色串和部分反转了的色串。&lt;/p&gt;
&lt;p class="last"&gt;用 25 个元素，227328 时间。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Level 24: Engineers! ACCEPT: Perfectly symmetrical strings!&lt;/dt&gt;
&lt;dd&gt;判断颜色串是否是对称的。也比较简单啦，每次用第一个色点做分支，在每个分支里判断最后一个色点，如果跟第一个一样则继续，否则丢弃。用 25 个元件，47696 时间。&lt;/dd&gt;
&lt;dt&gt;Level 25: Roborockets! OUTPUT: Swap blue for red, and red for blue!&lt;/dt&gt;
&lt;dd&gt;把红蓝颜色互换。毫无悬念，7 个元件，229374 时间。&lt;/dd&gt;
&lt;dt&gt;Level 26: Roboplanes! OUTPUT: All of the blue, but none of the red!&lt;/dt&gt;
&lt;dd&gt;保留输入中的所有蓝色，丢掉红色。跟第 25 关唯一的区别就是遇到红色后不再写回到色带上。7 个元件，22526 时间。&lt;/dd&gt;
&lt;dt&gt;Level 27: Rocket Planes! OUTPUT: The input, but with all blues moved to the front!&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;把输入中的蓝色都移动到红色的前面。&lt;/p&gt;
&lt;p&gt;这一关有点儿意思，我最后设计的方法是直接利用第 23 关反转输入的方法。在第 23 关的布局中，中轴线左边是针对第一个是蓝色的处理，右边是针对第一个是红色的处理。在这一关里依旧保留右半边，但把左半边改成遇到蓝色就直接写一个蓝色回去。最后的效果就是不断地把红色往最后写，直到红色全都聚集到后半部分。&lt;/p&gt;
&lt;p class="last"&gt;用 16 个元件，12390 时间。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Level 28: Robomecha! OUTPUT: The input, but with the last symbol moved to the front!&lt;/dt&gt;
&lt;dd&gt;把最后一个色点放到最前面。很简单，19 个元件，606214 时间。&lt;/dd&gt;
&lt;dt&gt;Level 29: Seraphim! ACCEPT: Two identical strings, separated by a green!&lt;/dt&gt;
&lt;dd&gt;判断由绿色点分开的两个色串是否完全相等。也挺简单的，补一个绿色作为终止符，取出色串一的第一个颜色，把其他的写回纸带，判断色串二的第一个颜色跟它是否一样；这时候两个色串都去掉了第一个颜色，而且刚好色串二跟色串一交换了顺序，再重复用同样的方法判断下去即可。21 个元件，166182 时间。&lt;/dd&gt;
&lt;dt&gt;Level 30: Ophanim! ACCEPT: Read the tape as two numbers, A and B, split by a green: accept if A &amp;gt; B!&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;由绿色点分开的两个色串，从二进制数字的角度判断是否前一个数大于后一个数。&lt;/p&gt;
&lt;p class="last"&gt;我用的方法是求 B - A，当然不用记录完整的结果，只要记录借位状态即可。不过我没有再进行优化，现在用了 88 个元件，60617 时间。估计能优化掉一小半的元件。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Level 31: Metatron! OUTPUT: Read the tape as two numbers, A and B, split by a green: output A + B!&lt;/dt&gt;
&lt;dd&gt;计算被绿色分开的两个数字之和。基本上就是从最低位逐位加上去。同样是还没有优化，应该能减少一半以上的元件。现在用 120 个元件，108630 时间。&lt;/dd&gt;
&lt;/dl&gt;
</content><category term="游戏"></category><category term="Puzzle"></category></entry><entry><title>求内积最大的子数组</title><link href="https://blog.gocalf.com/max-inner-product" rel="alternate"></link><published>2011-10-29T23:09:00+08:00</published><updated>2011-10-30T15:05:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-10-29:/max-inner-product</id><summary type="html">&lt;p class="first last"&gt;问题描述：有两个长度均为 n 的整数数组 A 和 B，现在要从这两个数组中各抽出 s 个数字，分别构成两个新的数组 C 和 D，要求数组 C 和 D 的内积最大。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;之前在网上看到有好多人在讨论这道题，据说是一道 Google 的面试题。&lt;/p&gt;
&lt;p&gt;问题描述：有两个长度均为 n 的整数数组 A 和 B，现在要从这两个数组中各抽出 s 个数字，分别构成两个新的数组 C 和 D，要求数组 C 和 D 的内积最大。&lt;/p&gt;
&lt;p&gt;用数学语言描述一下题目，就是已知：&lt;span class="math"&gt;\(A=\left[a_1,a_2,\cdots,a_n\right]\)&lt;/span&gt;，&lt;span class="math"&gt;\(B=\left[b_1,b_2,\cdots,b_n\right]\)&lt;/span&gt;；&lt;/p&gt;
&lt;p&gt;求：&lt;span class="math"&gt;\(C=\left[c_1,c_2,\cdots,c_s\right]\)&lt;/span&gt;，&lt;span class="math"&gt;\(D=\left[d_1,d_2,\cdots,d_s\right]\)&lt;/span&gt;，满足：&lt;span class="math"&gt;\(\forall c_i\in C,c_i\in A\)&lt;/span&gt;，&lt;span class="math"&gt;\(\forall d_i\in D,d_i\in B\)&lt;/span&gt;；&lt;/p&gt;
&lt;p&gt;要使得 C、D 的内积（&lt;span class="math"&gt;\(C\cdot D=c_1d_1+c_2d_2+\dots+c_s d_s\)&lt;/span&gt;）最大。&lt;/p&gt;
&lt;p&gt;一、先考虑只有正数的情况：&lt;/p&gt;
&lt;p&gt;当 s = 1 时，题目就退化成，从 n 个正整数中选取一个，从另外 n 个正整数中选取一个，使得乘积最大。显然，两次选取的都应该是那些数中最大的。&lt;/p&gt;
&lt;p&gt;当 s &amp;gt; 1 时，我们分两步考虑，先考虑选取哪些数，再考虑这些数怎么配对。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;相信很多人都可以轻松地得出这样的结论：从 A 中选取最大的 s 个数构成 C，从 B 中选取最大的 s 个数构成 D，才有可能使得 C、D 内积最大。因为如果用 A 中的某个较小的数替换 C 中的任何一个数字，都会导致对应的乘积变小，从而整个内积变小。对于 D 也是类似的。&lt;/li&gt;
&lt;li&gt;对于选定的 C 和 D，如何配对呢？显然，应该让 C 中最大的数与 D 中最大的数相乘，C 中第二大的数与 D 中第二大的数相乘，以此类推。这个命题的证明也是很简单的，考虑任意两对数字：&lt;span class="math"&gt;\(c_i\leq c_j\)&lt;/span&gt;，&lt;span class="math"&gt;\(d_k\leq d_l\)&lt;/span&gt;，显然有&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="math"&gt;
\begin{equation*}
\label{eq}\tag{1}\begin{array}{cl}
&amp;amp; (c_i d_k+c_j d_l)-(c_i d_i+c_j d_k) \\
= &amp;amp; c_i(d_k-d_l)-c_j(d_k-d_l) \\
= &amp;amp; (c_i-c_j)(d_k-d_l) \\
\geq &amp;amp; 0
\end{array}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;因此，如果 A、B 全部都是正整数，那只需要分别排序后，从大到小选取 s 个数即可。&lt;/p&gt;
&lt;p&gt;二、接下来考虑只有负数的情况：&lt;/p&gt;
&lt;p&gt;只有负数跟只有正数是类似的，因为两个负数相乘的结果与这两个负数的&lt;strong&gt;绝对值&lt;/strong&gt;相乘是一样的。根据上面的分析，我们只要对 A、B 分别排序后，从小到大（即&lt;strong&gt;绝对值&lt;/strong&gt;从大到小）选取 s 个数即可。&lt;/p&gt;
&lt;p&gt;三、再考虑两个数组一个全是正数，另一个全是负数的情况：&lt;/p&gt;
&lt;p&gt;不妨设 A 中全是正数，B 中全是负数。&lt;/p&gt;
&lt;p&gt;当 s = 1 时，题目就退化成，从 n 个正整数中选取一个，从另外 n 个负整数中选取一个，使得乘积最大。显然，两次选取的都应该是那些数中&lt;strong&gt;绝对值&lt;/strong&gt;最小的（即最小的正数和最大的负数）。&lt;/p&gt;
&lt;p&gt;当 s &amp;gt; 1 时，还是分两步考虑。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;很容易证明，应该从两个数组中分别选取&lt;strong&gt;绝对值&lt;/strong&gt;最小的 s 个数（即正数数组中最小的 s 个数，负数数组中最大的 s 个数）。因为如果剩余的任何数字替换进来，都会导致对应的乘积的绝对值变大，乘积本身变小，从而整个内积变小。值得注意的是，很多人在这里容易出错，他们没有考虑到乘积为负数时，绝对值越大，乘积本身越小。&lt;/li&gt;
&lt;li&gt;对于选定的 C 和 D，如何配对呢？根据上面的式子 &lt;span class="math"&gt;\(\ref{eq}\)&lt;/span&gt; 可以知道，我们还是要让最大的那对数相乘，第二大的那对数相乘，……。这里需要注意，也是很多人容易出错的地方，最大的那对数是正数中的最大值（绝对值也最大）和负数中的最大值（绝对值最小）。与全是正数时不同的一点是，两个数组都是正数时，最大的那对数的乘积恰好也是最大的；但一正一负的时候，最大的那对数的乘积并不一定是最大，最小的一对数的乘积也不一定是最小，但他们累加起来一定是最大的。比如 [1, 2] 和[-1, -2]，正确的配对应该是 2 * -1 + 1 * -2 = -4，而不是 1 * -1 + 2 * -2 = -5。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;四、几种特殊情况都考虑完了，最后就是正负数任意混合的一般情况。根据上面的分析，我们终归是要对 A 和 B 分别排序的，排序之后将两个数组的下标对齐，可以将两个数组分成三个部分，第一个部分中两个的数组元素都是负数（负数部分），第二个部分中一个数组元素都是负数而另一个都是正数（异号部分），第三个部分中两个数组的元素都是正数（正数部分），如下所示：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{matrix}
A:&amp;amp;[&amp;amp;-&amp;amp;|&amp;amp;+&amp;amp;|&amp;amp;+&amp;amp;]\\
B:&amp;amp;[&amp;amp;-&amp;amp;|&amp;amp;-&amp;amp;|&amp;amp;+&amp;amp;]
\end{matrix}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;由于负数部分和正数部分都产生正的乘积，我们需要同时考虑这两个部分。每次从这两个部分各选出&lt;strong&gt;绝对值&lt;/strong&gt;最大的一对数，将乘积更大的那对从 A、B 中转移到 C、D 中，然后继续比较。&lt;/p&gt;
&lt;p&gt;如果负数部分和正数部分都取完了，还缺 m 对数，那就从异号部分选取最小的 m 个正数，和最大的 m 个负数，对应配对即可。&lt;/p&gt;
&lt;p&gt;算法示意：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;MinInnerProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Invalid arguments.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;val1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;val2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;val1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;val2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;val1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;val2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;val1&lt;/span&gt;
      &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;val2&lt;/span&gt;
      &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

  &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;算法的空间复杂度为 O(s)，即用来存储 C、D 的空间；时间复杂度为 O(n log
n)。&lt;/p&gt;
&lt;p&gt;============ 并不华丽的分割线&amp;nbsp;============&lt;/p&gt;
&lt;p&gt;最后说个题外的事情。这是最后一篇从以前“钟磬居”网站备份回来的算法文章了。当年的钟磬居有如昙花一现，好多文章都只存在于 Google
Reader 的缓存中了。让我没想到的是，刚才搜一个东西的时候，搜索结果第一条竟然是这篇文章。当然不是你看到的这一篇，而是之前发在钟磬居中被转载出去的。一字不差啊，连我加的粗体都还在，也保留了我当时文章中的一个错误（这里已经修正）。当时的钟磬居跟现在的 GoCalf 一样，看的人不算太少，但没有人评论。想起中学时喜欢的一句话“纵是昙花一现，也有一个月下赏花人，应无所憾”。送给逝去的钟磬居，鼓励一下自己。继续努力。&lt;/p&gt;
&lt;p&gt;再次强调，本文不是转载，是原文，是从已经关闭了的网站中恢复回来的原文。GoCalf 网站中，如无特殊说明，一律原创。&lt;/p&gt;
</content><category term="算法"></category><category term="Interview Question"></category></entry><entry><title>求二叉树中两结点的最小公共祖先</title><link href="https://blog.gocalf.com/least-common-ancestor" rel="alternate"></link><published>2011-10-21T22:34:00+08:00</published><updated>2012-04-05T23:31:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-10-21:/least-common-ancestor</id><summary type="html">&lt;p class="first last"&gt;据说这是微软的一道面试题，谁知道呢。问题描述：找出二叉树上任意两个指定结点的最近共同父结点（LCA，Least Common Ancestor）。&lt;/p&gt;
</summary><content type="html">
&lt;p&gt;据说这是微软的一道面试题，谁知道呢。&lt;/p&gt;
&lt;p&gt;问题描述：找出二叉树上任意两个指定结点的最近共同父结点（LCA，Least
Common Ancestor）。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;这算不上是一道算法题了，主要还是看数据结构基本知识和编程能力。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;有父指针，方法一&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先考虑最简单的情况——二叉树结点数据结构中有父指针。&lt;/p&gt;
&lt;p&gt;这是不是非常简单呢？只要分别从两个结点出发向上走到树根，得到两个结点的分支路径，求出这两条路径相互重合部分的最靠下的结点，就是所求的 LCA。这只需要 O(h) 的时空代价（设 h 是树高，n 是树结点数目，平均情况下 h =
log(n)，最坏情况 h = n）。&lt;/p&gt;
&lt;p&gt;如果想再稍微节省一点儿时间和空间，可以先找出第一条分支路径，并用这些结点建立哈希表，然后从另外一个指定结点开始向上走到树根，每次遇到一个结点就到哈希表中查一下，一旦发现某个结点存在于哈希表中，这个结点就是所求的 LCA。这个方法的代码示意如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;FindLCA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="c1"&gt;# Special cases.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;node1&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;node2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node1&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;node2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node1&lt;/span&gt;

  &lt;span class="c1"&gt;# Get the first branch path.&lt;/span&gt;
  &lt;span class="n"&gt;ancestors1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;node1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ancestors1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;node1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;

  &lt;span class="c1"&gt;# Check if any ancestor of node2 is in the first branch path.&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;node2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ancestors1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node2&lt;/span&gt;    &lt;span class="c1"&gt;# Got it, the LCA.&lt;/span&gt;
    &lt;span class="n"&gt;node2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;

  &lt;span class="c1"&gt;# These two nodes have no common ancestor.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;时间和空间复杂度都是 O(h)。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;有父指针，方法二（2012-04-02 22:10 添加）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上面的方法需要至少一个跟深度相当的缓存，在空间上还是有一些浪费的。可以使用更节省空间的方法，就是先计算出两个结点各自的深度，如果深度不同，则将较靠下的一个结点拉上去，直到两个结点在同一深度处。然后同步向根结点前进，首次相遇时则为最小公共祖先。示意代码（python 2.7）如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;FindLCA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="c1"&gt;# Special cases.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;node1&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;node2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node1&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;node2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node1&lt;/span&gt;

  &lt;span class="c1"&gt;# Gets each node's depth.&lt;/span&gt;
  &lt;span class="n"&gt;depth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="n"&gt;depth1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;depth2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# Pulls up the lower node and makes the two nodes in the same depth.&lt;/span&gt;
  &lt;span class="n"&gt;mindepth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;depth1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depth2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;depth1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mindepth&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;node1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;depth2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mindepth&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;node2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;

  &lt;span class="c1"&gt;# Finds the common ancestor.&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;node1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;node2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node1&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;node2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node1&lt;/span&gt;
    &lt;span class="n"&gt;node1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;
    &lt;span class="n"&gt;node2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;这样时间复杂度是 O(h)，空间复杂度是 O(1)。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;没有父指针，方法一&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通常二叉树结点中并没有父结点指针，这时候就要遍历二叉树找到这两个结点，并找出它们的 LCA。&lt;/p&gt;
&lt;p&gt;在遍历二叉树的时候，很容易就能够记录下根结点到任何结点的分支路径，只要有了分支路径，就可以对比找出 LCA。&lt;/p&gt;
&lt;p&gt;我们采取前序遍历，即 N-L-R 的顺序，使用堆栈来避免递归并且记录完整的分支路径。那么，在二叉树中查找指定结点的算法可以这样写：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Undef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;FindNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nodeSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;nodeSet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

  &lt;span class="n"&gt;pathDict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="c1"&gt;# Go down along left branch&lt;/span&gt;
      &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nodeSet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;pathDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;nodeSet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;nodeSet&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pathDict&lt;/span&gt;
      &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="c1"&gt;# Back from right branch&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pathDict&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# Trun to right from left&lt;/span&gt;
    &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pathDict&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;其中 &lt;tt class="docutils literal"&gt;Dir&lt;/tt&gt; 这个类相当于是一个枚举，用来定义当前的分支方向。&lt;tt class="docutils literal"&gt;FindNodes&lt;/tt&gt; 除了需要二叉树根结点外，还需要一个待查找的结点集合。这个函数可以在二叉树中找到所有（或第一个）待查找结点的分支路径，并返回一个字典（结点
--&amp;gt; 路径）。&lt;/p&gt;
&lt;p&gt;可以看出，&lt;tt class="docutils literal"&gt;FindNodes&lt;/tt&gt; 函数按照前序顺序遍历整个二叉树，查找指定结点。每遇到一个结点，首先判断它是不是我们要找的，如果不是就沿着左边的分支下降到底，然后转入右侧分支。&lt;/p&gt;
&lt;p&gt;有了 &lt;tt class="docutils literal"&gt;FindNodes&lt;/tt&gt; 函数的支持，我们就可改写前面的 &lt;tt class="docutils literal"&gt;FindLCA&lt;/tt&gt; 函数，即先遍历二叉树求出两个结点的分支路径，然后比较这两条路径找出 LCA：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;FindLCA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="c1"&gt;# Special cases.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;node1&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;node2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node1&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;node2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node1&lt;/span&gt;

  &lt;span class="c1"&gt;# Try to find the two nodes in the tree, and get their branch paths.&lt;/span&gt;
  &lt;span class="n"&gt;nodeSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;node1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="n"&gt;pathDict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FindNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nodeSet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;nodeSet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

  &lt;span class="n"&gt;path1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pathDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
  &lt;span class="n"&gt;path2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pathDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;

  &lt;span class="c1"&gt;# Compare the two paths, find out the LCA.&lt;/span&gt;
  &lt;span class="n"&gt;lca&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
  &lt;span class="n"&gt;minLen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minLen&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;path2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="n"&gt;lca&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;lca&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;遍历二叉树查找所有指定的结点需要 O(n) 时间，O(h) 额外空间；对比两条分支路径需要 O(h) 的时间，因此总的时间代价为 O(n)，空间代价为 O(h)。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;没有父结点，方法二（2012-04-05 23:31 更新）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上面的代码有点儿太啰嗦了，如果不想缓存整条分支路径，或者只是想让代码更简洁一些，也很容易做到，只需要在遍历查找的时候做点儿小小的改动。关于遍历二叉树可以参考后面的一篇文章：&lt;a class="reference external" href="https://blog.gocalf.com/traversing-binary-tree"&gt;程序基本功之遍历二叉树&lt;/a&gt;。这里我将在非递归的前序（N-L-R）遍历基础上修改得到求 LCA 的程序。&lt;/p&gt;
&lt;p&gt;为什么用前序遍历？&lt;/p&gt;
&lt;p&gt;首先考察一下 LCA 的特性，只有两种可能：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;LCA 就是其中的一个结点，而另一个结点是它的子孙；&lt;/li&gt;
&lt;li&gt;两个结点分别位于 LCA 的左子树和右子树中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于第一种可能，前序遍历时首先找到的结点就是 LCA，剩下的事情就是确定第二个结点在它下面。中序和后序也都可以做，但没有这么美妙。&lt;/p&gt;
&lt;p&gt;对于第二种可能，假设在前序遍历过程中，首先找到了一个结点（比如下面的 H），根据非递归前序遍历的算法特性，这时候栈里一定是依次存储了结点 A（根节点）、B、D、G（请自行思考为什么没有 C、E、F），再结合 LCA 的特性，很容易发现，LCA 要么是 H 自身（对应于上面第一种情况），要么就只能是 A、B、D 或 G。剩下的事情就太美妙，继续遍历二叉树，直到找到另外一个结点。这时候看看 A、B、D、G 和 H 中还有谁在栈里，最靠下的那个就是 LCA。怎么判定谁在栈里？怎么判定最靠下？用辅助变量呗。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    A
   /
  B
 /
C
 \
  D
 /
E
 \
  F
   \
    G
   /
  H
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示意程序代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;FindLCA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;nodeset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;node1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;   &lt;span class="c1"&gt;# Also supports 3 or more nodes.&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;          &lt;span class="c1"&gt;# A stack to help performing N-L-R traversing.&lt;/span&gt;
  &lt;span class="n"&gt;lca&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;      &lt;span class="c1"&gt;# Records the most possible least common ancestor.&lt;/span&gt;
  &lt;span class="n"&gt;mindepth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="c1"&gt;# The depth of lca.&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nodeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;nodeset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;mindepth&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="c1"&gt;# Yeah, found the first node. The lca must be itself or already in s.&lt;/span&gt;
          &lt;span class="n"&gt;lca&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
          &lt;span class="n"&gt;mindepth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;nodeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;break&lt;/span&gt;
      &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;mindepth&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;lca&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
        &lt;span class="n"&gt;mindepth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;nodeset&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;lca&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;可以跟 &lt;a class="reference external" href="https://blog.gocalf.com/traversing-binary-tree"&gt;程序基本功之遍历二叉树&lt;/a&gt; 中的 &lt;strong&gt;非递归前序遍历&lt;/strong&gt; 的程序对比一下，会发现改动之处是非常小的。&lt;/p&gt;
&lt;p&gt;这段程序时间复杂度都是 O(n)，空间复杂度是 O(h)，这些都是遍历二叉树所需的时间和空间消耗。在遍历之外，就只剩下常数量的时空开销了。&lt;/p&gt;
&lt;/div&gt;
</content><category term="算法"></category><category term="Interview Question"></category><category term="Data Structure"></category><category term="Binary Tree"></category></entry><entry><title>任务调度问题：资源占用与释放</title><link href="https://blog.gocalf.com/task-schedule-with-resource" rel="alternate"></link><published>2011-10-15T00:10:00+08:00</published><updated>2011-10-21T18:50:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-10-15:/task-schedule-with-resource</id><summary type="html">&lt;p class="first last"&gt;问题描述：有 n 个任务，第 i 个任务运行时需要使用 R[i] 的资源，运行完毕后需要占用 O[i] 的资源（O[i] &amp;lt;= R[i]），假设现在我们总共有 s 的资源，要求设计一个调度算法，能保证所有任务能顺利执行；如果无法执行完，需要说明理由。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;据说这是 2009 年 Google 暑期实习招聘的笔试题。&lt;/p&gt;
&lt;p&gt;问题描述：有 n 个任务，第 i 个任务运行时需要使用 R[i] 的资源，运行完毕后需要占用 O[i] 的资源（O[i] &amp;lt;=
R[i]），假设现在我们总共有 s 的资源，要求设计一个调度算法，能保证所有任务能顺利执行；如果无法执行完，需要说明理由。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;举例：比如有 n = 2 个任务，R[1] = 10，O[1] = 2，R[2] = 5，O[2] =
3，总资源 s = 10。如果先执行任务 1，剩余资源 10 - 2 =
8，可以执行任务 2；反过来先执行任务 2，剩余资源 10 - 3 = 7，7 &amp;lt; r[1] =
10，无法执行任务 1。&lt;/p&gt;
&lt;p&gt;这道题的解法很简单，按照 R - O 从大到小排序就是可行的调度顺序，如果按照这个顺序无法执行完所有任务，那么其他任何顺序也都不行；反之，如果存在某个顺序使得所有任务能顺利执行，那么这个顺序一定也可以。&lt;/p&gt;
&lt;p&gt;先看算法，稍后再做证明。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ScheduleTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="c1"&gt;# R: request&lt;/span&gt;
  &lt;span class="c1"&gt;# O: occupancy&lt;/span&gt;
  &lt;span class="c1"&gt;# R - O: temporal = request - occupancy&lt;/span&gt;
  &lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
  &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;taskId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;occ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;occ&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;occ&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;显然这是贪心法，那么贪心法是否一定能得到可行解呢？&lt;/p&gt;
&lt;p&gt;假设存在一个可行解（任务的执行顺序）为：T1, T2, …,
Tn。设其中存在两个相邻的任务 T&lt;sub&gt;i&lt;/sub&gt; 和 T&lt;sub&gt;i+1&lt;/sub&gt;，满足 R[i] - O[i] &amp;lt; R[i+1] -
O[i+1]。&lt;/p&gt;
&lt;p&gt;设执行任务 j 前的资源剩余量为 s'，因为这是一个可行解，任务 j 和任务 k 都可以顺利执行，因此有：s'
- O[i] &amp;gt;= R[i+1]。&lt;/p&gt;
&lt;p&gt;联列这两个式子可以得到：s' &amp;gt;= R[i+1] + O[i] &amp;gt; R[i] + O[i+1]，即 s' -
O[i+1] &amp;gt; R[i]，可见交换任务 T&lt;sub&gt;i&lt;/sub&gt; 和 T&lt;sub&gt;i+1&lt;/sub&gt; 的执行顺序后依旧是可行解。&lt;/p&gt;
&lt;p&gt;以此类推，对于任何 i（1 &amp;lt;= i &amp;lt; n），如果 R[i] - O[i] &amp;lt; R[i+1] -
O[i+1]，我们都可以将这两个任务的顺序交换，最终得到的执行顺序是可行解。&lt;/p&gt;
&lt;p&gt;综上所述，按照 R - O 从大到小排列所有的任务是可行解。&lt;/p&gt;
</content><category term="算法"></category><category term="Interview Question"></category><category term="Task Schedule"></category><category term="Greedy Algorithm"></category></entry><entry><title>检测单向链表是否存在环</title><link href="https://blog.gocalf.com/circle-of-link-list" rel="alternate"></link><published>2011-10-14T12:56:00+08:00</published><updated>2011-10-14T12:56:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-10-14:/circle-of-link-list</id><summary type="html">&lt;p class="first last"&gt;问题描述：在单向链表中，每个结点都包含一个指向下一个结点的指针，最后一个结点的这个指针被设置为空。但如果把最后一个结点的指针指向链表中存在的某个结点，就会形成一个环，在顺序遍历链表的时候，程序就会陷入死循环。我们的问题就是，如何检测一个链表中是否有环，如果检测到环，如何确定环的入口点（即求出环长，环前面的链长）。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;问题描述：在单向链表中，每个结点都包含一个指向下一个结点的指针，最后一个结点的这个指针被设置为空。但如果把最后一个结点的指针指向链表中存在的某个结点，就会形成一个环，在顺序遍历链表的时候，程序就会陷入死循环。我们的问题就是，如何检测一个链表中是否有环，如果检测到环，如何确定环的入口点（即求出环长，环前面的链长）。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;一种比较耗空间的做法是，从头开始遍历链表，把每次访问到的结点（或其地址）存入一个集合（hashset）或字典（dictionary），如果发现某个结点已经被访问过了，就表示这个链表存在环，并且这个结点就是环的入口点。这需要 O(N) 空间和 O(N) 时间，其中 N 是链表中结点的数目。&lt;/p&gt;
&lt;p&gt;如果要求只是用 O(1) 空间、O(N) 时间，应该怎么处理呢？&lt;/p&gt;
&lt;p&gt;其实很简单，想象一下在跑道上跑步：两个速度不同的人在操场跑道上一圈一圈地跑，他们总会有相遇的时候。因此我们只需要准备两个指针，同时从链表头出发，一个每次往前走一步，另一个每次往前走两步。如果链表没有环，那么经过一段时间，第二个（速度较快的）指针就会到达终点；但如果链表中有环，两个指针就会在环里转圈，并会在某个时刻相遇。&lt;/p&gt;
&lt;p&gt;大家也许会问，这两个指针要在环里转多少圈才能相遇呢？会不会转几千几万圈都无法相遇？实际上，第一个（速度慢的）指针在环里转满一圈之前，两个指针必然相遇。不妨设环长为 L，第一个指针 P1 第一次进入环时，第二个指针 P2 在 P1 前方第 a 个结点处（0
&amp;lt; a &amp;lt; L），设经过 x 次移动后两个指针相遇，那么应该有 0 + x = a + 2x (mod
L)，显然 x = L - a。下面这张图可以清晰地表明这种关系，经过 x =
L - a 次移动，P1 向前移动了 L - a 个位置（相当于后退了 a），到达 P1' 处，而 P2 向前移动了 2L - 2a 个位置（相当于后退了 2a），到达 P2' 处，显然 P1' 和 P2' 是同一点。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;object data="https://blog.gocalf.com/images/2011/10/two_pointers_in_ring.svg" style="width: 428px;" type="image/svg+xml"&gt;
two_pointers_in_ring&lt;/object&gt;
&lt;p class="caption"&gt;慢指针（P1）转一周之内，必然与快指针（P2）相遇&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在知道链表内有环后，求环长是一件非常简单的事情，只要从刚才那个相遇点开始，固定 P2，继续移动 P1，直到 P1 与 P2 再次相遇，所经过的步数就是环长。&lt;/p&gt;
&lt;p&gt;怎么求环前面那段子链的长度呢？很简单，让 P1 和 P2 都回到链表起点，然后让 P2 先往前走 L 次（每次往前走一步），然后 P1 和 P2 再同时往前走，当它们再次相遇时，P1 所走的步数就是环前面的子链长度。&lt;/p&gt;
&lt;p&gt;算法示意：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;CheckRing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;# length of the chain before the ring&lt;/span&gt;
  &lt;span class="n"&gt;l2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;# length of the ring&lt;/span&gt;

  &lt;span class="c1"&gt;# Check if there is a ring.&lt;/span&gt;
  &lt;span class="n"&gt;pos1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;
  &lt;span class="n"&gt;pos2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;pos2&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;pos2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pos1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;
    &lt;span class="n"&gt;pos2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;
    &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pos2&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;pos1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;pos2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;l2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pos2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# l2 should be 0&lt;/span&gt;

  &lt;span class="c1"&gt;# Calc the length of the ring.&lt;/span&gt;
  &lt;span class="n"&gt;pos1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;pos1&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;pos2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pos1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;
    &lt;span class="n"&gt;l2&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

  &lt;span class="c1"&gt;# Calc the length of the chain before the ring.&lt;/span&gt;
  &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="n"&gt;pos1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;
  &lt;span class="n"&gt;pos2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pos2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;pos1&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;pos2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pos1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;
    &lt;span class="n"&gt;pos2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;
    &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><category term="算法"></category><category term="Interview Question"></category><category term="Data Structure"></category><category term="Linked List"></category></entry><entry><title>黎明公主攻略：第二章 死亡山颠的咆哮</title><link href="https://blog.gocalf.com/zelda-tp-ch2" rel="alternate"></link><published>2011-10-12T08:45:00+08:00</published><updated>2011-10-12T21:54:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-10-12:/zelda-tp-ch2</id><summary type="html">&lt;p class="first last"&gt;打倒达巴巴之后，林克得到一个完整的心之容器（加一格血）。米德娜出现并将林克传送回法隆之泉处，顺路来到柯洛处，可以补充一点灯油，之前关上的栅栏打开了，过去后就来到海拉尔平原（Hyrule Field）。&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;第二章 死亡山巅的咆哮（大地的子民）&lt;/h2&gt;
&lt;p&gt;打倒达巴巴之后，林克得到一个完整的心之容器（加一格血）。&lt;/p&gt;
&lt;p&gt;米德娜出现并将林克传送回法隆之泉处，顺路来到柯洛处，可以补充一点灯油，之前关上的栅栏打开了，过去后就来到海拉尔平原（Hyrule
Field）。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;海拉尔平原&lt;/h3&gt;
&lt;div class="section" id="id4"&gt;
&lt;h4&gt;森林复苏&lt;/h4&gt;
&lt;p&gt;顺路一直往平原的北面走，途中会遇到一位滑稽的邮递员，他告诉林克，他奔波于世界各地为大家送邮件，无论以后林克在哪里，他都会及时把邮件送到。从北面的小径离开海拉尔平原后，林克来到第二堵黑暗之墙的面前，米德娜带着林克进入了黑暗世界，林克又变成了狼的形态。顺着路没走多远便发现了塔洛掉下的剑，林克嗅了嗅，可以通过感知追踪孩子们留下的气味，跟随气味一直来到一断桥处，这里又遇见了暗影使者，打倒后，天空出现了黑暗空洞，米德娜告诉林克，她可以发动魔法让林克在两个黑暗空洞之间来回传送。前方没路了，林克只好让米德娜开启传送门回到森之神殿之前的那片地区，还记得当时看到的遗留在路旁的桥体吗？在桥体处，米德娜发动魔法，将桥体移到之前的断桥处修通道路，过桥之后顺着路走可以进入卡卡里科村（Kakariko
Village）。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/10/tp_ch02_01.jpg"&gt;&lt;img alt="tp_ch02_01" src="https://blog.gocalf.com/images/2011/10/tp_ch02_01.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;林克来到海拉尔平原（Hyrule Field）&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;卡卡里科村&lt;/h3&gt;
&lt;div class="section" id="id6"&gt;
&lt;h4&gt;被黑暗覆盖的小镇&lt;/h4&gt;
&lt;p&gt;刚刚到村口又遇到了暗影使者，比较有难度的是其中一个始终与另两个保持一定距离，林克只好先把远处的一个杀掉再迅速把其余两个同时干掉。此时泉水处出现了第三位光之精灵，但是由于黑暗力量的笼罩，它还无法现出真身，它交给林克第二个光之容器，让林克收集散落在卡卡里科村的光之泪。进入卡卡里科村后，发现这里面基本每个房子里都有携带光之泪的虫子。不过林克还是很担心孩子们，他顺着气温来到村子门口的一座建筑前，但是林克在狼形态下是无法开门的，他围着房子转了转，米德娜告诉林克可以借助树枝跳到屋顶，这个主意不错，来到屋顶后，林克从中间的洞跳了下去。孩子们都在这里，林克一下安心了，不过这里还有一些林克不认识的人，林克通过感知听到了他们的谈话，原来都是村里的居民，他们都很害怕，不过柯林坚信林克一定会回来救他们，米德娜嘲笑林克，林克要保护的人就在眼前，但是现在的林克却无能为力，没办法，林克只好暂时离开。林克捡起地上的木棍，到火台上点燃后，把房内的蜡烛全部引燃（可以发现三只虫子），房子中间的雕像移开，出现了一条地道，林克顺着地道出了房间。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/10/tp_ch02_02.jpg"&gt;&lt;img alt="tp_ch02_02" src="https://blog.gocalf.com/images/2011/10/tp_ch02_02.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;卡卡里科村（Kakariko Village）被黑暗覆盖，需要收集光之泪&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;通过地道林克来到了卡卡里科墓地（Graveyard），发现这里有携带着光之泪的虫子，杀掉后，林克回到村子里，来到商店（General
Store）的房子右边，林克发现大楼的底部有个小洞，钻进去找到虫子，干掉它收集到光之泪，再原路出来。林克来到商店南边，走上坡道，这里是艾尔德旅馆（Elde
Inn）。跃进旅馆的阳台，跳到下面的地板上，虫子藏在壁炉里不出来，聪明的林克从壁炉里取出一支木棒，再跳到桌子附近的火炬那里点燃，然后引燃壁炉，把烟囱里的虫子给驱赶出来，另一支虫子要进入旅馆大厅，走上楼梯，在客房里找到。出来后林克来到住宅区（Residential
House），在街的西面，这个房子里有另一只虫，穿过南边的 2 间房子，发现有个可以跳上的坡道，然后跳过一个个房顶，直到有虫子的那间房子的屋顶，林克发现这里房顶有个裂缝，可以从这下到房子内。林克把木箱子推向墙壁后，虫子从下面窜了出来，杀了它得到光之泪后，米德娜会带着林克跳出去。林克来到巴恩斯的炸弹商店（Barnes
Bomb
shop），在这个大型建筑物的北面，找到一些可以攀爬的箱子，然后爬上屋顶。然后可以看到炸弹商店的一扇窗户，林克勇猛地撞碎玻璃跳了进去，直接来到楼上然后撞击书架，就会有虫子飞出来，得到光之泪后爬上棚架，林克发现了出口。从炸弹商店的窗口爬出来，林克发现自己已经上到了西北山丘（The
Northwestern
Hills），顺着路向上，林克来到一个标着 &amp;quot;Danger!&amp;quot; 的建筑物面前。进到房子里面，林克发现这里到处都是火药，虫子也藏在角落里，林克没有办法，只好在地上捡起一根木棍，引燃木棍后，用它来把壁炉点着，火星蹦了出来，火药被点燃了，林克见状赶紧原路跑开。刚一出房子，只听身后一声巨响，连屋带虫一起化为了灰烬，林克也得到了三颗光之泪。林克顺着斜坡上到了山顶，这里的房里可以找到一条虫子，村里已经没有虫子了，但是光之泪还没有收集全，看来有虫子飞到了更远的地方去了。林克只好从村子北面的一个大山洞出村，一路来到死亡山（Death
Mountain）的脚下。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/10/tp_ch02_03.jpg"&gt;&lt;img alt="tp_ch02_03" src="https://blog.gocalf.com/images/2011/10/tp_ch02_03.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;在屋顶上看到炸弹商店的一扇窗户，可以撞碎玻璃跳进去&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;死亡山&lt;/h3&gt;
&lt;p&gt;在米德娜的帮助下跳上了一个峭壁，林克顺着路往山上走，一路上还要躲过一连串的热泉。林克在这片区域中找到了三只虫子，解决掉后继续前进，不远处有一个嚎叫之岩（Howling
Shrine），林克隐约听到嚎叫之岩会发出狼的嚎声，狼形态下的林克跟着听到的声音也嚎叫了起来，原来是林克的嚎声引起了远方金狼的共鸣，难道就是上次教林克绝技的那只狼？带着疑问，林克继续前进，再次遇到了黑暗使者，这次数量增加到了四个，但是林克还是轻松取胜，之后便开启了死亡山的黑暗空洞。光之泪还没收集齐，林克只好继续前进，米德娜带着林克不断向上跳，来到一个盆地处，跳下去解决掉虫子，最后一颗光之泪终于到手了，卡卡里科村净化完成，村子又重新回到了光明的怀抱。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/10/tp_ch02_04.jpg"&gt;&lt;img alt="tp_ch02_04" src="https://blog.gocalf.com/images/2011/10/tp_ch02_04.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;死亡山&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h4&gt;大地之民族&lt;/h4&gt;
&lt;p&gt;林克回到村口的泉水处，第三位光之精灵艾尔丁（Eldin）也恢复了其真实的形态，艾尔丁告诉林克，死亡山上的戈隆一族有着能够帮助林克的宝物，看来林克只有上山去拜访戈隆一族了。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/10/tp_ch02_05.jpg"&gt;&lt;img alt="tp_ch02_05" src="https://blog.gocalf.com/images/2011/10/tp_ch02_05.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;恢复了真实的形态的第三位光之精灵艾尔丁（Eldin）&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;村里的村民和小孩们都被解救出来了，柯林非常高兴，他就知道林克会来救大家，可是马洛和塔洛还是很不服气，怪林克那么晚才来，这时当初在房子看到的陌生人上前来自我介绍，原来他叫雷那多（Renado），是村里的牧师，另外一位就是炸弹店的老板巴恩斯，雷那多告诉林克，孩子们在这里很安全，让林克放心去找伊莉娅。林克也很担心伊莉娅，于是继续上路，林克再次前往死亡山，刚爬上峭壁，却发现有个戈隆人挡路，两句话不对戈隆人毫不客气地将林克撞了下来，看来暂时是没法上去了，只得离开。回到村里，雷那多告诉林克，奥东村的村长布有办法对付挡路的戈隆人。那不是林克的家乡么，很久没回去了，林克也挺想念大家的，于是打算回奥东村一趟，顺便找村长布想办法帮忙。林克正在犯愁，离家乡那么远，怎么回去呢？正在这时艾普娜出现，可能是很久没见了，艾普娜有点兴奋，林克跳到艾普娜背上试图让她安静下来，骑上之后，按屏幕下方出现的提示做就可以了，一开始是利用左手手柄左右晃动，最后一下则是按 A（看见“SEIZE”提示时），将马驯服，艾普娜又变得跟往常一样温和了。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/10/tp_ch02_06.jpg"&gt;&lt;img alt="tp_ch02_06" src="https://blog.gocalf.com/images/2011/10/tp_ch02_06.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;艾普娜过于兴奋，林克跳到她背上试图让她安静下来&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;奥东村&lt;/h3&gt;
&lt;div class="section" id="id10"&gt;
&lt;h4&gt;相扑！！&lt;/h4&gt;
&lt;p&gt;林克骑着艾普娜飞奔，很快便回到了法隆森林，经过奥东之泉时，林克想起了在死亡山上遇到金狼的事情，来到奥东之泉看到了金狼蹲在那里，林克走上前，金狼又是二话没说扑了上来，一阵眩晕后，不死勇士再次出现，看来林克又可以学到新的技能了。学会新的技能后，林克回到奥东村，径直来到村长布的家，林克向村长表明了来意，布将林克带到了里屋，他准备给林克传授摔跤的技能，聪明的林克没一会儿就学会了（第一局很容易，只要闪避后按住 A 攻击就可以了；第二局则要闪避后，挥动右手手柄击打对手，然后再按 A 攻击），学会了摔跤，就不怕戈隆人了，当林克正准备离去，村长又将自己的宝物钢之靴（Iron
Boots）交给了林克，这对林克将来的冒险大有帮助。告别村长，林克打算去拜访老朋友农场主，农场主看到林克回来了也很高兴，他有件神秘的礼物准备送给林克，但条件是要林克打破他的赶羊纪录，这对林克来说再简单不过了，打破他的纪录后林克得到了一块 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h05"&gt;心之碎片 05&lt;/a&gt;。随后告别农场主，该是继续冒险的时候了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h4&gt;勇敢的少年&lt;/h4&gt;
&lt;p&gt;林克回到卡卡里科村，刚进村子就看见兽人来袭，带头的兽人首领凶残地撞向贝思，柯林挺身而出推开了贝思，自己却被兽人首领撞到并抓走了。愤怒的林克快马加鞭地追赶了上去，第一场强制马上战！一路追到海拉尔平原上，兽人头领会不断招呼喽啰来阻拦林克，不过都被林克轻松搞定（如果怕麻烦又臂力超群的话，可以挥剑来斩射来的箭，然后完全无视小怪），林克在重创兽人首领后，其带着柯林向艾尔丁大桥逃去，林克追了上去，这时又出现了兽人弓箭手，用火箭点燃了早已准备好的草堆封住了桥头两边的去路，一场生死决斗在所难免，单挑战中，接近头目时注意快速回避，同时狂挥右手的手柄，成功的话一击就可以 KO。兽人首领也不是林克的对手，最后林克挥剑将兽人首领击落桥下，林克带着受伤的柯林回到卡卡里科村，林克看着柯林非常难过，柯林告诉林克，他已经将林克作为自己的目标，将来也要像林克一样勇敢强壮，柯林的话给了林克很大的鼓舞，林克振作起来，再次来到死亡山脚下。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/10/tp_ch02_07.jpg"&gt;&lt;img alt="tp_ch02_07" src="https://blog.gocalf.com/images/2011/10/tp_ch02_07.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;与兽人首领之间的一场马上战斗&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/10/tp_ch02_08.jpg"&gt;&lt;img alt="tp_ch02_08" src="https://blog.gocalf.com/images/2011/10/tp_ch02_08.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;在艾尔丁大桥上与兽人首领生死决斗&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/10/tp_ch02_09.jpg"&gt;&lt;img alt="tp_ch02_09" src="https://blog.gocalf.com/images/2011/10/tp_ch02_09.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;骑马战胜兽人的林克，英姿飒爽&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h4&gt;上山&lt;/h4&gt;
&lt;p&gt;准备上山，上山前记得到村子新开的杂货店（入口第一间）买个铁盾牌，后面迷宫里会有很多敌人会火系攻击，现在的木盾很容易会被火烧掉。上山后林克穿上了重力靴，加上布所教授的摔跤技巧，挡路的戈隆人就拿林克没办法了。一路前进，途中还会遇到一些好斗的戈隆人，但是也有好心的戈隆人会帮林克跳上峭壁，峭壁喷出上的蒸汽，只要林克穿上钢之靴就能顺利通过。一直来到山顶的洞穴中，这里会遇到戈隆族的领袖，林克表明了来意，但是显然林克想要的宝物没在这里，但是戈隆族长告诉林克，戈隆矿山（Goron
Mines）是他们世代守护的地方，现在被黑暗势力所侵吞了，而且他们有位伙伴被黑暗势力魔化了并关在矿山最深处，希望林克能帮助他们救出同伴，驱赶黑暗势力。林克爽快答应下，但是族长还是不太放心，要考验一下林克的实力，戈隆族长果然很强，一下就将林克推下擂台，林克只好穿上钢之靴后再上去挑战，战胜戈隆族长后，他终于放心的让林克进入了戈隆矿山。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h3&gt;戈隆矿山迷宫&lt;/h3&gt;
&lt;div class="figure"&gt;
&lt;img alt="tp_ch02_10" src="https://blog.gocalf.com/images/2011/10/tp_ch02_10.jpg" /&gt;
&lt;p class="caption"&gt;戈隆矿山迷宫地图&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 1：&lt;/strong&gt;林克进入戈隆矿山，这里到处都是炙热的岩浆，利用钢之靴可以关闭喷火的机关，不过有时间限制，必须快速通过。北面的门要先从右边的路上到第二层，用同样的方法按下按钮关闭第二个喷火机关后快速通过，之后再用钢之靴站到门旁边的开关上打开门进入房间 2。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 2：&lt;/strong&gt;这里先用钢之靴压下开关可以启动磁力机，穿着钢之靴站在其磁力范围内的话会被吸上去，利用它到房间西南角能够得到一把小钥匙，之后用它打开东边的门前往房间 3。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 3：&lt;/strong&gt;这里的火蜥蜴只有攻击它们的尾巴时才能对其造成伤害，当它们向你吐火的时候，绕着它们跑，抓住时机使用旋转剑法。去房间 3 的西北角，然后从外面绕过去后可以见到链子开关，穿上钢之靴能够将之拉出来，然后迅速绕回来在墙关闭之前朝东面进入房间 4。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 4：&lt;/strong&gt;来到房间 4，这个房间要先用钢之靴沉入水底，然后穿过水低铁丝网上的洞，到最北面的按钮可以激活磁场，这样钢之靴就可以吸附在天花板上行动，不过只能在有磁矿的墙面上行走，继续前进来到 5 号房间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 5：&lt;/strong&gt;这里能见到一位戈隆长老，他将大钥匙的一部分交到林克手上，并告诉林克，想要打开关押他们同伴的大门还必须找到剩下的两部分钥匙。林克接过钥匙后从长老后面的楼梯上到二层，途中可以遇到戈隆矿山的欧库。利用钢之靴通过有水的房间后回到房间 3，在西北角有个 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h07"&gt;心之碎片 07&lt;/a&gt;，然后回到东南边找到门，跳下去回到房间 2。这时林克来到房间 2 的上部，可以开启另一个磁力机，于是便能向北边前进进入房间 6。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 6：&lt;/strong&gt;把里面的敌人都解决掉，西北角的水里能够找到一把小钥匙，之后过去找到开关，可以激活磁场上到天花板上，沿着天花板走到高台上然后跳下来，启动另一个机关之后脱掉钢之靴跳下，在进入磁力范围时再穿上钢之靴就能被磁力吸到对面的墙壁上，之后走到平台上击打状态转换水晶，可以打开大门，林克迅速进入，再次穿上钢之靴走到高台上，林克在右边的高台找到一个 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h08"&gt;心之碎片 08&lt;/a&gt;，来到左边砍断绳索放下大门，就是去房间 7 的路。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 7：&lt;/strong&gt;跳下进入房间 7，这里正东面有把小钥匙，有了它林克就能打开通往西面的门了前往房间 8 了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 8：&lt;/strong&gt;来到房间 8，在右边的平台上有一把小钥匙，拿到之后可以前往房间 9。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 9：&lt;/strong&gt;到房间 9 找到第二位长老，他会给林克大钥匙的第二部分，之后从长老后面的楼梯上去回到房间 8 的上层，然后前往房间 10。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 10：&lt;/strong&gt;在房间 10 里，林克遇到小 BOSS，一个狂暴的戈隆勇士，穿上钢之靴与其战斗，把他打在地上缩作一团时，可以冲上前将其丢下岩浆，不过他还不肯轻易罢休，看来还得费点力气，战胜后，林克进入南面的小房间内，这里的箱子内可以拿到英雄之弓（Hero's
Bow），看来这就是牧师雷那多告诉林克的戈隆族的宝物，林克用它射断面前平台上的绳索，于是就能进入到南面的房间 11 了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 11：&lt;/strong&gt;房间 11 里有很多石像，正当林克上前查看时，石像被激活了，用箭射它们上部的红水晶能让其停止攻击，之后就可以将它们往外拉。林克在房间的东面能够得到指南针，继续前进走西面的房间来到房间 12。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 12：&lt;/strong&gt;林克见到了最后一位长老，并得到最后一部分的大钥匙，得到大钥匙后，就可以去矿山深处解救狂暴的戈隆族同伴了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 13：&lt;/strong&gt;林克前进来到房间 13，这里的天花板上有许多火焰虫，用弓箭将它们射掉，来到门前，利用旁边的开关，上到天花板上，林克会发现在门的上面有一个状态水晶，掏出弓箭射击水晶即可打开门。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 7：&lt;/strong&gt;一路回到房间 7，到之前有个活动石像的地方，就在房间最东面。用弓箭干掉它并将其拉出来，通过背后的路来到房间 7 的高处，打开磁力机，林克穿上钢之靴吸附到磁力机上，用弓箭射断东北方的桥索来到房间 14，消灭所有的怪后，林克站到了关押狂暴的戈隆族人的门前。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/10/tp_ch02_11.jpg"&gt;&lt;img alt="tp_ch02_11" src="https://blog.gocalf.com/images/2011/10/tp_ch02_11.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;戈隆矿山迷宫房间 7&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;BOSS 战：&lt;/strong&gt;福里乌斯（Twilit Iginiter——Fryus）&lt;/p&gt;
&lt;p&gt;进门后看到福里乌斯，林克先用弓箭射其头顶发光的宝石，射中后他会痛苦得到处乱撞，林克迅速上前抓住他的脚链并换上钢之靴向后拖，福里乌斯会绊倒在地上，这时迅速上前挥砍其头顶的宝石，几个回合后，福里乌斯头顶的宝石破碎了，控制他的黑暗力量消失了，之后米德娜出现，带着林克回到了戈隆矿山的外面。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/10/tp_ch02_12.jpg"&gt;&lt;img alt="tp_ch02_12" src="https://blog.gocalf.com/images/2011/10/tp_ch02_12.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;BOSS：福里乌斯（Twilit Iginiter——Fryus）&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/10/tp_ch02_13.jpg"&gt;&lt;img alt="tp_ch02_13" src="https://blog.gocalf.com/images/2011/10/tp_ch02_13.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;福里乌斯头顶的宝石破碎，控制他的黑暗力量消失，他恢复正常&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wii.tgbus.com/glmj/gl/200611/20061129114849.shtml"&gt;《塞尔达传说：黄昏公主》图文全攻略&lt;/a&gt;&amp;nbsp;by WiiBbs 攻研部
Szh、三代鬼彻、天堂的翅膀&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cngba.com/thread-16520313-1-1.html"&gt;《塞尔达传说 黄昏公主》完美攻略研究&lt;/a&gt; by www.cngba.com 鸡蛋&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://tv.duowan.com/0710/57154029137.html"&gt;Wii《塞尔达传说：黎明公主》流程攻略&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="游戏"></category><category term="Twilight Princess"></category></entry><entry><title>利用不均匀硬币产生等概率</title><link href="https://blog.gocalf.com/unbalanced-coin" rel="alternate"></link><published>2011-10-08T22:49:00+08:00</published><updated>2011-10-09T15:05:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-10-08:/unbalanced-coin</id><summary type="html">&lt;p class="first last"&gt;问题描述：有一枚不均匀的硬币，已知抛出此硬币后，正面向上的概率为 p（0 &amp;lt; p &amp;lt; 1）。请利用这枚硬币产生出概率相等的两个事件。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;问题描述：有一枚不均匀的硬币，已知抛出此硬币后，正面向上的概率为 p（0
&amp;lt; p &amp;lt; 1）。请利用这枚硬币产生出概率相等的两个事件。&lt;/p&gt;
&lt;p&gt;这个问题跟之前的 &lt;a class="reference external" href="https://blog.gocalf.com/build-rand3-from-rand5"&gt;利用等概率 Rand5 产生等概率 Rand3&lt;/a&gt; 非常像，但却简单的多。几个月前还为这个事情头疼了一下，现在想来真是不应该。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;某一次抛出硬币，正面向上的概率是 p，反面向上的概率是 1 -
p，当 p 不等于 0.5 时，这两个事件的概率就不一样了。怎么能凑出等概率呢？还是要利用概率的加法和乘法法则。这里用乘法，也就是连续的独立事件。&lt;/p&gt;
&lt;p&gt;连续抛两次硬币，正反面的出现有四种情况，概率依次为：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;两次均为正面：p * p&lt;/li&gt;
&lt;li&gt;第一次正面，第二次反面：p * (1 - p)&lt;/li&gt;
&lt;li&gt;第一次反面，第二次正面：(1 - p) * p&lt;/li&gt;
&lt;li&gt;两次均为反面：(1 - p) * (1 - p)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这不，中间两种情况的概率是完全一样的。于是问题的解法就是连续抛两次硬币，如果两次得到的相同则重新抛两次；否则根据第一次（或第二次）的正面反面情况，就可以得到两个概率相等的事件。&lt;/p&gt;
&lt;p&gt;用 Python 程序模拟一下这个过程，首先是一个叫做 &lt;tt class="docutils literal"&gt;UnbalancedCoin&lt;/tt&gt; 的类，用来模拟这枚不均匀的硬币。Flip 方法表示抛一次硬币，返回值 True 代表正面，False 代表反面。根据要求，这个函数返回 True 和 False 的概率分别是 p 和 1
-
p。函数 &lt;tt class="docutils literal"&gt;MakeEqualProb&lt;/tt&gt; 利用参数 &lt;tt class="docutils literal"&gt;coin&lt;/tt&gt;（这枚不均匀硬币）构造出两个事件（依旧用 True 和 False 表示），并且这两个事件的概率都是 0.5。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UnbalancedCoin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;invalid p&amp;#39;&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Flip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_p&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;MakeEqualProb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;coin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Flip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;coin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Flip&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;对于不同的 p 值，模拟实验十万次，得到如下的（结果为 True 的）概率分布，其中蓝线是不均匀硬币抛出后正面向上的概率，红线是构造出来的两个事件之一（第一次正面向上，第二次反面向上）的概率。&lt;/p&gt;
&lt;div id="coin-prob-chart" class="highcharts" style="height: 400px; width: 600px"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
$(function () {
    $('#coin-prob-chart').highcharts({
        chart: {type: 'line', backgroundColor: null},
        colors: ['#3399ff', '#ff3300'],
        title: {text: null},
        xAxis: {min: 0, max: 1, tickInterval: 0.1},
        yAxis: {min: 0, max: 1, tickInterval: 0.1, title: { text: null} },
        series: [{
            name: 'UnbalancedCoin',
            data: [
                [0.1, 0.09989], [0.2, 0.20059], [0.3, 0.30313], [0.4, 0.40019], [0.5, 0.50013],
                [0.6, 0.59973], [0.7, 0.70198], [0.8, 0.80152], [0.9, 0.90012]
            ]
        }, {
            name: 'MakeEqualProb',
            data: [
                [0.1, 0.49899], [0.2, 0.49846], [0.3, 0.50038], [0.4, 0.49917], [0.5, 0.50181],
                [0.6, 0.50022], [0.7, 0.49805], [0.8, 0.49997], [0.9, 0.49956]
            ]
        }]
    });
});
&lt;/script&gt;&lt;p&gt;如果问题改变一下，把“一枚”改成“一种”，那解决办法就更简单有趣了，把两枚同样的不均匀硬币正面相对粘在一起，就可以得到一个均匀的组合币，抛出这枚组合币就可以得到等概率的两个事件。&lt;/p&gt;
</content><category term="算法"></category><category term="Interview Question"></category><category term="Probability"></category></entry><entry><title>水木社区、小百合、饮水思源、日月光华十大博客</title><link href="https://blog.gocalf.com/bbs-top-10" rel="alternate"></link><published>2011-09-29T23:21:00+08:00</published><updated>2011-10-09T14:59:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-09-29:/bbs-top-10</id><summary type="html">&lt;p class="first last"&gt;gdh 同学利用 Google Blogspot 和 Google Picasa 制作了四个博客，分别收集了清华水木社区、南大小百合、上海交通大学饮水思源和复旦大学日月光华的全站十大，不但保留了文章全文，还存储了图片，几乎是与这几个 BBS 同步更新的，非常方便。欢迎参观，猛烈点击小广告。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;如果你喜欢订阅几大校园 BBS 全站十大，强烈推荐 &lt;a class="reference external" href="http://www.truevue.org/"&gt;gdh&lt;/a&gt; 做的十大博客（需翻墙）：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;水木十大：&lt;a class="reference external" href="http://smthot.blogspot.com/"&gt;http://smthot.blogspot.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;小百合十大：&lt;a class="reference external" href="http://lilytop.blogspot.com/"&gt;http://lilytop.blogspot.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;饮水思源十大：&lt;a class="reference external" href="http://sjtutop.blogspot.com/"&gt;http://sjtutop.blogspot.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;日月光华十大：&lt;a class="reference external" href="http://fudantop.blogspot.com/"&gt;http://fudantop.blogspot.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- more --&gt;
&lt;p&gt;之前就一直用 &lt;a class="reference external" href="https://www.google.com/reader"&gt;Google Reader&lt;/a&gt; 订阅着水木的十大，不过非常郁闷的是水木 RSS 中的文章不完整，稍微长点儿文章就被截断了，再有就是图片附件都看不到，要点开进入到水木才能看得到。但经常有很不错的文章，却因为种种原因被删除或者合集了，再想看到原文原图就很困难了，带来了不少遗憾。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.truevue.org/"&gt;gdh&lt;/a&gt; 同学利用 Google Blogspot 和 Google
Picasa 制作了四个博客，分别收集了清华水木社区、南大小百合、上海交通大学饮水思源和复旦大学日月光华的全站十大，不但保留了文章全文，还存储了图片，几乎是与这几个个 BBS 同步更新的，非常方便。欢迎大家前往以上博客参观，猛烈点击小广告，也可以直接把上述地址扔到 Google
Reader 中进行订阅。&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a class="reference external" href="http://www.truevue.org/web/smth-top-10-smthot"&gt;水木十大博客&lt;/a&gt;&lt;/p&gt;
</content><category term="互联网"></category><category term="RSS Feed"></category></entry><entry><title>单次遍历，带权随机选取问题（二）</title><link href="https://blog.gocalf.com/weighted-random-selection-2" rel="alternate"></link><published>2011-09-26T11:27:00+08:00</published><updated>2011-09-28T10:05:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-09-26:/weighted-random-selection-2</id><summary type="html">&lt;p class="first last"&gt;本文介绍一个有趣的算法，用来解决带权随机选取问题：有一组数量未知的数据，每个元素有非负权重。要求只遍历一次，随机选取其中的一个元素，任何一个元素被选到的概率与其权重成正比。&lt;/p&gt;
</summary><content type="html">
&lt;p&gt;还是同样的问题：有一组数量未知的数据，每个元素有非负权重。要求只遍历一次，随机选取其中的一个元素，任何一个元素被选到的概率与其权重成正比。&lt;/p&gt;
&lt;p&gt;在 &lt;a class="reference external" href="https://blog.gocalf.com/weighted-random-selection"&gt;前一篇&lt;/a&gt; 文章中介绍了概率分布的理论值，并用比较简洁高效的函数实现了选取一个元素的方法。现在来看一个神奇的算法，以及相关的证明和实现。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;算法很简单：对于任意的 i（1 &amp;lt;= i &amp;lt;=
n），按照如下方法给第 i 个元素分配一个键值 key（其中 r&lt;sub&gt;i&lt;/sub&gt; 是一个 0 到 1 之间等概率分布的随机数）：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
key(i)=r_i^{1/w_i}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;之后，如果要随机选取一个元素，就去 key 最大的那个；如果要选取 m 个元素，就取 key 最大的 m 个。&lt;/p&gt;
&lt;p&gt;真不知道是怎么想出来的这样的方法，不过还是先来关注一下证明的过程。&lt;/p&gt;
&lt;div class="section" id="m-1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;m=1 证明&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;对于 m=1 的证明过程会介绍得详细些，主要是怕我自己过几天就忘记了。概率达人可以直接秒杀之。&lt;/p&gt;
&lt;p&gt;m=1 时，第 i 个元素被选取到的概率，就等于它所对应的键值 key(i) 是最大值的概率，即：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
p_i=p(\forall j\neq i,key(j) &amp;lt; key(i))
\end{equation*}
&lt;/div&gt;
&lt;p&gt;把 key(i) 的计算公式代入，但要注意公式中的 r&lt;sub&gt;i&lt;/sub&gt; 并不是一个固定的数值，而是随机变量。不考虑计算机数值表示的精度，可以假设 r&lt;sub&gt;i&lt;/sub&gt; 是一个在 0 到 1 之间的连续均匀概率分布，因此如果要计算 key(i) 是最大的概率，必须要对 r&lt;sub&gt;i&lt;/sub&gt; 所有的可能值进行概率累加，也就是积分。于是上面的概率表达式就被写成：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
p_i=\int_0^1p(\forall j\neq i,r_j^{1/w_j} &amp;lt; r_i^{1/w_i})\mathrm{d}r_i
\end{equation*}
&lt;/div&gt;
&lt;p&gt;再看式子中的 &lt;span class="math"&gt;\(\forall\)&lt;/span&gt;，它表示每一个 j 都要满足后面的条件，而各个 j 之间相互独立，因此可以写成概率乘积，于是得到：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
p_i=\int_0^1\prod_{j\neq i}{p(r_j^{1/w_j} &amp;lt; r_i^{1/w_i})}\mathrm{d}r_i
\end{equation*}
&lt;/div&gt;
&lt;p&gt;对于给定的 j，&lt;span class="math"&gt;\(r_j^{1/w_j} &amp;lt; r_i^{1/w_i}\Rightarrow r_j &amp;lt; r_i^{w_j/w_i}\)&lt;/span&gt;，另外 r&lt;sub&gt;j&lt;/sub&gt; 也是个均匀概率分布，将概率密度函数代入可以得到：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
p(r_j &amp;lt; r_i^{w_j/w_i})=\int_0^{r_i^{w_j/w_i}}1\mathrm{d}r_j=r_i^{w_j/w_i}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;因此，上面的概率算式就变成（其中 w 就是前一篇文章中提到的所有元素的权重之和）：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
p_i=\int_0^1\prod_{j\neq i}{r_i^{w_j/w_i}}\mathrm{d}r_i=\int_0^1r_i^{(w-w_i)/w_i}\mathrm{d}r_i=\frac{w_i}{w}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;最后的结果跟 &lt;a class="reference external" href="https://blog.gocalf.com/weighted-random-selection"&gt;前一篇&lt;/a&gt; 文章中的理论值相等，证明完毕。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;m&amp;gt;=1 证明&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;当 m 取任意值时，概率公式变得非常复杂，在前一篇文章中使用了第 i 个元素不被选到的概率来简化表达式。现在的证明也从同样的角度进行。&lt;/p&gt;
&lt;p&gt;第 i 个元素不被选到的概率，显然等于这 n 个元素中，至少存在 m 个元素的键值大于 key(i)，与之前的讨论一样，不妨设这 m 个元素的下标（按键值从大到小）依次为 j&lt;sub&gt;1&lt;/sub&gt;,
j&lt;sub&gt;2&lt;/sub&gt;, ..., j&lt;sub&gt;m&lt;/sub&gt;，&lt;span class="math"&gt;\(\forall 1\leq k\leq m,j_k\notin\{i,j_1,j_2,\cdots,j_{k-1}\}\)&lt;/span&gt;，满足 &lt;span class="math"&gt;\(\forall 1\leq t_k\leq n,t_k\notin\{j_1,j_2,\cdots,j_{k}\},key(j_k) &amp;gt; key(t_k)\)&lt;/span&gt;。注意 j&lt;sub&gt;k&lt;/sub&gt; 和 t&lt;sub&gt;k&lt;/sub&gt; 的取值范围，为了简单起见，下面的式子中就不再重复了。&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\bar p_i(m)=p(\exists j_1,j_2,...,j_m\neq i,key(j_1) &amp;gt; key(j_2) &amp;gt; ... &amp;gt; key(j_m) &amp;gt; key(i))
\end{equation*}
&lt;/div&gt;
&lt;p&gt;为了能够进一步求解，必须把这个连等式拆开。这里要非常小心，各个 j&lt;sub&gt;k&lt;/sub&gt; 并不是相互独立的，比如当 j&lt;sub&gt;1&lt;/sub&gt; 改变的时候，j&lt;sub&gt;2&lt;/sub&gt; 的取值范围也会随之变化，依此类推。拆开之后的式子如下：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{array}{rrrl}
\bar p_i(m)=p( &amp;amp; \exists j_1( &amp;amp; &amp;amp; \forall t_1,key(j_1) &amp;gt; key(t_1),\\
&amp;amp; &amp;amp; \exists j_2( &amp;amp; \forall t_2,key(j_2) &amp;gt; key(t_2),\\
&amp;amp; &amp;amp; &amp;amp; ...,\\
&amp;amp; &amp;amp; &amp;amp; \exists j_m(\forall t_m,key(j_m) &amp;gt; key(t_m))\\
&amp;amp; &amp;amp; ) &amp;amp; \\
&amp;amp; ) &amp;amp; &amp;amp; \\
) &amp;amp; &amp;amp; &amp;amp; \end{array}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;看起来还是相当恐怖的，一层套一层。注意等式右边已经没有显式地关于 i 的信息了，这些信息被隐含在 j&lt;sub&gt;k&lt;/sub&gt; 和 t&lt;sub&gt;k&lt;/sub&gt; 的取值范围中，切记。对每个 j&lt;sub&gt;k&lt;/sub&gt;，把 key(j&lt;sub&gt;k&lt;/sub&gt;) 的式子代进去，转换成积分；同时把 &lt;span class="math"&gt;\(\forall t_k\)&lt;/span&gt; 转换为 &lt;span class="math"&gt;\(\prod_{t_k}\)&lt;/span&gt;。这些在 m=1 的证明中都提到过了。新出现的是 &lt;span class="math"&gt;\(\exists j_k\)&lt;/span&gt;，这个显然适用概率加法，因为 j&lt;sub&gt;k&lt;/sub&gt; 取不同的值对应于不同的互斥方案。经过这些变换得到：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{array}{rrrl}
\bar p_i(m)= &amp;amp; \sum_{j_1}( &amp;amp; &amp;amp; \int_0^1\prod_{t_1}p(r_{j_1}^{1/w_{j_1}} &amp;gt; r_{t_1}^{1/w_{t_1}})\mathrm d r_{j_1}\times\\
&amp;amp; &amp;amp; \sum_{j_2}( &amp;amp; \int_0^1\prod_{t_2} p(r_{j_2}^{1/w_{j_2}} &amp;gt; r_{t_2}^{1/w_{t_2}})\mathrm d r_{j_2}\times\\
&amp;amp; &amp;amp; &amp;amp; ...\times\\
&amp;amp; &amp;amp; &amp;amp; \sum_{j_m}(\int_0^1\prod_{t_m} p(r_{j_m}^{1/w_{j_m}} &amp;gt; r_{t_m}^{1/w_{t_m}})\mathrm d r_{j_m})\\
&amp;amp; &amp;amp; ) &amp;amp; \\ &amp;amp; ) &amp;amp; &amp;amp; \\
\end{array}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;其中的积分式在之前已经见过了，其运算过程如下（注意 t&lt;sub&gt;k&lt;/sub&gt; 的取值范围）：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{array}{rl}
&amp;amp; \int_0^1\prod_{t_k}p(r_{j_k}^{1/w_{j_k}} &amp;gt; r_{t_k}^{1/w_{t_k}})\mathrm{d}r_{j_k} \\
&amp;amp; \\
= &amp;amp; \int_0^1\prod_{t_k}r_{j_k}^{w_{t_k}/w_{j_k}}\mathrm{d}r_{j_k} \\
&amp;amp; \\
= &amp;amp; \int_0^1r_{j_k}^{(\sum_{t_k}w_{t_k})/w_{j_k}}\mathrm{d}r_{j_k} \\
&amp;amp; \\
= &amp;amp; \frac{w_{j_k}}{(\sum_{t_k}w_{t_k})+w_{j_k}} \\
&amp;amp; \\
= &amp;amp; \frac{w_{j_k}}{w-(w_{j_1}+w_{j_2}+...+w_{j_{k-1}})}
\end{array}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;最终，概率计算式子变成：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\bar p_i(m)=\sum_{j_1}\left(\frac{w_{j_1}}{w}\sum_{j_2}\left(\frac{w_{j_2}}{w-w_{j_1}}\sum_{j_3}\left(\frac{w_{j_2}}{w-w_{j_1}-w_{j_2}}\cdots\sum_{j_m}\frac{w_{j_m}}{w-\sum_{k=1}^{m-1}w_{j_k}}\right)\right)\right)
\end{equation*}
&lt;/div&gt;
&lt;p&gt;与 &lt;a class="reference external" href="https://blog.gocalf.com/weighted-random-selection"&gt;前一篇&lt;/a&gt; 文章中的理论值完全一样。&lt;/p&gt;
&lt;p&gt;呼，可怕的推导过程。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;程序实现&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;虽然证明过程异常恐怖，但实现起来却很简单。实际运算中，只要维持一个大小为 m 的最小堆（没错，是最小堆）来保存当前已知的最大的 m 个键值，每拿到一个新的元素，算出对应的键值，如果它比堆中的最小值大，就可以放入堆中替换掉最小值。Python 实现函数如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;heapq&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;WeightedRandomSample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'invalid m'&lt;/span&gt;
  &lt;span class="n"&gt;selection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="n"&gt;heap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Outputs the current selection and gets next item&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;selection&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
      &lt;span class="n"&gt;selection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;heapify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;heapreplace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;每次拿到一个新的元素，通过 &lt;tt class="docutils literal"&gt;key = rand.random() ** (1.0 / weight)&lt;/tt&gt; 产生一个与其权重有关的随机键值 key。当元素个数小于 m 时，直接将新的元素放入堆空间中（但并不建堆），这样只用 O(1) 时间；当遇到第 m 个元素后，堆空间放满了，这时候进行建堆操作（&lt;tt class="docutils literal"&gt;heapify(heap)&lt;/tt&gt;），需要 O(m) 时间；之后每拿到一个新的元素，用 O(1) 时间从堆顶拿出最小值与新元素的键值比较，如果后者更大就用后者替换掉堆顶元素，对堆进行必要的操作（O(log
m) 时间）以保持其结构（&lt;tt class="docutils literal"&gt;heapreplace(heap, (key, index))&lt;/tt&gt;）。&lt;/p&gt;
&lt;p&gt;关于 Python 中的堆可以参考：&lt;a class="reference external" href="http://docs.python.org/library/heapq.html"&gt;http://docs.python.org/library/heapq.html&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;总体来看，整段程序用时 O(n * log
m)，占用 O(m) 辅助空间。这样的处理比较适用于 m &amp;lt;&amp;lt;
n 的情况。当 m 与 n 接近时，可以用 n 个辅助空间存储所有元素的键值，当遍历结束后用 O(n) 时间对这 n 个元素执行快速选择算法，选出 m 个最大的元素即可，耗时 O(n)，辅助空间 O(n)。&lt;/p&gt;
&lt;p&gt;用同样一组具有等差分布权重的元素调用 &lt;tt class="docutils literal"&gt;WeightedRandomSample&lt;/tt&gt; 十万次，得到如下的概率分布，与理论分布非常接近。&lt;/p&gt;
&lt;div class="highcharts" id="weighted_sample-chart" style="height: 480px; width: 640px"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
$(function () {
    $('#weighted_sample-chart').highcharts({
        chart: {type: 'line', backgroundColor: null},
        title: {text: '用 WeightedRandomSample 函数随机选取 m 个元素，第 i 个元素被选中的概率'},
        xAxis: {categories: ['i=1', 'i=2', 'i=3', 'i=4', 'i=5', 'i=6', 'i=7', 'i=8', 'i=9', 'i=10'] },
        yAxis: {min: 0, max: 1, tickInterval: 0.1, title: { text: null} },
        series: [{
            name: 'm=1',
            data: [0.01824, 0.0371, 0.05426, 0.0723, 0.09161, 0.10988, 0.12501, 0.14523, 0.16448, 0.18189]
        }, {
            name: 'm=2',
            data: [0.03979, 0.07617, 0.11498, 0.15227, 0.18612, 0.22121, 0.25497, 0.28584, 0.32032, 0.34833]
        }, {
            name: 'm=3',
            data: [0.06173, 0.12283, 0.17995, 0.23588, 0.28565, 0.33511, 0.38292, 0.4259, 0.46621, 0.50382]
        }, {
            name: 'm=4',
            data: [0.08874, 0.17467, 0.25423, 0.32381, 0.39314, 0.45378, 0.5103, 0.55865, 0.60438, 0.6383]
        }, {
            name: 'm=5',
            data: [0.1239, 0.23698, 0.33544, 0.42587, 0.50627, 0.57379, 0.63485, 0.68303, 0.72241, 0.75746]
        }, {
            name: 'm=6',
            data: [0.16634, 0.31401, 0.43789, 0.54221, 0.62332, 0.6963, 0.74587, 0.79285, 0.82668, 0.85453]
        }, {
            name: 'm=7',
            data: [0.22243, 0.40975, 0.56211, 0.67063, 0.74944, 0.80965, 0.85354, 0.88449, 0.91023, 0.92773]
        }, {
            name: 'm=8',
            data: [0.31252, 0.54828, 0.71493, 0.8095, 0.87294, 0.91133, 0.93608, 0.95444, 0.96568, 0.9743]
        }, {
            name: 'm=9',
            data: [0.48359, 0.78327, 0.89211, 0.93922, 0.96197, 0.97692, 0.98513, 0.98987, 0.99282, 0.9951]
        }, {
            name: 'm=10',
            data: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        }]
    });
});
&lt;/script&gt;&lt;/div&gt;
</content><category term="算法"></category><category term="Interview Question"></category><category term="Probability"></category><category term="Random Sample"></category></entry><entry><title>单次遍历，带权随机选取问题（一）</title><link href="https://blog.gocalf.com/weighted-random-selection" rel="alternate"></link><published>2011-09-21T23:07:00+08:00</published><updated>2011-09-27T13:20:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-09-21:/weighted-random-selection</id><summary type="html">&lt;p class="first last"&gt;问题描述：有一组数量未知的数据，每个元素有非负权重。要求只遍历一次，随机选取其中的一个元素，任何一个元素被选到的概率与其权重成正比。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;在 &lt;a class="reference external" href="https://blog.gocalf.com/random-selection"&gt;单次遍历，等概率随机选取问题&lt;/a&gt; 中已经剧透了今天的内容，那就是带权随机选取（Weighted
Random Sample）问题。&lt;/p&gt;
&lt;p&gt;问题描述：有一组数量未知的数据，每个元素有非负权重。要求只遍历一次，随机选取其中的一个元素，任何一个元素被选到的概率与其权重成正比。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;设元素总数为 n，当然在遍历结束前 n 是未知的。设第 i（1 &amp;lt;= i &amp;lt;=
n）个元素的权重为 w&lt;sub&gt;i&lt;/sub&gt;（&amp;gt;
0），则权重总和为 &lt;span class="math"&gt;\(w=\sum_{i=1}^{n}{w_i}\)&lt;/span&gt;，也是在遍历结束时才知道的。根据题目要求，第 i 个元素被选取的概率应该等于 &lt;span class="math"&gt;\(p_i=\frac{w_i}{w}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;虽然加了个权重，但解法依旧非常简单，在 &lt;a class="reference external" href="https://blog.gocalf.com/random-selection"&gt;单次遍历，等概率随机选取问题&lt;/a&gt; 中的 &lt;tt class="docutils literal"&gt;RandomSelect&lt;/tt&gt; 函数上稍作修改就得到本问题的解法，依旧是 O(n) 时间，O(1) 辅助空间：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;WeightedRandomSelect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;selection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
  &lt;span class="n"&gt;totalweight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Outputs the current selection and gets next item&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;selection&lt;/span&gt;
    &lt;span class="n"&gt;totalweight&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;totalweight&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;selection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;其中 Python 的 &lt;tt class="docutils literal"&gt;random.random()&lt;/tt&gt; 返回 [0,
1) 之间的随机小数。&lt;/p&gt;
&lt;p&gt;看一下是否满足概率要求。如果最终被选取的是第 i（1 &amp;lt;= i &amp;lt;=
n）个元素，那必须是遍历到它的时候，恰好被选中，即 &lt;tt class="docutils literal"&gt;rand.random()
* totalweight &amp;lt; weight&lt;/tt&gt;，其概率为：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\frac{w_i}{w}=\frac{w_i}{\sum_{k=1}^{i}{w_k}}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;另外，还要在处理以后的任何一个元素时，第 i 个元素都没有被替换掉，即对于任意的 j（i
&amp;lt; j &amp;lt;= n），第 j 个元素都不会被选中，其概率为：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\frac{w-w_j}{w}=\frac{\sum_{k=1}^{j-1}{w_k}}{\sum_{k=1}^{j}{w_k}}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;因此，第 i 个元素最终被选取的概率为：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
p_i=\frac{w_i}{\sum_{k=1}^{i}{w_k}}\times\frac{\sum_{k=1}^{i}{w_k}}{\sum_{k=1}^{i+1}{w_k}}\times\frac{\sum_{k=1}^{i+1}{w_k}}{\sum_{k=1}^{i+2}{w_k}}\times\cdots\times\frac{\sum_{k=1}^{n-1}{w_k}}{\sum_{k=1}^{n}{w_k}}=\frac{w_i}{\sum_{k=1}^{n}{w_k}}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;下面这段程序调用 &lt;tt class="docutils literal"&gt;WeightedRandomSelect&lt;/tt&gt; 对一组具有等差数列权重的元素进行选取。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Sample code to use WeightedRandomSelect function&lt;/span&gt;
&lt;span class="c1"&gt;# Use an arithmetic sequence as weights&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="c1"&gt;# weights are [1, 2, 3, ..., 10]&lt;/span&gt;
&lt;span class="n"&gt;weights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;repeat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;
&lt;span class="n"&gt;occurrences&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;selector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WeightedRandomSelect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;selection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;selection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
  &lt;span class="n"&gt;occurrences&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;occurrences&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;某次运行结果为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1723, 3644, 5405, 7326, 9027, 10903, 12678, 14784, 16345, 18165]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而对于这组权重的概率理论值为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1 : 2 : 3 : 4 : 5 : 6 : 7 : 8 : 9 : 10
= 0.0181818 : 0.0363636 : 0.0545455 : 0.0727273 : 0.0909091 : 0.109091 : 0.127273 : 0.145455 : 0.163636 : 0.181818
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可见程序是正确的。&lt;/p&gt;
&lt;div class="section" id="m"&gt;
&lt;h2&gt;扩展：选取 m 个元素，概率理论值&lt;/h2&gt;
&lt;p&gt;来看看选取多个元素的问题。当选取多个元素时，可以认为选取过程是逐步进行的，即无放回的多次选取。每一次选取时，任何一个元素被选中的概率都与其权重成正比，但总的权重则又剩余的元素集合决定。&lt;/p&gt;
&lt;p&gt;当 m=2 的时候，第 i 个元素被选中可以是两种情况：第一次就被选中；第一次未被选中，第二次被选中。可以得到其概率为这两种情况的概率之和，即：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
p_i(2)=\frac{w_i}{w}+\sum_{j\neq i}\left(\frac{w_j}{w}\times\frac{w_i}{w-w_j}\right)
\end{equation*}
&lt;/div&gt;
&lt;p&gt;值得注意的是，即便 w&lt;sub&gt;i&lt;/sub&gt; 和 w 不变，如果其他元素的概率分布不同，最后得到的结果也不同，因此上面这个式子无法把其中的求和化简掉。&lt;/p&gt;
&lt;p&gt;从另一方面来看，第 i 个元素被选中的概率等于 1 减去它不被选中的概率。用 &lt;span class="math"&gt;\(\bar p\)&lt;/span&gt; 表示不被选中的概率，则有：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\bar p_i(2)=\sum_{j\neq i}\left(\frac{w_j}{w}\times\frac{w-w_j-w_i}{w-w_j}\right)
\end{equation*}
&lt;/div&gt;
&lt;p&gt;显然，&lt;span class="math"&gt;\(p_i(2)+\bar p_i(2)=1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;当 m&amp;gt;2 时，其概率表达式将会变得异常复杂，因为跟概率分布有关，所以算式无法化简。未被选中的概率计算式要稍微简单些，大概是这个样子的：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\bar p_i(m)=\sum_{j_1}\left(\frac{w_{j_1}}{w}\sum_{j_2}\left(\frac{w_{j_2}}{w-w_{j_1}}\sum_{j_3}\left(\frac{w_{j_2}}{w-w_{j_1}-w_{j_2}}\cdots\sum_{j_m}\frac{w_{j_m}}{w-\sum_{k=1}^{m-1}w_{j_k}}\right)\right)\right)
\end{equation*}
&lt;/div&gt;
&lt;p&gt;其中，&lt;span class="math"&gt;\(\forall 1\leq k\leq m,j_k\notin\{i,j_1,j_2,\cdots,j_{k-1}\}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;对于给定的一组权重，可以用下面这段程序计算出任意 m、i（程序中的 i 是从 0 开始的）对应的概率数值（请无视其 coding
style）：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalweight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;totalweight&lt;/span&gt; \
         &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalweight&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;CalcSampleProbability&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;invalid i&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;invalid m&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;可惜算法的复杂度非常高，&lt;tt class="docutils literal"&gt;CalcSampleProbability&lt;/tt&gt; 需要 O(n^m) 时间来完成一次计算。期待高手改进。&lt;/p&gt;
&lt;p&gt;来看一下等权重、等差数列权重和等比数列权重的 n 选 m 概率分布图（图中 i 依旧采用 1
&amp;lt;= i &amp;lt;= n 的取值范围）：&lt;/p&gt;
&lt;div id="equal-p-chart" class="highcharts" style="height: 480px; width: 640px"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
$(function () {
    $('#equal-p-chart').highcharts({
        chart: {type: 'line', backgroundColor: null},
        title: {text: '等值权重随机选取 m 个元素，第 i 个元素被选中的概率'},
        xAxis: {categories: ['i=1', 'i=2', 'i=3', 'i=4', 'i=5', 'i=6', 'i=7', 'i=8', 'i=9', 'i=10'] },
        yAxis: {min: 0, max: 1, tickInterval: 0.1, title: { text: null} },
        series: [{
            name: 'm=1',
            data: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]
        }, {
            name: 'm=2',
            data: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]
        }, {
            name: 'm=3',
            data: [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]
        }, {
            name: 'm=4',
            data: [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4]
        }, {
            name: 'm=5',
            data: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
        }, {
            name: 'm=6',
            data: [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]
        }, {
            name: 'm=7',
            data: [0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7]
        }, {
            name: 'm=8',
            data: [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]
        }, {
            name: 'm=9',
            data: [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9]
        }, {
            name: 'm=10',
            data: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        }]
    });
});
&lt;/script&gt;&lt;div id="arithmetic-p-chart" class="highcharts" style="height: 480px; width: 640px"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
$(function () {
    $('#arithmetic-p-chart').highcharts({
        chart: {type: 'line', backgroundColor: null},
        title: {text: '等差分布权重随机选取 m 个元素，第 i 个元素被选中的概率'},
        xAxis: {categories: ['i=1', 'i=2', 'i=3', 'i=4', 'i=5', 'i=6', 'i=7', 'i=8', 'i=9', 'i=10'] },
        yAxis: {min: 0, max: 1, tickInterval: 0.1, title: { text: null} },
        series: [{
            name: 'm=1',
            data: [0.0181818, 0.0363636, 0.0545455, 0.0727273, 0.0909091, 0.109091, 0.127273, 0.145455, 0.163636, 0.181818]
        }, {
            name: 'm=2',
            data: [0.0387314, 0.0767641, 0.114058, 0.150568, 0.18625, 0.221051, 0.254916, 0.287787, 0.319597, 0.350277]
        }, {
            name: 'm=3',
            data: [0.0623607, 0.122317, 0.17976, 0.234582, 0.286682, 0.335965, 0.382357, 0.425805, 0.466296, 0.503875]
        }, {
            name: 'm=4',
            data: [0.0901537, 0.174687, 0.253418, 0.326208, 0.392976, 0.453728, 0.508577, 0.55777, 0.601688, 0.640794]
        }, {
            name: 'm=5',
            data: [0.123873, 0.236513, 0.337709, 0.427439, 0.505932, 0.573733, 0.631737, 0.681121, 0.723108, 0.758835]
        }, {
            name: 'm=6',
            data: [0.166654, 0.312339, 0.436946, 0.541013, 0.625933, 0.694068, 0.748498, 0.792059, 0.827084, 0.855406]
        }, {
            name: 'm=7',
            data: [0.224802, 0.410906, 0.558505, 0.670021, 0.750968, 0.809768, 0.852948, 0.885072, 0.909277, 0.927732]
        }, {
            name: 'm=8',
            data: [0.313537, 0.551687, 0.714389, 0.811455, 0.871435, 0.909967, 0.935546, 0.952993, 0.965166, 0.973825]
        }, {
            name: 'm=9',
            data: [0.481584, 0.784844, 0.89107, 0.938902, 0.963394, 0.977002, 0.985015, 0.989947, 0.99309, 0.995152]
        }, {
            name: 'm=10',
            data: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        }]
    });
});
&lt;/script&gt;&lt;div id="geometric-p-chart" class="highcharts" style="height: 480px; width: 640px"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
$(function () {
    $('#geometric-p-chart').highcharts({
        chart: {type: 'line', backgroundColor: null},
        title: {text: '等比分布权重随机选取 m 个元素，第 i 个元素被选中的概率'},
        xAxis: {categories: ['i=1', 'i=2', 'i=3', 'i=4', 'i=5', 'i=6', 'i=7', 'i=8', 'i=9', 'i=10'] },
        yAxis: {min: 0, max: 1, tickInterval: 0.1, title: { text: null} },
        series: [{
            name: 'm=1',
            data: [0.000977517, 0.00195503, 0.00391007, 0.00782014, 0.0156403, 0.0312805, 0.0625611, 0.125122, 0.250244, 0.500489]
        }, {
            name: 'm=2',
            data: [0.0025488, 0.00509568, 0.0101837, 0.0203364, 0.0405476, 0.0805822, 0.159009, 0.308474, 0.569214, 0.804008]
        }, {
            name: 'm=3',
            data: [0.00537735, 0.0107444, 0.0214475, 0.0427281, 0.0847763, 0.166729, 0.321243, 0.584598, 0.817744, 0.944612]
        }, {
            name: 'm=4',
            data: [0.0108642, 0.021685, 0.0431948, 0.0856766, 0.1684, 0.324092, 0.588553, 0.82115, 0.946757, 0.989628]
        }, {
            name: 'm=5',
            data: [0.021834, 0.0434907, 0.0862602, 0.169534, 0.326218, 0.592157, 0.823804, 0.947919, 0.989983, 0.9988]
        }, {
            name: 'm=6',
            data: [0.0440274, 0.0873236, 0.171618, 0.330194, 0.599069, 0.828695, 0.949851, 0.990437, 0.998866, 0.999919]
        }, {
            name: 'm=7',
            data: [0.0895401, 0.175965, 0.338491, 0.613516, 0.838615, 0.953664, 0.991303, 0.998981, 0.999928, 0.999997]
        }, {
            name: 'm=8',
            data: [0.18552, 0.356749, 0.645339, 0.859134, 0.961175, 0.992947, 0.999194, 0.999944, 0.999998, 1]
        }, {
            name: 'm=9',
            data: [0.401858, 0.724258, 0.902929, 0.975573, 0.995862, 0.999551, 0.99997, 0.999999, 1, 1]
        }, {
            name: 'm=10',
            data: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        }]
    });
});
&lt;/script&gt;&lt;p&gt;Mathematica 提供了 &lt;tt class="docutils literal"&gt;RandomSample&lt;/tt&gt; 函数，支持带权选取，当然它是在遍历之前就已经知道元素个数的。给它一组等差分布的权重，可以看出十万次随机选取后得到的概率分布与上面的理论分布非常接近。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;count = 10;
weights = Range[count];
elems = Range[count];
retry = 100000;
map = Table[
    freq = ConstantArray[0, count];
    For [i = 0, i &amp;lt; retry, i++,
        freq += BinCounts[RandomSample[weights -&amp;gt; elems, m], {1, count + 1, 1}]
    ];
    freq, {m, 1, count, 1}
];
ListLinePlot[map / retry, PlotMarkers -&amp;gt; Automatic]
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="mathematica_random_sample" src="https://blog.gocalf.com/images/2011/09/mathematica_random_sample.png" /&gt;
&lt;p class="caption"&gt;Mathematica &lt;tt class="docutils literal"&gt;RandomSample&lt;/tt&gt; 随机选取 m 个元素，第 i 个元素被选中的概率&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;苦苦思考了好几天，但并没有想到一个直观的方法可以给之前的 &lt;tt class="docutils literal"&gt;RandomSample&lt;/tt&gt; 加上权重处理。因为那概率式子太复杂，实在不知道该怎么去凑。不过在下一篇文章中将会介绍一个神奇的算法（当然不是我想出来的），并且会给出我的证明。&lt;/p&gt;
&lt;p&gt;现在发文章的速度越来越慢了，实在因为能力有限，每次为了一两个式子都要演算很久。再接再厉。&lt;/p&gt;
&lt;/div&gt;
</content><category term="算法"></category><category term="Interview Question"></category><category term="Probability"></category><category term="Random Sample"></category></entry><entry><title>黎明公主攻略：初章 英雄传说的扉页</title><link href="https://blog.gocalf.com/zelda-tp-ch1" rel="alternate"></link><published>2011-09-13T22:59:00+08:00</published><updated>2011-10-11T20:30:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-09-13:/zelda-tp-ch1</id><summary type="html">&lt;p class="first last"&gt;如你期望那样，你将扮演 Link，拯救 Zelda 公主和 Hyrule 王国的年轻英雄。在黎明公主中，你将与横行在 Hyrule 王国的暗影军团战斗。凭借 Hyrule 大地神奇的力量和你自己的勇气，在一个个迷宫里消灭无数的敌人吧！那么，现在就开始我们的旅程！&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;初章 英雄传说的扉页（被神选中的少年）&lt;/h2&gt;
&lt;p&gt;如你期望那样，你将扮演 Link，拯救 Zelda 公主和 Hyrule 王国的年轻英雄。在黎明公主中，你将与横行在 Hyrule 王国的暗影军团战斗。凭借 Hyrule 大地神奇的力量和你自己的勇气，在一个个迷宫里消灭无数的敌人吧！那么，现在就开始我们的旅程！&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class="section" id="ordon-village"&gt;
&lt;h3&gt;奥东村（Ordon Village）&lt;/h3&gt;
&lt;p&gt;奥东村（Ordon Village）外，法隆森林（Faron
Woods）的泉水旁，我们的主角 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-characters#link"&gt;林克（Link）&lt;/a&gt; 与村里唯一的剑士，也即林克的导师鲁斯尔（Rusl）在谈论着夜晚的异常与广阔的海拉尔（Hyrule）世界，鲁斯尔问林克是否知道黎明之时（Twilight
Time），年轻的林克显然还不知道这些，因为他还没走出过法隆森林，鲁斯尔也打算让林克到外面的世界去看看，让他后天把送给贵族的东西到带海拉尔城去。在天黑前两人回到了村子里。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/09/tp_ch01_01.jpg"&gt;&lt;img alt="tp_ch01_01" src="https://blog.gocalf.com/images/2011/09/tp_ch01_01.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;林克与导师鲁斯尔在谈论着夜晚的异常与广阔的海拉尔世界&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h4&gt;牧羊&lt;/h4&gt;
&lt;p&gt;过了一会，一位村民跑来告诉林克，艾普娜不见了，林克赶到奥东之泉（Ordon
Spring），看见了青梅竹马 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-characters#ilia"&gt;伊莉娅（Ilia）&lt;/a&gt; 与艾普娜，原来是伊莉娅帮林克给艾普娜擦拭干净，伊莉娅告诉林克，艾普娜有点烦躁不安，林克拔起湖边（马蹄状）的草，吹起了悠扬的口哨，艾普娜顿时安静了下来，林克骑上艾普娜，试了一下感觉，真是一匹出色的马驹。回到村里，林克四处逛了一下（与大家说说话吧，不过现在还不能进到任何屋子里），然后来到奥东牧场（Ordon
Ranch），农场主请林克帮忙把倔犟的羊群赶回羊圈。完成任务并不困难，赶羊的乐趣大家很快就能体会到了。按 A 键能惊吓羊支，让它们更快的移动，不过兔子急了也会咬人的哦！小心它们调头攻击你！完成后，农场主提供农场让林克练习骑马跳，在接近栅栏一段距离的时候按 A 加速，到达栅栏时马会自动跳过去，练习得差不多了，天色也渐渐晚了，林克骑着艾普娜跳过农场大门径直回了家。一天的生活结束了，此时的林克还不知道之后的自己即将要担负起拯救两个世界的重任。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/09/tp_ch01_02.jpg"&gt;&lt;img alt="tp_ch01_02" src="https://blog.gocalf.com/images/2011/09/tp_ch01_02.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;奥东牧场的农场主请林克帮忙把倔犟的羊群赶回羊圈&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h4&gt;孕妇的篮子，离家出走的猫&lt;/h4&gt;
&lt;p&gt;第二天一早，林克被村里的小孩们给叫醒了，本来打算骑着艾普娜到处逛一下的，但是鲁斯尔的儿子柯林（Collin）让林克到村里看看有什么可以帮助大家的，也让艾普娜休息一天，看来将会是忙碌的一天啊。刚进村就有村民要林克帮忙除掉屋后大树顶上的马蜂窝，林克当然爽快答应，没走两步看到汉奇（Hanch）站在一处高台上，和他对话（按 Z 然后按 A），练习攀登（接近树藤按前，上下左右移动）。林克攀爬上去，汉奇让林克试着吹响灌木召唤隼鹰并且告诉林克他们家的猫咪老是在湖边打转不肯回家。林克跳到（对准方向按前就可以了）旁边的高台上，用灌木吹起了口哨，一只隼鹰飞到了林克的手臂上，此时可以命令隼鹰飞到指定的地方。首先帮村民搞定马蜂窝吧，让隼鹰撞落村里最高树上的马蜂窝，爬到树上在原来挂马蜂窝的地方可以拣到 15 个卢比。在湖边看到了柯林的妈妈正在犯愁，原来是前段时间不小心将婴儿摇篮掉到河中被水冲走了，林克当然不能坐视不管，顺着河往下游游去，看到水中一个巨石上有只猴子举着婴儿摇篮，林克爬到岸上，举起石头向猴子砸去，但是仿佛距离不够，看来只有暂时先返回村子了。回到村里林克想起了汉奇的话，看来可以让隼鹰帮忙把婴儿摇篮抓回来，爬上汉奇站的高台，从旁边的高台跳到屋顶上，然后再跳到另一个高台上，隐约可以看到远处的猴子，召唤隼鹰瞄准猴子，隼鹰果然漂亮地将婴儿摇篮给夺了回来。带着婴儿摇篮回到柯林妈妈那里，她高兴万分，让林克跟她一起回家，因为有神秘的礼物要送给林克。来到她家门口，原来是一副钓鱼竿，有了钓鱼竿，林克可以到湖边去放松一下了，来到刚才看到的有小猫的湖边钓鱼。按 - 号调出道具栏，将钓竿装备到 B（装备到右手手柄的左右下也可以，使用前会道具切换到 B），在河边按 B 使用钓竿，按 B 把鱼竿甩进水里，然后等待，当浮标被拉下水后，把右手的 Wii 手柄举高，出现 HIT，继续保持举高的姿势，直到钓上鱼。林克钓上来的第一条鱼就引起了小猫的注意，刚钓上第二条时，小猫叼着鱼就开跑，一路跑回了家，林克追了过去，店主塞拉（Sera）为了感谢林克，送给林克一瓶牛奶，牛奶可以让林克感到体力充沛，不过这个瓶子将来更有其他的用处。出门来到农场山脚下的村长布（Bo）的家门口，正在与布谈话时，听到农场主的喊声，回头望去，原来是山羊跑出了农场，朝山坡下冲了过来，林克凭借着敏捷的反应，顺手抓住山羊的角，然后将其摔翻在地上，山羊就乖乖地返回牧场。村里最高的房顶上可以拣到 10 个卢比，看到牧场方向的平台上还有 10 个，这时召唤隼鹰，让隼鹰把附近的鸡给带上来，然后可以借助鸡滑翔到对面的平台上。这时拣到的卢比也超过了 30 个了，可以去商店买弹弓了。商店有弹弓，蜜蜂幼虫（B 装备钓竿的情况下，使用蜜蜂幼虫，可以拿去钓鱼，需要空瓶子装）和回复药（需要空瓶子装）出售。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/09/tp_ch01_03.jpg"&gt;&lt;img alt="tp_ch01_03" src="https://blog.gocalf.com/images/2011/09/tp_ch01_03.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;林克凭借着敏捷的反应，顺手抓住山羊的角，然后将其摔翻在地上&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h4&gt;陪孩子们玩&lt;/h4&gt;
&lt;p&gt;做了那么多的事情，林克也累了，回家休息一下吧，在家门口遇到了鲁斯尔，鲁斯尔告诉林克在他家中放了一个箱子。林克迫不及待地想回去看看究竟是什么东西，可没走两步又被家门口的 3 个小孩马洛（Malo）、塔洛（Talo）、贝思（Beth）吵着要林克表演弹弓技术，帅气的林克当然会满足他们的愿望，和装备钓竿的方法一样装备弹弓，使用弹弓后按住 B 拉开弹弓，用右手的 Wii 手柄瞄准目标，放开 B 射击，按 Z 可以锁定近处的目标。分别打完靶子和稻草人后，小孩们被林克高超的技艺所折服。终于可以回家了，房子前的藤条上居然出现了魔蜘蛛，用弹弓将其击落。一进门就看到了鲁斯尔给林克的箱子，赶紧打开看看，一把木剑! 林克终于有武器了。林克激动得出门想练练剑，刚好小孩们又吵着要林克表演剑术，不过好像他们产生了分歧，贝思很喜欢林克的表演，马洛却觉得林克不过是表演些雕虫小技。按他们的请求耍出剑招：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;平挥：&lt;/strong&gt;把 wiimote 从一边甩到另一边（左右挥动）；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;直斩：&lt;/strong&gt;从上往下甩 wiimote；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;直刺：&lt;/strong&gt;按住 Z 和前（前倾 nunchunk 的模拟摇杆），挥动 wiimote；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;旋转攻击：&lt;/strong&gt;左右挥动 nunchunk；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跳斩：&lt;/strong&gt;用 Z 键锁定后按 A。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在林克一阵刀光剑影之后，小孩们都惊呆了，贝思更是对林克赞不绝口。这时那只拣走婴儿摇篮的猴子又出现了，引起小孩们的好奇，塔洛追着猴子进了法隆森林。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/09/tp_ch01_04.jpg"&gt;&lt;img alt="tp_ch01_04" src="https://blog.gocalf.com/images/2011/09/tp_ch01_04.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;林克表演剑术&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;法隆森林&lt;/h3&gt;
&lt;div class="section" id="id7"&gt;
&lt;h4&gt;救出被捉的孩子&lt;/h4&gt;
&lt;p&gt;跟过去发现塔洛跟随猴子到吊桥对面去了，回去骑上心爱的艾普娜，林克也追进了法隆森林，穿过法隆森林泉左边的山洞，来到一个岔路口，看来跟丢了，往左边走，看到一个了隐居商人柯洛（Coro），他送给林克一盏煤油灯，用 100 块买油瓶子（重点是装油的瓶子，只能买一次）。回到岔路口，林克用煤油灯烧开蜘蛛网，进入山洞，洞中有很多台柱是可以用灯点燃的，有煤油灯的帮助，林克穿过漆黑的山洞，来到一处开阔地，林克在北面的洞口干掉几个小喽啰，路上有两根柱子，看起来可以跳过去，但实际上并不能，人类还是没法做到的。进入洞中，在最深处的宝箱里面得到一把钥匙，林克又点燃箱子左右的灯柱，出现了一个隐藏宝箱，可以得到 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h01"&gt;第一块心之碎片&lt;/a&gt;，每收集满 5 个心之碎片，林克的生命值可以增加一颗心，即一个心之容器。然后回到之前的那片开阔地，到东面干掉两个守卫后用刚得到的钥匙开门进去，不远出碰到一只小鹦鹉，此处可以补充生命值和灯油，不过就算是救世主的林克来光顾也不是免费的，旁边还有一个箱子就是让顾客消费后自己投币的，如果林克购买了物品而不老实买单的话，鹦鹉可不会放林克离开的。继续前进，林克一路杀进去，没多远就看到了关押小猴子和塔洛的笼子，轻松干掉两个守卫后，林克砍坏笼子救出了小猴子和塔洛，塔洛告诉林克，要不是小猴子一直骚扰魔物，他可能都被杀害了，正是因此小猴子也被魔物抓住关到了笼子里。林克带着塔洛回到了村里，自己也回家休息了。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/09/tp_ch01_05.jpg"&gt;&lt;img alt="tp_ch01_05" src="https://blog.gocalf.com/images/2011/09/tp_ch01_05.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;小猴子和塔洛被关押在笼子中&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;一大早农场主又要拜托林克赶羊，不过这次是要在 3 分钟之内赶完 20 只，完成后，林克在农场的山脚下遇到了伊莉娅，伊莉娅看到艾普娜的脚受伤了，便生气地带着艾普娜离去了，林克只好独自回家。路上遇到柯林要林克带他去奥东之泉看艾普娜，之后又遇到了那三个调皮的小孩拦路要林克把木剑给他们玩，不答应他们的话是过不去的，看来没办法了只好暂时借他们玩玩。来到奥东之泉，伊莉娅却紧闭大门不让林克进去，看来她还在生气，柯林告诉林克有个地方的小洞可以通往奥东之泉里面。回到路上有松鼠的地方，林克找到小洞钻了过去。林克答应伊莉娅会好好照顾艾普娜，伊莉娅也才同意将艾普娜交给林克，正在此时，一群凶悍的野猪骑士破门而入，将林克打昏在地，并带走了伊莉娅和柯林。醒来后的林克感觉到了事情的严重，于是急忙朝法隆森林深处追了过去，穿过吊桥，发现一堵黑暗之墙挡住了去路，林克感觉到了不寻常的力量，刚想靠近黑暗之墙调查一番，却被一只巨大的手抓入了黑暗世界。来到黑暗世界中的林克被一种强大的力量变成了狼的形态，涉世未深的林克承受不住这股强大的力量，便昏迷了过去……&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/09/tp_ch01_06.jpg"&gt;&lt;img alt="tp_ch01_06" src="https://blog.gocalf.com/images/2011/09/tp_ch01_06.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;一群凶悍的野猪骑士破门而入，将林克打昏在地，并带走了伊莉娅和柯林&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;海拉尔城堡&lt;/h3&gt;
&lt;div class="section" id="id9"&gt;
&lt;h4&gt;脱出黄昏世界&lt;/h4&gt;
&lt;p&gt;林克从昏迷中醒来后惊奇得发现自己变成了狼的形态，而起被锁在一间牢房里。此时一个神秘的独眼生物出现，林克下意识得提高了警觉，不过它却帮林克解开了锁链，暂时看来它不是敌人，它说要想逃出这个地方就得听它的话，对准牢笼边的木箱挥动右手手柄或者按住 Z 按 A，将其击碎，然后在松软的泥土处按右手手柄的下，挖洞离开牢笼。神秘生物毫不客气得骑到了林克背上，救世主被人骑的滋味一定很不爽，但是为了逃出这个地方只有暂时忍气吞声了。神秘生物的头部可以长出一只手打开一些吊环机关（按住 Z 按 A），看来它的来头不小啊，林克发现这个黑暗世界与光明世界是相通的，光明世界里的人们在黑暗世界中看来便是灵魂，通过狼的感知（按右手手柄的左或者右进入感应模式，感应模式下视觉会缩小，但能看见很多平时看不见的东西），林克可以听到他们的谈话。继续探索下水道，有很多机关和钱在等着你。小心这里的敌人并不好对付，掉下水的话尽快上岸，如果在水中被攻击的话是很惨的。在几个拉索机关后，进入一座桥的废墟，小心头上飞来飞去的怪鸟，最好杀死它们后再前进，灵活利用 Z 锁定然后攻击，很容易杀死它们。跟着神秘生物的提示，林克一直来到一个螺旋楼梯的高塔处，这里它会带林克飞过一些断口的地方，一路上到顶部，通过门来到城堡外部，神秘生物带着林克经过房顶来到一座塔内。在塔顶林克见到了一位黑衣人，难道自己被神秘生物欺骗了? 这也许就是幕后指使者，正当林克猜测时，黑衣人转过身来，原来她就是伟大的 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-characters#zelda"&gt;塞尔达（Zelda）公主&lt;/a&gt;。从塞尔达公主口中得知神秘生物叫做 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-characters#midna"&gt;米德娜（Midna）&lt;/a&gt;，原来这一切都是一个叫做 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-characters#zant"&gt;赞特（Zant）&lt;/a&gt; 的魔法师所策划的整个阴谋，塞尔达公主为了子民不受到迫害，而被囚禁在这里，塞尔达公主告诉林克赶快离开这里，以免被赞特的手下发现，林克只好逃出塔外，在屋顶米德娜发动魔法将林克传送回光明世界。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/09/tp_ch01_07.jpg"&gt;&lt;img alt="tp_ch01_07" src="https://blog.gocalf.com/images/2011/09/tp_ch01_07.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;变成狼形态的林克与米德娜&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;奥东村&lt;/h3&gt;
&lt;div class="section" id="id11"&gt;
&lt;h4&gt;寻找剑与盾&lt;/h4&gt;
&lt;p&gt;林克发现自己被传送到了奥东之泉，但是回到光明世界的林克仍然是狼的形态，米德娜要林克搞到一面盾和一把剑，为变成人的时候做准备。回到家门口林克发现在狼的形态下可以听懂动物的语言。来到村中水车处，林克偷听到了两位村民的对话，得知小孩们被魔物俘走了，但林克忘了自己是处于狼的形态，正想上前听得再清晰一些，结果被村民发现，两人以为是魔物来了，匆忙逃进屋内。林克没有办法开门进去，看来只好走房顶的窗口进去了，但是水车旁边的高台上有村民带着隼鹰守夜，林克只好先跳到商店屋顶再从背后吓走高台上的村民，然后通过水车跳到对面的房顶上，从窗口进去。进去后发现墙上有面盾牌，撞下取得后从旁边的窗口离开。谁有武器呢？林克想了想，导师鲁斯尔那一定有把，前往鲁斯尔的家，但是就算是导师也认不出林克了，挥舞着剑不停的驱赶眼前的这只野兽，看来只有从旁边绕过去了，进入感应模式，能看见地上有些地方一闪一闪的，代表这些地方是可以挖的，在靠屋子的闪光处挖，进去拿到剑后赶紧离开吧，因为现在大家都不欢迎林克。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/09/tp_ch01_08.jpg"&gt;&lt;img alt="tp_ch01_08" src="https://blog.gocalf.com/images/2011/09/tp_ch01_08.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;在导师鲁斯尔家里找到剑&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3&gt;法隆地区&lt;/h3&gt;
&lt;div class="section" id="id13"&gt;
&lt;h4&gt;第一位光之精灵&lt;/h4&gt;
&lt;p&gt;带着剑和盾，林克一心只想救出塞尔达公主，一路狂奔，经过奥东之泉时却遇到了 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-characters#shadowbeing"&gt;暗影使者（Shadow Being）&lt;/a&gt;，林克轻松将其击倒，消灭暗影使者后，光之精灵奥多那（Ordona）出现，告诉林克世界上一共有四位光之精灵，要想让世界恢复正常，必须要依靠四位光之精灵的力量，奥多那让林克去找到另外三位光之精灵。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/09/tp_ch01_09.jpg"&gt;&lt;img alt="tp_ch01_09" src="https://blog.gocalf.com/images/2011/09/tp_ch01_09.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;要想让世界恢复正常，必须要依靠四位光之精灵的力量&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h4&gt;第二位光之精灵&lt;/h4&gt;
&lt;p&gt;世界正在被黑暗吞噬，刻不容缓，林克和米德娜来到黑暗之墙外，米德娜问林克是否做好了进入黑暗世界的准备，这根本没有思考的余地，林克坚定的点了点头。刚一进入黑暗世界便遇到三只黑暗使者，当它们死剩一只时，会全体复活。米德娜告诉林克，要同时击倒三个暗影使者才能将他们彻底消灭，米德娜会教林克发动群体攻击技能。按住 B 键会产生一个攻击范围，放开，范围内的敌人会全部被杀死，但一次杀三只，难度比较大，建议杀剩下两只的时候，再使用范围攻击。&lt;/p&gt;
&lt;p&gt;解决后第二位光之精灵出现，它交给林克光之容器（Vessel of
Light），让林克去收集光之泪（Tears of Light）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h4&gt;收集光之泪&lt;/h4&gt;
&lt;p&gt;林克根据地图上的白色标记，利用感知发现并消灭掉那些虫子后便可收集到光之泪，因为找到它们难度并不大，所以这里不具体说明。提示：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;开感应模式才能看见影子虫；&lt;/li&gt;
&lt;li&gt;影子虫是有些在屋子里的，找不到的话进附近的屋子找；&lt;/li&gt;
&lt;li&gt;有些要和附近的鬼魂对话才会出现；&lt;/li&gt;
&lt;li&gt;有突然出现潜入地底的情况，挖地或者等待会出现；&lt;/li&gt;
&lt;li&gt;森林的中心位置会有毒雾（瘴气），林克没有办法前进，只有借助米德娜的传送才能通过，如果是晚上的话中途会看见幽灵的灯，进感应模式，将它杀死可以获得 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#ghostsoul"&gt;鬼魂之魂&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;杀完虫子别忙着走，要记得拿光之泪。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;收集完所有的光之泪后法隆地区（Faron
Province）的黑暗褪去，森林被净化了，光之精灵法隆（Faron）恢复了原形，没有了黑暗力量的压迫，林克也变回了人形，身上换成了系列经典的绿色套装，法隆告诉林克，他是被光之神选中的英雄，林克再次肩负起拯救世界的重任。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/09/tp_ch01_10.jpg"&gt;&lt;img alt="tp_ch01_10" src="https://blog.gocalf.com/images/2011/09/tp_ch01_10.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;光之精灵&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id16"&gt;
&lt;h4&gt;前往森之神殿&lt;/h4&gt;
&lt;p&gt;之后林克来到柯洛处，柯洛会给林克一把钥匙，用来打开岔路处的锁，穿过山洞来到瘴气覆盖的地方。没有了米德娜的帮忙，林克只好拿出灯来趋散瘴气，不过猴子却出现并抢走了林克的灯，林克气愤得以为猴子在这种时候还来捣乱，不过猴子其实是来帮助林克引路的，看来误会它了。跟着小猴子穿过瘴气，林克一路向前，突然看见有一只金色的狼蹲坐在路中间，林克走过去，狼却扑了过来，一阵眩晕之后，林克发现自己在一个陌生的空间中，看到眼前站着一位不死勇士（Undead
Warrior），林克正在困惑之时，不死勇士开口了，原来他是专门守候在这里给救世主传授绝技，他会教给林克终结刺（Ending
Blow），学会后林克返回到现实当中，眼前就是森之神殿（Forest
Temple）的入口。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/09/tp_ch01_11.jpg"&gt;&lt;img alt="tp_ch01_11" src="https://blog.gocalf.com/images/2011/09/tp_ch01_11.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;用灯来趋散瘴气&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id17"&gt;
&lt;h3&gt;森之神殿迷宫&lt;/h3&gt;
&lt;div class="figure"&gt;
&lt;img alt="tp_ch01_12" src="https://blog.gocalf.com/images/2011/09/tp_ch01_12.jpg" /&gt;
&lt;p class="caption"&gt;森之神殿迷宫地图&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 1：&lt;/strong&gt;林克刚进入森之神殿。左边的蔓腾上去有宝箱。走了不远，又看到不走运的猴子被关在笼子里，再次将其救出。之后射死蜘蛛爬上藤条进入房间 2。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 2：&lt;/strong&gt;这里林克会遇到蜘蛛炸弹，用它可以帮助炸开一些腐坏的门以及挡路的石头。当炸弹蜘蛛试图接近你，你用你的盾的阻止他们攻击你的话，他们会后退然后最终爆炸。在它们作出这些行动之前，你可以抓住他们。抓住一只扔向房间北面的大的岩石墙上，靠近他们洞穴的地方，你将会得到装着 20 卢比的箱子。到中间的高台上，你将会面对一个大的蜘蛛，这些家伙将会防御你的攻击，但如果你只是简单的按着按钮 Z，然后等他们暴跳，然后相互殴打。你将不费吹灰之力消灭他们。点燃灯柱，前面升降梯会升起形成一条路，然后进入对面到房间 3。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 3：&lt;/strong&gt;林克正要过桥的时候桥会被打断，只得原路返回到房间 2。回到中间高台处，向西面走，刚才救的猴子会会荡秋千，帮你前往西面的高台。按前跳跃捉住猴子后，出现 A 指令按 A 放手就可以到对面进入到房间 4。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/09/tp_ch01_13.jpg"&gt;&lt;img alt="tp_ch01_13" src="https://blog.gocalf.com/images/2011/09/tp_ch01_13.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;林克正要过桥的时候，桥被打断了&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 4：&lt;/strong&gt;先去右边利用蜘蛛炸弹将石头炸掉后，可以得到欧库（Ooccoo），是一个流落人间的天空人，她能帮助林克逃离迷宫并且再回到离开处（在迷宫中使用母亲，会被传送出迷宫，在迷宫外使用儿子会回到使用母亲的地方，十分之方便），之后向北进入房间 3 的左边吊桥，通过后到对面的房间 5 取得一把小钥匙（Small
Key），之后再回到房间 4。打开西面的门进入房间 6。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 6：&lt;/strong&gt;下面的柱子上有一只被关住的猴子，（用前加 A）撞柱子的话可以将笼子撞下来打碎，救出猴子后，带着两只猴子回到中间的房间 2。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 2：&lt;/strong&gt;在两只猴子的帮助下可以向西面到房间 7。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 7：&lt;/strong&gt;这个房间有 2 个霸王花，普通攻击无法将其消灭，可以从 2 楼拿蜘蛛炸弹扔下来消灭掉它们，南面的那个后面的箱子里有 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h02"&gt;心之碎片 02&lt;/a&gt;。之后再用 2 楼的蜘蛛炸弹炸开东面挡路石头（拿着跳过去扔），之后可以进入房间 8。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 8：&lt;/strong&gt;进入后可以在台子上看到下面两个柱子，其中左边的柱子上有个箱子，像之前救第 2 只猴子那样将其撞下可以得到小钥匙。从水里游过去上岸后点燃左右的两个灯柱后会有梯子升起，这样就可以爬上去救出第 3 只猴子了。回到房间 7，然后向南边走进入房间 9。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/09/tp_ch01_14.jpg"&gt;&lt;img alt="tp_ch01_14" src="https://blog.gocalf.com/images/2011/09/tp_ch01_14.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;点燃左右的两个灯柱后会有梯子升起&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 9：&lt;/strong&gt;这里会遇到一个食人花和霸王花的合成体，要先砍掉它的脑袋，然后将蜘蛛炸弹扔入肚子消灭后可以取回被他吞下的钥匙，之后可以救回第 4 只猴子。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 3：&lt;/strong&gt;带着 4 只猴子到房间 3 通过之前断开的吊桥来到房间 10 见到了小 BOSS——被影子虫依附的猴子王。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/09/tp_ch01_15.jpg"&gt;&lt;img alt="tp_ch01_15" src="https://blog.gocalf.com/images/2011/09/tp_ch01_15.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;在 4 只猴子的帮助下通过之前断开的吊桥&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 10：&lt;/strong&gt;此战比较简单，看到 BOSS 扔出回旋镖后迅速撞击他所站的柱子，BOSS 会因为站不稳而没接到回旋镖并被回旋镖打下，此时攻击它的屁股，反复几次后战胜并取得道具回旋镖（Gale
Boomerang），之后朝进来的门上面的机关使用回旋镖可以回到房间 3。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/09/tp_ch01_16.jpg"&gt;&lt;img alt="tp_ch01_16" src="https://blog.gocalf.com/images/2011/09/tp_ch01_16.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;当小 BOSS 没接到回旋镖并被回旋镖打下后，赶紧过去攻击它的屁股&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 3：&lt;/strong&gt;现在可以控制这里桥的转向（利用回旋镖吹动桥上的风叶），先去右边救被困的猴子（用回旋镖将绳子打断即可）。此后可以回到之前救第三只猴子的地方将灯熄灭，降下最里面的梯子后得到 &lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#h03"&gt;心之碎片 03&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 2：&lt;/strong&gt;回到房间 2，用回旋镖将天花板上挂着的东西悉数击落，其中的宝箱里有道具指南针，利用他可以观察迷宫中宝箱、Boss 和猴子的位置。从吊桥房间左边的吊桥过去到房间 4。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 4：&lt;/strong&gt;按照地上标记指示的顺序将风车图腾激活可以取得大钥匙（Big
Key）。然后对直走进入房间 5，再朝东进入房间 13。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 13：&lt;/strong&gt;救下上层的猴子后回到房间 5，走北面的门进入房间 11。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 11：&lt;/strong&gt;之前被救的猴子都在这里，首先利用回旋镖为动力转动东面的吊桥以到达最东面的门进入房间 12。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间 12：&lt;/strong&gt;在房间的最南面的箱子里有一把小钥匙，而最东面的路被挡住了，利用回旋镖从北面水中的石头上取来蜘蛛炸弹，记得先锁定蜘蛛炸弹再将第 2 目标锁到石头上可以炸开，上去后能救到猴子。拿着刚取得的小钥匙回到房间 5 并走西面打开门进入房间 14。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/09/tp_ch01_17.jpg"&gt;&lt;img alt="tp_ch01_17" src="https://blog.gocalf.com/images/2011/09/tp_ch01_17.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;房间 12 中要救的小猴子&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;房间 14：&lt;/strong&gt;注意地板下面的怪，可以用回旋镖将其卷出来，救到最后一只猴子后去房间 11，他们会帮林克通过中间的大断崖到对面进入 Boss 房间 15。Boss 房间前精灵标志的地方，打烂罐子会出现精灵，记得用瓶子装，带在身上，可以自动复活一次。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BOSS 站：&lt;/strong&gt;食人花——达巴巴（Twilit Parasite——Diababa）&lt;/p&gt;
&lt;p&gt;进入房间，首先出现的是两个超级巨型食人花，利用其下两个台子上的蜘蛛炸弹再配合回旋镖可以将炸弹送到食人花的嘴巴里，很快就能将之干掉，但是战斗并没有结束，随后食人花的头部出现，这时之前的台子会被达巴巴的躯体挡住，但是不一会儿，之前的战胜的那只大猴子会出现并为林克提供炸弹蜘蛛，有了这个随后就可以轻松获胜了。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/09/tp_ch01_18.jpg"&gt;&lt;img alt="tp_ch01_18" src="https://blog.gocalf.com/images/2011/09/tp_ch01_18.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;BOSS：食人花——达巴巴（Twilit Parasite——Diababa）&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/09/tp_ch01_19.jpg"&gt;&lt;img alt="tp_ch01_19" src="https://blog.gocalf.com/images/2011/09/tp_ch01_19.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;用回旋镖将蜘蛛炸弹送到食人花的嘴巴里&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wii.tgbus.com/glmj/gl/200611/20061129114849.shtml"&gt;《塞尔达传说：黄昏公主》图文全攻略&lt;/a&gt;&amp;nbsp;by WiiBbs 攻研部
Szh、三代鬼彻、天堂的翅膀&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cngba.com/thread-16520313-1-1.html"&gt;《塞尔达传说 黄昏公主》完美攻略研究&lt;/a&gt; by www.cngba.com 鸡蛋&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://tv.duowan.com/0710/57154029137.html"&gt;Wii《塞尔达传说：黎明公主》流程攻略&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="游戏"></category><category term="Twilight Princess"></category></entry><entry><title>优盘检测软件：ChipGenius，MyDiskTest</title><link href="https://blog.gocalf.com/check-udisk" rel="alternate"></link><published>2011-09-08T22:13:00+08:00</published><updated>2011-09-08T22:13:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-09-08:/check-udisk</id><summary type="html">&lt;p class="first last"&gt;以前买到过一个假冒的 8GB 优盘，是用劣质的 4GB 芯片改装的，后来用软件检测出来了，今天来分享一下。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;几年前的事情了。有一次去北邮玩，看到校园里有卖 优盘的摊位，问了问价格，8GB 的金士顿优盘 99 块钱。正好头一天有个同事跟我说最近优盘降价了，8GB 才 99，于是心里一痒痒就买了一个。回来用着就感觉不对劲，读写速度超慢不说，放的东西多了之后就有好多读不出来。赶紧找了软件来检测，果然是假货，是用 4GB 的假冒机芯改装的。今天分享一下检测用的软件和方法。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;先介绍一下在没有软件的时候怎么判断是否是真的金士顿优盘。直观上可以仔细观察优盘上的标签、防伪标识、防伪电话等等，制作粗糙的一般都是假冒的。除此之外可以注意两点：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;当真的金士顿优盘接到电脑上后，电脑中显示的卷标应该是 “Kingston”（刚买来的应该是这样），而假冒的一般会是“可移动磁盘” 之类的；&lt;/li&gt;
&lt;li&gt;真的金士顿优盘在读写的时候，背部的小灯会闪烁，但假冒的一般不会亮。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面介绍第一个小软件：ChipGenius。它可以识别出优盘（或其他 USB 设备）的主控芯片型号、制造商、品牌等信息。这个软件绿色小巧，便于携带，是外出选购优盘是必不可少的工具之一。下面两张图是真假金士顿优盘用此软件识别后的对比，真的优盘是公司发的，假的是我在北邮买的。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="real_kingston" src="https://blog.gocalf.com/images/2011/09/real_kingston.png" /&gt;
&lt;p class="caption"&gt;正牌 8G 金士顿优盘在 ChipGenius 中的检测结果&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="fake_kingston" src="https://blog.gocalf.com/images/2011/09/fake_kingston.png" /&gt;
&lt;p class="caption"&gt;冒牌扩容 8G 金士顿优盘在 ChipGenius 中的检测结果&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;可见，关键的区别就在产品制造商（Product Vendor）和产品型号（Product
Model）上，正牌的应该是 Kingston DataTraveler 2.0，而假冒的通常都是 USB
2.0 Flash Disk 之类的东西。&lt;/p&gt;
&lt;p&gt;有一点比较奇怪的是，我在英文 Vista 上运行该软件，显示版本是 2.64，在中文 XP 上运行，则显示 2.70，呵呵，无视之。&lt;/p&gt;
&lt;p&gt;如果只是芯片是冒牌货我也忍了，最可气的是芯片的实际容量只有 4GB。接下来介绍的这个软件就可以检测出来，叫做 MyDiskTest。这个软件功能很强，我最喜欢的就是扩容检测和坏块扫描了，速度很快，比我自己写的程序一点一点扫描快多了。另外它还可以进行速度测试和坏块屏蔽。不说废话，直接上对比图，还是我的一真一假两只优盘。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="real_8g_chip" src="https://blog.gocalf.com/images/2011/09/real_8g_chip.png" /&gt;
&lt;p class="caption"&gt;正牌 8G 金士顿优盘在 MyDiskTest 中的检测结果&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="fake_8g_chip" src="https://blog.gocalf.com/images/2011/09/fake_8g_chip.png" /&gt;
&lt;p class="caption"&gt;冒牌扩容 8G 金士顿优盘在 MyDiskTest 中的检测结果&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;可见，我这个假冒的优盘是用杂牌的 4G 机芯改装出来的。由于是在校园里路边买的，虽然要了收据（号称是海龙的来这里搞活动），但收据上的摊位也是假的。目前只好暂时用 MyDiskTest 把坏块屏蔽掉使用了（否则写入的文件超过 4G 后的内容将无法写入但又不会报错，直到读出来的时候才会发现内容全部是 0×00）。&lt;/p&gt;
&lt;p&gt;好在两个软件都非常小，这里就直接提供下载吧（压缩包内有详细使用说明，就不多说了）：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/09/ChipGenius_264.zip"&gt;ChipGenius v2.64&lt;/a&gt; （113K） MD5：2628f1748e558bd71ab661ae1ab27aa5&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/09/MyDiskTest_250.zip"&gt;MyDiskTest v2.50&lt;/a&gt; （610K） MD5：7d4bfeb1e01f748fe3bd2b6a590bd83b&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;真想哪天背着本本出来去街边买个优盘，现场检测，揭穿这些奸商的把戏。&lt;/p&gt;
</content><category term="硬件"></category><category term="FlashDisk"></category><category term="Disk Check"></category></entry><entry><title>单次遍历，等概率随机选取问题</title><link href="https://blog.gocalf.com/random-selection" rel="alternate"></link><published>2011-09-06T00:24:00+08:00</published><updated>2011-09-23T20:49:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-09-06:/random-selection</id><summary type="html">&lt;p class="first last"&gt;问题描述：假设我们有一堆数据（可能在一个链表里，也可能在文件里），数量未知。要求只遍历一次这些数据，随机选取其中的一个元素，任何一个元素被选到的概率相等。O(n) 时间，O(1) 辅助空间（n 是数据总数，但事先不知道）。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;又是一道概率问题，不过跟之前的题目一样，这也是一道非常简单的题目。&lt;/p&gt;
&lt;p&gt;问题描述：假设我们有一堆数据（可能在一个链表里，也可能在文件里），数量未知。要求只遍历一次这些数据，随机选取其中的一个元素，任何一个元素被选到的概率相等。O(n) 时间，O(1) 辅助空间（n 是数据总数，但事先不知道）。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;如果元素总数为 n，那么每个元素被选到的概率应该是 1/n。然而 n 只有在遍历结束的时候才能知道，在遍历的过程中，n 的值还不知道，可以利用乘法规则来逐渐凑出这个概率值。在 &lt;a class="reference external" href="https://blog.gocalf.com/build-rand3-from-rand5"&gt;《利用等概率 Rand5 产生等概率 Rand3》&lt;/a&gt; 中提到过，如果要通过有限步概率的加法和乘法运算，最终得到分子为 1、分母为 n 的概率，那必须在某一次运算中引入一个 n 在分母上，而分母和分子上其他的因数则通过加法、乘法、约分等规则去除。&lt;/p&gt;
&lt;p&gt;很容易能够想到这样一个简单的式子来凑出 1/n：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
p_i=\frac{1}{i}\times\frac{i}{i+1}\times\frac{i+1}{i+2}\times\cdots\times\frac{n-1}{n}=\frac{1}{n}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;下面用一段 Python 程序来实现这个过程，这里设计了一个类，叫做 &lt;tt class="docutils literal"&gt;RandomSelector&lt;/tt&gt;，提供方法 &lt;tt class="docutils literal"&gt;AddItem&lt;/tt&gt;，在遍历数据的时候把每个元素通过这个函数传进来，最后通过 &lt;tt class="docutils literal"&gt;SelectedItem&lt;/tt&gt; 获取随机选择的元素。这么做主要是为了强调事先不知道元素的总数。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RandomSelector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_selectedItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rand&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;SelectedItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_selectedItem&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_count&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;AddItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_selectedItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;在 Python 2.5 中，&lt;tt class="docutils literal"&gt;yield&lt;/tt&gt; 不仅是个语句，更是一个表达式（详见 &lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0342/"&gt;PEP 342 -- Coroutines via Enhanced Generators&lt;/a&gt;，查阅 Generator 和 Coroutine，中文叫做“生成器”和“协程”），利用 &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt; 可以把程序写的更简洁一些：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;RandomSelect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;selection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
  &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Outputs the current selection and gets next item&lt;/span&gt;
    &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;selection&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;selection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;下面这段程序示意了如何调用 &lt;tt class="docutils literal"&gt;RandomSelect&lt;/tt&gt; 函数来测验其随机效果：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Sample code to use RandomSelect function&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;repeat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;
&lt;span class="n"&gt;occurrences&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;selector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RandomSelect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;selection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;selection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;occurrences&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;occurrences&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;十个元素，重复十万次，理论上每个元素会被选中恰好一万次。某次实验结果如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[10020, 10084, 10003, 10008, 9985, 10145, 9987, 9925, 9955, 9888]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可见每个元素被选中的次数相差不大，是等概率的。&lt;/p&gt;
&lt;p&gt;如果用 C#，就可以利用 &lt;tt class="docutils literal"&gt;IEnumerable&lt;/tt&gt; 来实现，比如：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;RandomSelect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;IEnumerable&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Random&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;TSource&lt;/span&gt; &lt;span class="n"&gt;selectedItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ArgumentNullException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;random&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;selectedItem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TSource&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TSource&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;(++&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;selectedItem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;核心代码也就那么两三行而已，时间复杂度为 O(n)（并且只遍历一次），空间复杂度为 O(1)。其中 Python 的 &lt;tt class="docutils literal"&gt;random.randint(x, y)&lt;/tt&gt; 返回 [x,
y] 之间的随机整数；C# 的 &lt;tt class="docutils literal"&gt;Random.Next(x)&lt;/tt&gt; 返回 [0,
x) 之间的随机整数。&lt;/p&gt;
&lt;p&gt;看一下概率，如果最终被选取的是第 i 个元素（1 &amp;lt;= i &amp;lt;=
n），那就必须是遍历到它的时候，恰好被选中（&lt;tt class="docutils literal"&gt;random.randint(0, i - 1) == 0&lt;/tt&gt; 或者 &lt;tt class="docutils literal"&gt;Random.Next(i) == 0&lt;/tt&gt;），并且从此之后都恰好再也没有被其他元素替换掉。这些事件彼此独立，计算概率的方法正好是上面提到的式子，最终的概率就是 1/n。&lt;/p&gt;
&lt;p&gt;OK，问题解决了。结束之前再做个简单的扩展，改成等概率随机选取 m 个元素（可知每个元素被选中的概率都是 m/n）。&lt;/p&gt;
&lt;p&gt;解决办法也非常简单，只要在上面的代码中，把 &lt;tt class="docutils literal"&gt;selectedItem&lt;/tt&gt;（&lt;tt class="docutils literal"&gt;selection&lt;/tt&gt;）改成一个长度为 m 的数组，稍作调整就可以了。&lt;/p&gt;
&lt;p&gt;这里就给出 Python 的程序片段：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;RandomSample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;selection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Outputs the current selection and gets next item&lt;/span&gt;
    &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;selection&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;selection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;时间复杂度 O(n)，空间复杂度 O(m)（不可能是 O(1) 的）。概率的计算方法为：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
p_i=\left\{\begin{array}{ll} \frac{m}{i}\times\frac{i}{i+1}\times\frac{i+1}{i+2}\times\cdots\times\frac{n-1}{n}=\frac{m}{n} &amp;amp; i &amp;gt; m \\
1\times\frac{m}{m+1}\times\frac{m+1}{m+2}\times\cdots\times\frac{n-1}{n}=\frac{m}{n} &amp;amp; i \leq m \end{array} \right.
\end{equation*}
&lt;/div&gt;
&lt;p&gt;等概率问题通常都是比较简单的。下一次将会对这个问题做进一步的扩展，变成每个元素都有一个权重，要求任何一个元素被选取的概率正比于其权重。&lt;/p&gt;
</content><category term="算法"></category><category term="Interview Question"></category><category term="Probability"></category><category term="Random Sample"></category></entry><entry><title>等概率随机排列数组（洗牌算法）</title><link href="https://blog.gocalf.com/shuffle-algo" rel="alternate"></link><published>2011-09-01T21:58:00+08:00</published><updated>2011-09-01T22:01:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-09-01:/shuffle-algo</id><summary type="html">&lt;p class="first last"&gt;问题描述：假设有一个数组，包含 n 个元素。现在要重新排列这些数据，要求每个元素被放到任何一个位置的概率都相等（即 1/n），并且直接在数组上重排（in place），不要生成新的数组。用 O(n) 时间、O(1) 辅助空间。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;又是一道跟概率相关的简单问题。话说我的概率学的太差了，趁这个机会也从头开始补习一下。&lt;/p&gt;
&lt;p&gt;问题描述：假设有一个数组，包含 n 个元素。现在要重新排列这些元素，要求每个元素被放到任何一个位置的概率都相等（即 1/n），并且直接在数组上重排（in
place），不要生成新的数组。用 O(n) 时间、O(1) 辅助空间。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;算法是非常简单了，当然在给出算法的同时，我们也要证明概率满足题目要求。&lt;/p&gt;
&lt;p&gt;先想想如果可以开辟另外一块长度为 n 的辅助空间时该怎么处理，显然只要对 n 个元素做 n 次（不放回的）随机抽取就可以了。先从 n 个元素中任选一个，放入新空间的第一个位置，然后再从剩下的 n-1 个元素中任选一个，放入第二个位置，依此类推。&lt;/p&gt;
&lt;p&gt;按照同样的方法，但这次不开辟新的存储空间。第一次被选中的元素就要放入这个数组的第一个位置，但这个位置原来已经有别的（也可能就是这个）元素了，这时候只要把原来的元素跟被选中的元素互换一下就可以了。很容易就避免了辅助空间。&lt;/p&gt;
&lt;p&gt;用 Python 来写一段简单的程序描述这个算法：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# 逆序遍历 li&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;              &lt;span class="c1"&gt;# 从剩余数据中随机选取一个&lt;/span&gt;
    &lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;         &lt;span class="c1"&gt;# 将随机选取的元素与当前位置元素互换&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;主要的代码仅仅三行而已，浅显易懂。&lt;/p&gt;
&lt;p&gt;来计算一下概率。如果某个元素被放入第 i（&lt;span class="math"&gt;\(1\leq i\leq n\)&lt;/span&gt;）个位置，就必须是在前 i - 1 次选取中都没有选到它，并且第 i 次选取是恰好选中它。其概率为：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
p_i=\frac{n-1}{n}\times\frac{n-2}{n-1}\times\cdots\times\frac{n-i+1}{n-i+2}\times\frac{1}{n-i+1}=\frac{1}{n}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;可见任何元素出现在任何位置的概率都是相等的。&lt;/p&gt;
&lt;p&gt;实际上 Python 用户一定知道，在 Random 类中就有现成的 shuffle 方法，处理方法与我上面的程序是一样的。顺便也贴在这里学习一下。以下代码来自于
Python 2.5 &lt;tt class="docutils literal"&gt;Lib\random.py&lt;/tt&gt;：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;250
251
252
253
254
255
256
257
258
259
260
261
262&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;x, random=random.random -&amp;gt; shuffle list x in place; return None.&lt;/span&gt;

&lt;span class="sd"&gt;  Optional arg random is a 0-argument function returning a random&lt;/span&gt;
&lt;span class="sd"&gt;  float in [0.0, 1.0); by default, the standard random.random.&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))):&lt;/span&gt;
    &lt;span class="c1"&gt;# pick an element in x[:i+1] with which to exchange x[i]&lt;/span&gt;
    &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><category term="算法"></category><category term="Interview Question"></category><category term="Probability"></category></entry><entry><title>黎明公主攻略：角色介绍</title><link href="https://blog.gocalf.com/zelda-tp-characters" rel="alternate"></link><published>2011-08-30T21:32:00+08:00</published><updated>2011-09-13T21:52:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-08-30:/zelda-tp-characters</id><summary type="html">&lt;p class="first last"&gt;今天来介绍一下《塞尔达传说：黎明公主》中的几位角色，有好的也有敌人。&lt;/p&gt;
</summary><content type="html">
&lt;p&gt;《&lt;a class="reference external" href="http://www.zelda.com/tp/"&gt;塞尔达传说：黎明公主&lt;/a&gt;》（&lt;a class="reference external" href="http://www.zelda.com/tp/"&gt;The Legend of Zelda: Twilight
Princess&lt;/a&gt;）是我玩的唯一的一个塞尔达传说系列的游戏，之前都没太关注过这个系列。开始的时候一直以为塞尔达（公主）是主角呢，后来发现是林克跟黎明公主。不知道这里面的塞尔达有什么特别的作用，感觉就是弱弱的呢。&lt;/p&gt;
&lt;p&gt;今天来介绍一下《&lt;a class="reference external" href="http://www.zelda.com/tp/"&gt;塞尔达传说：黎明公主&lt;/a&gt;》中的几位角色，有好的也有敌人。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class="section" id="id2"&gt;
&lt;span id="link"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;主角：林克（Link）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;海拉尔大陆南端奥东村的年轻牧羊人，与村里的朋友们过着隐居的生活，并暗恋着村长的女儿伊莉娅，森林和自然赐予了他非凡的勇气和强健的体魄。作为女神所选择的勇士，林克肩负着拯救海拉尔世界的使命，平静的生活将在他进入法隆森林之时结束。&lt;/p&gt;
&lt;p&gt;不过他为什么喜欢带“绿”帽子呢……话说我开始还以为塞尔达会是他的伴侣呢……&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="zelda_tp_Link" src="https://blog.gocalf.com/images/2011/08/zelda_tp_Link.jpg"/&gt;
&lt;p class="caption"&gt;《塞尔达传说：黎明公主》主角：林克（Link）&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;span id="zelda"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;塞尔达（Zelda）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;善良温和的光之世界领主，拥有世代相传的光明力量。赞特统领的暗之军队入侵后，为了自己的子民能够保留性命，她不得不牺牲自身的自由，臣服于暗之世界，并被赞特软禁在海拉尔城堡顶层。唯一能做的，便是默默地祈祷着拯救世界的英雄出现。&lt;/p&gt;
&lt;p&gt;“善良温和”，弱弱的样子，呵呵。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="zelda_tp_Zelda" src="https://blog.gocalf.com/images/2011/08/zelda_tp_Zelda.jpg"/&gt;
&lt;p class="caption"&gt;善良温和的光之世界领主：塞尔达（Zelda）&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;span id="midna"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;米德娜（Midna）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;谜一般怪异的人物，似乎拥有非常强大的魔力。为了寻找自己丢失在暗影世界中的神秘之物，米德娜需要借助林克强大的能力，在光与暗的世界中与他结伴而行，在与林克和塞尔达公主的相处中，她渐渐的表露出了自己善良的本性，和自己真实的身份……&lt;/p&gt;
&lt;p&gt;话说游戏里她的声音挺有趣的呢，如果她一直没有变回去该多好啊。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="zelda_tp_Midna" src="https://blog.gocalf.com/images/2011/08/zelda_tp_Midna.jpg"/&gt;
&lt;p class="caption"&gt;米德娜（Midna）&lt;/p&gt;
&lt;/div&gt;
&lt;!-- ilia: --&gt;
&lt;/div&gt;
&lt;div class="section" id="ilia"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;伊莉娅（Ilia）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;与林克青梅竹马的乡村少女，拥有如森林中泉水般清澈的心灵。深爱自然与和平的她被兽人掠走后不幸地丢失了记忆，却在海拉尔大陆深处的隐蔽村落发现了通往天空之城的线索。为了她和她失去的记忆，林克走出了村庄，探寻起世界。&lt;/p&gt;
&lt;p&gt;没什么戏份啊，是不是让我们这位主角的女友太受冷落了啊。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="zelda_tp_Ilia" src="https://blog.gocalf.com/images/2011/08/zelda_tp_Ilia.jpg"/&gt;
&lt;p class="caption"&gt;伊莉娅（Ilia）&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ooccoo-ooccoo-jr"&gt;
&lt;span id="ooccoo"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;欧库 &amp;amp; 小欧库（Ooccoo &amp;amp; Ooccoo Jr.）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;天空之城的居民，因为某种原因来到了海拉尔大陆。为了寻找回到天空城的道路，她和自己的孩子不断穿梭在大陆的迷宫中寻找线索，并用魔法帮助林克脱离险境。最后在林克、米德娜和暗影帝国反击队的共同协助下回到了自己的故乡。&lt;/p&gt;
&lt;p&gt;真的是非常非常有用的哦！&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="zelda_tp_Ooccoo" src="https://blog.gocalf.com/images/2011/08/zelda_tp_Ooccoo.jpg"/&gt;
&lt;p class="caption"&gt;欧库 &amp;amp; 小欧库（Ooccoo &amp;amp; Ooccoo Jr.）&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="gor-coron"&gt;
&lt;span id="gorcoron"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;戈隆长老：戈·克隆（Gor Coron）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;戈隆族四大长老之一，拥有非同寻常的力量和智慧，领导着自己的子民看守着死亡之山上的矿藏圣地。虽然因为暗影力量的侵袭而与卡卡里科村的居民产生们了矛盾，但在林克解救了矿山内被操纵的伙伴后，重新与光之世界的居民建立起良好的关系。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="zelda_tp_GorCoron" src="https://blog.gocalf.com/images/2011/08/zelda_tp_GorCoron.jpg"/&gt;
&lt;p class="caption"&gt;戈隆长老：戈·克隆（Gor Coron）&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="king-orcs-bulblin"&gt;
&lt;span id="kingorcsbulblin"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;兽王：布尔布林（King Orcs Bulblin）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;居住在大陆东方兽族部落的酋长，带领着自己强悍的军队统治着自己的领地。暗影军队入侵后，崇尚力量的他屈服在黎明之国的魔力下，成为魔王赞特的手下。绑架了奥东村的孩子们，并与林克数次作战。在最后的战斗中终于承认了林克的实力，并退出了光与暗的争斗。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="zelda_tp_KingOrcsBulblin" src="https://blog.gocalf.com/images/2011/08/zelda_tp_KingOrcsBulblin.jpg"/&gt;
&lt;p class="caption"&gt;兽王：布尔布林（King Orcs Bulblin）&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="shadow-being"&gt;
&lt;span id="shadowbeing"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;暗影使者（Shadow Being）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;来自黎明之国的黑暗使者，拥有打开黎明之国和光之国之间时空隧道的能力，在赞特的带领下前往光之国与塞尔达公主的部队战斗。由于拥有特殊的能力，林克击败他们后，在米德娜的帮助下可以方便的穿梭在海拉尔大陆的各个角落。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="zelda_tp_ShadowBeing" src="https://blog.gocalf.com/images/2011/08/zelda_tp_ShadowBeing.jpg"/&gt;
&lt;p class="caption"&gt;暗影使者（Shadow Being）&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;span id="zant"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;赞特（Zant）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本是黎明之国中普通的魔法师，渴望拥有强大力量和权利的野心侵蚀了自己的心，在偶然的机会中获得了魔王加农道夫的力量，并在他的操纵下篡夺了黎明公主的王位。觊觎光之世界的他破坏了光与暗的平衡，率领着强大的暗之军团横行世界。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="zelda_tp_Zant" src="https://blog.gocalf.com/images/2011/08/zelda_tp_Zant.jpg"/&gt;
&lt;p class="caption"&gt;赞特（Zant）&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;span id="ganondorf"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;加农道夫（Ganondorf）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;曾经是女神选择的勇士，拥有终极的三角力量。由于残暴的本性而被女神诅咒，成为了横行于古代历史的恶贼。受伤后的他被光明力量和仲裁者们封印在了黎明之国。不曾想他利用赞特恢复了自己的元气，并重新渴望统治整个世界。&lt;/p&gt;
&lt;p&gt;不知道林克将来会不会也变成这样呢？应该不会吧！&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="zelda_tp_Ganondorf" src="https://blog.gocalf.com/images/2011/08/zelda_tp_Ganondorf.jpg"/&gt;
&lt;p class="caption"&gt;加农道夫（Ganondorf）&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="twilight-princess"&gt;
&lt;span id="twilightprincess"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;黎明公主（Twilight Princess）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;黎明世界的统治者，迷一般的角色，她的真实身份是……&lt;/p&gt;
&lt;p&gt;或者应该说“她是……的真实身份”吧。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="zelda_tp_TwilightPrincess" src="https://blog.gocalf.com/images/2011/08/zelda_tp_TwilightPrincess-700x466.jpg"/&gt;
&lt;p class="caption"&gt;黎明公主（Twilight Princess）&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;虽然已经好久没玩了，但依稀还能记得那些人物们的对话、语气，好怀念啊。&lt;/p&gt;
&lt;hr class="docutils"/&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wii.tgbus.com/glmj/gl/200611/20061129114849.shtml"&gt;《塞尔达传说：黄昏公主》图文全攻略&lt;/a&gt; by WiiBBS 攻研部
Szh、三代鬼彻、天堂的翅膀&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="游戏"></category><category term="Twilight Princess"></category></entry><entry><title>Dell E6400 升级到 MacOS 10.6.8</title><link href="https://blog.gocalf.com/dell-e6400-mac-10-6-8" rel="alternate"></link><published>2011-08-26T23:48:00+08:00</published><updated>2012-03-02T21:45:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-08-26:/dell-e6400-mac-10-6-8</id><summary type="html">&lt;p class="first last"&gt;半年前安装黑苹果的经历，装的是 10.6.3。最近由于有些软件需要较高版本的系统，不得不对系统进行升级，升级到雪豹的最后一个版本 10.6.8。升级后自然又遇到了一堆问题并逐一解决。解决得算是基本完美了，只差我那全球无解的 Intel WiFi Link 5300 AGN 无线网卡和不能休眠的问题。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;在 &lt;a class="reference external" href="https://blog.gocalf.com/dell-e6400-install-mac"&gt;Dell E6400 安装 MacOS 雪豹 10.6&lt;/a&gt; 中介绍了半年前安装黑苹果的经历，当时安装的版本其实是 10.6.3。最近由于有些软件需要较高版本的系统，不得不对系统进行升级，升级到雪豹的最后一个版本 10.6.8。升级后自然又遇到了一堆问题并逐一解决。解决得算是基本完美了，只差我那全球无解的 Intel
WiFi Link 5300 AGN 无线网卡和不能休眠的问题。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;还是上次那台机器，硬件配置完全没有变，就不再重复了。黑苹果之所以难装，除了核心的破解之外就全是驱动的问题了，来看看这次都遇到了哪些问题又是如何解决的。&lt;/p&gt;
&lt;p&gt;前天（8 月 24 日）晚上，决定要升级系统（没过多久，老乔就辞职了，都怪我啊，hoho）。直接在系统里面点击 Software
Update，用了两个多小时下载了升级包。昨天早晨爬起来之后点击更新，很快就装好了，重启，不出所料地白苹果了。&lt;/p&gt;
&lt;p&gt;我们知道黑苹果常见的启动错误形式有：白苹果（灰白色背景上一个灰色的苹果图标，再无进展）、无限风火轮（在刚才那个苹果图片下面有一个风火轮在转动，但再无进展）和四国 / 五国（以四种 / 五种语言书写的当机提示）。这种情况下就只能长按电源键强制关机了。&lt;/p&gt;
&lt;p&gt;再次开机，在 BootThink 引导的时候输入 -v 进入 verbose 模式，查看系统 hang 在什么地方。发现在显示了 [PCI
configuration end] 之后就停住了，这似乎是 Snow Leopard 10.6.8 和 Lion
10.7.1 都会遇到的问题呢，原来是 IOPCIFamily.kext 和 AppleACPIPlatform.kext 被更新了，解决办法简单粗暴，直接找个老版本（10.6.7）的替换回去就好了。不过我把它们放在 BootThink 的 Darwain\System\LibrarySL\Extensions\ 里面并不能解决问题，得要放到 Mac 分区去。如果有安装盘，可以用 BootThink 引导安装盘，在 Console 里面进行复制的操作，但我上次用来安装的硬盘分区早就格式化掉了，只好用 &lt;a class="reference external" href="http://bbs.pcbeta.com/forum-viewthread-tid-860881-highlight-macdriver.html"&gt;MacDrive（v8.0.5.31）&lt;/a&gt; 来操作。把那两个 kext 复制到 Mac 所在分区的 /System/Library/Extensions 里。&lt;/p&gt;
&lt;p&gt;再次启动 Mac OS，刚才的问题没有了，这次遇到的是 Can't load kext
com.apple.driver.AudioIPCDriver, link
fail。要删掉 BootThink 里的 VoodooHDA.kext。不过这样不就不能驱动声卡了吗？先不管它了。&lt;/p&gt;
&lt;p&gt;接下来遇到的是 FakeSMC: key info not found MSDS, length
-6。看来我的 FakeSMC.kext 太古老了，找了个新版本的放进 BootThink 就好了。&lt;/p&gt;
&lt;p&gt;然后又发现在显示了 NTFS Volume xxxx, version
3.1 之后，系统又 hang 住了。不知道到底为什么，但放了一个原版声卡驱动 AppleHDA.kext 进来就好了。（简直是有病乱投医啊）&lt;/p&gt;
&lt;p&gt;再次启动，顺利进入系统，很开心。但是声卡没有驱动起来呢，是因为之前把 VoodooHDA.kext 去掉的原因吗？傻乎乎地又把它放回来，竟然没有当机，成功进入系统。这回有声卡了，但是没有声音，汗。换了个 VoodooHDA.kext，hoho，有声音了。可是音量无法改变，即使静音状态也是一样大的声音。似乎也有人遇到类似的问题呢，又更新了一下 VoodooHDA.kext，这次音量调节也正常了。&lt;/p&gt;
&lt;p&gt;在更新我所需要的软件的时候，还有插入优盘的时候，都遇到个错误提示，说是 the
system extension /System/Library/Extensions/IOPCIFamily.kext was
installed improperly and cannot be
used.（或者是 AppleACPIPlatform.kext）。这不是刚才替换的那两个老版本的文件么，啊，想起来了，刚才在 Win
7 里用 MacDrive 把两个文件复制过去之后，还应该要修改权限并删除缓存呢，这些都还没有做，能让我把系统启动起来就很不错了。赶紧打开 Console，依次输入下面这些命令（如果当前用户不是 root，还需要在命令前面加 sudo）（另外命令中的 &lt;tt class="docutils literal"&gt;Mac\ OS&lt;/tt&gt; 需要替换成你的 Mac 系统所在分区的卷标）（忘了试一试直接用 /System/Linrary 行不行了，应该是同一个目录的）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /Volumes/Mac&lt;span class="se"&gt;\ &lt;/span&gt;OS/System/Library
chmod -R &lt;span class="m"&gt;755&lt;/span&gt; Extensions
chown -R root:wheel Extensions
kextcache -v &lt;span class="m"&gt;1&lt;/span&gt; -l -s -n -t -arch i386 -arch x86_64 -m /Volumes/Mac&lt;span class="se"&gt;\ &lt;/span&gt;OS/System/Library/Caches/com.apple.kext.caches/Startup/Extensions.mkext /Volumes/Mac&lt;span class="se"&gt;\ &lt;/span&gt;OS/System/Library/Extensions
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完成之后重启系统，就不会再遇到那样的错误提示了。&lt;/p&gt;
&lt;p&gt;好像都完成了呢，兴冲冲地准备截图纪念，但是……按了 Cmd+Shift+3 之后，听到咔嚓一声，但桌面上却什么都没出来，咋回事呢？看样子显卡驱动也有问题，虽然可以调节分辨率，但无法截屏，也无法用系统自带的 Previewer 查看图片（双击打开图片只能看到白色）。唉，继续奋斗。&lt;/p&gt;
&lt;p&gt;我之前用的显卡驱动是 NVinject
0.2.1，改成最新的 0.2.2 也不好使，而且更差劲，连分辨率都无法改变了。找了好久，其实我以前用的是 NVEnabler64，但上次装 10.6.3 的时候就不能使用了（因为我用的是 32 位吧），这次也没有希望。最后还是投入 DSDT 的怀抱。不过我可不会写 DSDT，在网上找了一个（&lt;a class="reference external" href="http://bbs.pcbeta.com/viewthread-804563-1-1.html"&gt;http://bbs.pcbeta.com/viewthread-804563-1-1.html&lt;/a&gt;），号称搞定了关机、重启、休眠、断电、原生电源管理、原生显卡驱动、解决 BIOS 重置、以及将 BCM 无线网卡识别为内置。把 NVinject.kext 去掉，把 dsdt.aml 放在 BootThink 的 Darwin 目录下。重启电脑，Win
7 突然蓝屏了，不知道怎么回事。不管它。&lt;/p&gt;
&lt;p&gt;启动 Mac，又不动了，似乎是声卡出问题了，暂时把 VoodooHDA.kext 去掉吧。顺利进入系统，刚登录的时候就已经感觉到不同了，很明显地登录窗口的动态效果、系统状态栏的半透明都是以前没有的。测试一下，果然可以截图、可以双击查看图片了，分辨率调节也有，不错。而且测试了一下关机断电，也没问题呢，之前 10.6.3 的时候其实关机是不会断电的，每次我都是重启然后在按电源键关机。&lt;/p&gt;
&lt;p&gt;刚才那个 dsdt.aml 既然能够解决那么多问题，就意味着我可以去掉好多 kext 了，总共去掉了以下这些 kext：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;NullCPUPowerManagement.kext：禁用电源管理，解决 IntelCPUPowerManagement.kext 的 HPET 错误。&lt;/li&gt;
&lt;li&gt;OpenHaltRestart.kext：解决重启或关机问题。&lt;/li&gt;
&lt;li&gt;OSXRestart.kext：解决重启问题。&lt;/li&gt;
&lt;li&gt;PlatformUUID.kext：解决 UUID 错误。&lt;/li&gt;
&lt;li&gt;IOAHCIBlockStorageInjector.kext：解决本地硬盘图标为橙色的补丁。&lt;/li&gt;
&lt;li&gt;AppleRTC.kext：装 10.6.3 的时候不知道这是干什么用的，但似乎是 Real Time
Clock 的驱动，应该是修改过的，主要是解决某些主板上，睡眠唤醒后 BIOS 重置的问题。&lt;/li&gt;
&lt;li&gt;LegacyAppleAirPortBrcm4311.kext：BRCM 无线网卡的驱动，对我来说根本没用，上次放着它主要是希望奇迹能够发生，然而我那个无线网卡身上似乎不会有奇迹出现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后还是要面对声卡的问题，我又尝试着把 AppleHDA.kext 去掉，换上 VoodooHDA.kext，嘿，还真就好了。不知道最开始的时候有 VoodooHDA.kext，为什么还必须放 AppleHDA.kext。或者因为我之前那个 VoodooHDA.kext 太老了吧。&lt;/p&gt;
&lt;p&gt;除了 wifi 不能用之外还有个问题，就是这次没办法休眠了（10.6.3 的时候好像是可以的）。不过据说 10.6.8 和 Lion 的休眠都很难，得拼人品。我是放弃了，因为 SleepEnabler.kext 跟 10.6.8 也不兼容呢，等更新吧。现在如果休眠的话，屏幕变黑，然后就什么都没有了，睡不下去，也叫不起来，只能强制关机。还好我很少用休眠。&lt;/p&gt;
&lt;p&gt;呼，冒险升了次级，结果还是比较满意的，截图纪念。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Mac OS 10.6.8 on Dell E6400" src="https://blog.gocalf.com/images/2011/08/mac_10.6.8_screenshot.png" /&gt;
&lt;p class="caption"&gt;Mac OS 10.6.8 on Dell E6400&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;最后把用到的 kext 之类的都放在这里吧。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;放在 BootThink 的 Darwin 目录下：&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/08/dsdt.aml_.zip"&gt;dsdt.aml&lt;/a&gt;：可以搞定关机、重启、休眠、断电、原生电源管理、原生显卡驱动、解决 BIOS 重置、以及将 BCM 无线网卡识别为内置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;放在 BootThink 的 Darwin\System\LibrarySL\Extensions 目录下：&lt;ul&gt;
&lt;li&gt;系统补丁&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/08/FakeSMC.kext_.zip"&gt;FakeSMC.kext&lt;/a&gt;：黑苹果机必须的！一方面是对 Mac
OS 必须的 AppleSMC.kext（System Management
Controller）的模拟；另一方面仿造苹果的 Dont Steal Mac OS
X.kext（苹果系统与苹果机器 EFI 模块之间的通信加密解密）。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/08/Disabler.kext_.zip"&gt;Disabler.kext&lt;/a&gt;：屏蔽不能正常启动的补丁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Audio&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/08/IOAudioFamily.kext_.zip"&gt;IOAudioFamily.kext&lt;/a&gt;：基本的声卡驱动框架。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/08/OSvKernDSPLib.kext_.zip"&gt;OSvKernDSPLib.kext&lt;/a&gt;：内核的数字音频信号处理库。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/08/HDAEnabler.kext_.zip"&gt;HDAEnabler.kext&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/08/VoodooHDA.kext_.zip"&gt;VoodooHDA.kext&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ethernet&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/08/IONetworkingFamily.kext_.zip"&gt;IONetworkingFamily.kext&lt;/a&gt;：基本的网卡驱动，有些网卡可以直接驱动。里面包含 AppleBCM5701Ethernet.kext，AppleIntel8254XEthernet.kext，AppleRTL8139Ethernet.kext，AppleRTL8169Ethernet.kext，AppleUSBEthernet.kext，AppleUSBGigEthernet.kext，AppleYukon2.kext，Intel82574L.kext，nvenet.kext。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/08/Intel82566MM.kext_.zip"&gt;Intel82566MM.kext&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PS/2（鼠标、键盘、触摸板）&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/08/ApplePS2Controller.kext_.zip"&gt;ApplePS2Controller.kext&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/08/AppleACPIPS2Nub.kext_.zip"&gt;AppleACPIPS2Nub.kext&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;电源管理、Battery&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/08/AppleACPIPlatform.kext_.zip"&gt;AppleACPIPlatform.kext&lt;/a&gt;：（升级到 10.6.8 后要复制到 Mac 分区的 /System/Library/Extensions，修改权限并更新缓存）这是 Advanced
Configuration and Power
Interface 高级配置和电源管理接口驱动，进行电源管理，睡眠，Real-Time
Clock 控制等，其下还包含 AppleACPIButtons.kext，AppleACPIEC.kext，AppleACPIPCI.kext。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/08/IOACPIFamily.kext_.zip"&gt;IOACPIFamily.kext&lt;/a&gt;：作用于支持 ACPI 电源管理标准的驱动，例如电源按钮、电池、PS/2、USB、HPET 等。这里的这个解决了部分笔记本风扇不正常问题，只支持 32 位。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/08/VoodooBattery.kext_.zip"&gt;VoodooBattery.kext&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bluetooth&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/08/DellBluetoothHCI.kext_.zip"&gt;DellBluetoothHCI.kext&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SD Reader&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/08/VoodooSDHC.kext_.zip"&gt;VoodooSDHC.kext&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PCMCIA&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/08/IOPCIFamily.kext_.zip"&gt;IOPCIFamily.kext&lt;/a&gt;：（升级到 10.6.8 后要复制到 Mac 分区的 /System/Library/Extensions，修改权限并更新缓存）PCI 设备的基本驱动。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chip set&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/08/AHCIPortInjector.kext_.zip"&gt;AHCIPortInjector.kext&lt;/a&gt;：可以识别 Intel 芯片组的 AHCI（如果无法正确识别 AHCI，启动时有可能会 hang 在 Still
Waiting for Root Device）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;继续啃苹果咯～&lt;/p&gt;
</content><category term="操作系统"></category><category term="Hackintosh"></category></entry><entry><title>《塞尔达传说：黎明公主》攻略：剧情介绍</title><link href="https://blog.gocalf.com/zelda-tp-intro" rel="alternate"></link><published>2011-08-22T00:28:00+08:00</published><updated>2011-09-13T22:19:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-08-22:/zelda-tp-intro</id><summary type="html">&lt;p class="first last"&gt;前年的时候花了好多个晚上的时间在 Wii 上玩了《塞尔达传说：黎明公主》（The Legend of Zelda: Twilight Princess），真的是很不错的游戏呢。当时搜了很多的攻略，现在就贴在这里吧。基本上是参考了网上已有的攻略，但结合自己的实践也做了整理和修订。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;前年的时候花了好多个晚上的时间在 Wii 上玩了《&lt;a class="reference external" href="http://www.zelda.com/tp/"&gt;塞尔达传说：黎明公主&lt;/a&gt;》（&lt;a class="reference external" href="http://www.zelda.com/tp/"&gt;The
Legend of Zelda: Twilight Princess&lt;/a&gt;），真的是很不错的游戏呢。&lt;/p&gt;
&lt;p&gt;当时搜了很多的攻略，现在就贴在这里吧。基本上是参考了网上已有的攻略，但结合自己的实践也做了整理和修订。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;由于内容非常多，将会以系列文章的形式发布。今天这篇就只是个简单的开始。所有的文章如果有参考了其他人的作品，会在文章底部附加“参考”项。图片几乎全部来自参考的文章，但有些是我重新整理的，这种图片会打上 GoCalf 的水印。&lt;/p&gt;
&lt;p&gt;另外关于这个游戏的中文名字，网上说法不一，主标题《塞尔达传说》肯定是没有疑问了，但副标题
Twilight Princess
则有多种翻译，有“曙光公主”、“黎明公主”、“黄昏公主”等等，似乎“黄昏公主”是比较普遍的叫法，但因为我的游戏里显示的是“黎明公主”，我就实在难以接受其他的名称了。所以我整理的攻略中将全部使用“黎明公主”这一说法。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Zelda Twilight Princess Logo" src="https://blog.gocalf.com/images/2011/08/zelda_tp_logo_mid.png" /&gt;
&lt;p class="caption"&gt;《塞尔达传说：黎明公主》LOGO&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="Zelda Twilight Princess Cover" src="https://blog.gocalf.com/images/2011/08/zelda_tp_cover-545x700.jpg" /&gt;
&lt;p class="caption"&gt;《塞尔达传说：黎明公主》封面、海报&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;随着美版 Wii 的首发，玩家们期盼已久的《塞尔达传说：黎明公主》终于与大家见面了，这款被任天堂寄予厚望的作品一再延期，也从最初预计的
NGC 平台转移到了 Wii 上面，其重要性不言而喻。新生的塞尔达，以其卓越的世界观、精巧的迷题，用写实的风格让玩家体验最原始的感动，当你闭上眼睛，一切都会变成脑海里最精美的画面。&lt;/p&gt;
&lt;p&gt;当黑暗感染大地，传说翻开了新的一页，凄凉的嚎声响彻风中，眼前烟波浩淼，耳边泣泣悲鸣，谁能将夜空划破，寻找黎明……&lt;/p&gt;
&lt;p&gt;（注本攻略流程同样适用于 NGC 版，NGC 版中林克为左手执剑，且游戏场景与 Wii 版呈镜像相反）&lt;/p&gt;
&lt;p&gt;在古老而富饶的海拉尔大陆上，光之公主和黎明公主统治着自己的国家。有如黑夜和白昼的交替轮转，阳光下的光之国与黑暗中的黎明之国互不来往，和平地度过了数百万年……&lt;/p&gt;
&lt;p&gt;然而，平淡的生活被突如其来的黑暗所打破，黑暗的使者凭借着其强大的魔力侵占了海拉尔城堡，为了自己子民的性命，光之公主不得不屈服在暗夜的威胁下，海拉尔的世界被笼罩在令人恐惧的黑暗中……&lt;/p&gt;
&lt;p&gt;南方森林中的奥东小镇上，居住着一位名叫林克的年轻勇士，从未走出过村庄的他，与心爱之人和朋友们宁静的生活着，享受着最后的静逸。小镇当然也摆脱不了黑暗的侵袭，强悍的兽人抓走了镇里的孩子和林克的心上人，当他不顾一切追击兽人之时，却被一只魔力之手拖进了无尽的黑暗中……&lt;/p&gt;
&lt;p&gt;当林克醒来之时，发现自己身处在薄雾中的暗淡世界里，四周弥漫着死亡的气息，而更加令他惊讶的是，自己居然变成了一匹狼——在黑暗中放纵兽行的野兽。自称为米德娜的生物嘲讽着狼形的林克。为了能够恢复原貌，重新开始自己的征程，林克不得不与这个乖僻性格中隐藏着善良的生物一起冒险，帮其寻找她所丢失神秘物品……
在经历了种种磨砺之后，林克得知原来自己就是女神所选择的勇士，肩负着拯救水深火热中的海拉尔大陆的命运，为了让世界恢复和平，拥有野兽魔力的林克勇敢的冲向了海拉尔城堡……&lt;/p&gt;
&lt;p&gt;在那里等待着他的，除了可怕的怪物和荆棘的道路外，还有光之公主与黎明公主殷切的期盼……&lt;/p&gt;
&lt;p&gt;剧情流程目录：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-intro"&gt;剧情介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-characters"&gt;主要角色简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;上部：光之精灵篇&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-ch1"&gt;初章 英雄传说的扉页（被神选中的少年）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-ch2"&gt;第二章 死亡山巅的咆哮（大地的子民）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-ch3"&gt;第三章 深海鱼族的传说（最后的影之碎片）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;下部：影之公主篇&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-ch4"&gt;第四章 沙漠深处的审判（死者之沙漠）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-ch5"&gt;第五章 冰封魔镜的罪恶（雪山！兽人！爱！）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-ch6"&gt;第六章 时间遗忘的裂缝（时之神殿）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-ch7"&gt;第七章 天堂神殿的挽歌（天空之城）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-ch8"&gt;第八章 黎明之前的黑暗（伪王）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-ch9"&gt;第九章 斩破黑暗的利刃（黎明公主）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-epilogue"&gt;终章 世界秩序的平衡（光与影）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;附录&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#secret"&gt;必须要知道的几个秘密&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#heartpiece"&gt;心之碎片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#item"&gt;非剧情道具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#bottle"&gt;瓶子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#mistery"&gt;奥义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#goldenbug"&gt;金色虫&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#ghostsoul"&gt;鬼魂之魂&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#fishing"&gt;钓鱼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocalf.com/zelda-tp-appendix#trialscave"&gt;试炼的洞窟&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;附件&lt;ul&gt;
&lt;li&gt;日版金手指文件下载：&lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/08/GoldenFinger_JP.zip"&gt;GoldenFinger_JP.zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wii.tgbus.com/glmj/gl/200611/20061129114849.shtml"&gt;《塞尔达传说：黄昏公主》图文全攻略&lt;/a&gt; by WiiBbs 攻研部
Szh、三代鬼彻、天堂的翅膀&lt;/li&gt;
&lt;/ul&gt;
</content><category term="游戏"></category><category term="Twilight Princess"></category></entry><entry><title>在循环有序数组中查找指定元素</title><link href="https://blog.gocalf.com/circularly-ordinal-array" rel="alternate"></link><published>2011-08-19T00:05:00+08:00</published><updated>2012-12-04T17:02:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-08-19:/circularly-ordinal-array</id><summary type="html">&lt;p class="first last"&gt;问题描述：给定一个由 n 个各不相等的元素构成的循环有序数组（Circularly Ordinal Array），用 O(log n) 时间、O(1) 辅助空间在其中查找指定的元素。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;这次的题目跟二分搜索有关，如果还不能写出正确的二分搜索，那就先找出课本温习一下吧。&lt;/p&gt;
&lt;p&gt;问题描述：给定一个由 n 个各不相等的元素构成的循环有序数组（Circularly
Ordinal Array），用 O(log n) 时间、O(1) 辅助空间在其中查找指定的元素。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;所谓循环有序数组，就是把一个排好序（以升序排列为例）的数组从某个（未知）位置处截为两段，把前一段放到后一段的后面，所得到的数组。比如
{8, 9, 10, 0, 1, 2, 3, 4, 5, 6, 7}。如果把数组首尾相接，看成一个环形，那么数组就还是有序的，只不过最小值有可能在任何一个位置。从最小值开始向后，数值逐渐递增，到数组的最后一个元素时再回到第一个元素。&lt;/p&gt;
&lt;p&gt;显然应用于普通的有序数组查找的二分算法已经无法直接使用了。如果已经知道了分界点（数组最小值或最大值）的位置，那问题就简单的多了，只要先判断一下待查元素是在分界点的左侧还是右侧，然后直接对那一侧的半个数组使用二分查找即可。&lt;/p&gt;
&lt;p&gt;那么怎么找分界点呢？它的特点是它左边的所有元素都比它右边的元素大。借鉴二分查找的思想，首先取数组中间位置的元素，拿它跟两端的元素比较，分析出分界点是在左半边还是右半边，然后对包含分界点的那半个数组递归处理。&lt;/p&gt;
&lt;p&gt;数组的第一个元素应该是在分界点左边最小的元素，但又不小于分界点右边的任何元素。那么如果中间位置的元素比它大，分界点就只能在中间元素的右边；反之，如果中间元素比它小，分界点就一定在左半边。由于题目中规定数组元素是个不相等的，这样的判断就足够了。&lt;/p&gt;
&lt;p&gt;如果允许重复的元素，那就有可能遇到第一个元素与中间元素相等情况，这时需要再拿最后一个元素来比较，如果中间元素比最后一个元素大，分界点就在右半边 &lt;span class="raw-html"&gt;&lt;s&gt;；反之，如果中间元素比最后一个元素小，分界点就在左半边 &lt;/s&gt;&lt;/span&gt; （感谢 chasefornone 的提醒，这种情况下，中间元素不会比最后一个元素小）。如果还是相等呢？&lt;/p&gt;
&lt;p&gt;看看下面这张图中的两种情况（A 和 B），显然在第一次二分处理的时候，第一个（下标 0）、中间的（下标 12）和最后一个（下标 24）元素都彼此相等，分界点却有可能在任何一边。这时候就只能分别对两半继续递归处理，时间复杂度可能会变成 O(n)，空间复杂度可能会（不得不用递归或者栈来保存中间状态）变成 O(log
n)。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="coa_special_case1.png" src="https://blog.gocalf.com/images/2011/08/coa_special_case1.png" /&gt;
&lt;p class="caption"&gt;有重复元素时的特殊情况：第一个、中间的和最后一个元素彼此相等&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;还是简单点儿，限定元素各不相同吧……&lt;/p&gt;
&lt;p&gt;实际上，如果仔细考量上面的寻找分界点的方法，就会发现它跟二分查找是多么的相似啊。因此另外一种方法就是将二分查找算法修改一下，相当于把找分界点跟搜索指定元素结合起来。在每次二分的时候，除了跟中间值做比较外，也要跟两端的数值做比较，以此来确定对哪一半分治处理。直接写出这种方法下的查找函数算法：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;CycleBSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;          &lt;span class="c1"&gt;# found val&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="c1"&gt;# val is in left side&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;# val is in right side&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;# val is in right side&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="c1"&gt;# val is in left side&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;               &lt;span class="c1"&gt;# cannot find val&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;functional&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RandomAccessIterator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;RandomAccessIterator&lt;/span&gt; &lt;span class="n"&gt;CycleBinarySearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RandomAccessIterator&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="n"&gt;RandomAccessIterator&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;CycleBinarySearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;less&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// A value, &amp;#39;a&amp;#39;, is considered equivalent to another, &amp;#39;b&amp;#39;, when&lt;/span&gt;
&lt;span class="c1"&gt;// (!comp(a, b) &amp;amp;&amp;amp; !comp(b, a)).&lt;/span&gt;
&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RandomAccessIterator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Compare&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;RandomAccessIterator&lt;/span&gt; &lt;span class="n"&gt;CycleBinarySearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RandomAccessIterator&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="n"&gt;RandomAccessIterator&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="n"&gt;Compare&lt;/span&gt; &lt;span class="n"&gt;comp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;RandomAccessIterator&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;RandomAccessIterator&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;RandomAccessIterator&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;comp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;comp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// find value&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;comp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;comp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;comp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// value could be in left side&lt;/span&gt;
                &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// value could be in right side&lt;/span&gt;
                &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;comp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// value could be in right side&lt;/span&gt;
                &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// value could be in left side&lt;/span&gt;
                &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// cannot find value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;话说我还是更喜欢 Python 啊。&lt;/p&gt;
</content><category term="算法"></category><category term="Interview Question"></category><category term="Lookup Algorithm"></category></entry><entry><title>彻底禁止游客访问 Discuz! 7.0 搭建的论坛</title><link href="https://blog.gocalf.com/discuz-no-anonymous" rel="alternate"></link><published>2011-08-15T21:17:00+08:00</published><updated>2011-08-15T21:17:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-08-15:/discuz-no-anonymous</id><summary type="html">&lt;p class="first last"&gt;以前搭建了一个供内部交流用的 Discuz! 论坛，不希望没有账号的人（包括搜索引擎）看到论坛内的任何信息（包括首页等等）。在管理员设置里找了半天，发现可以“禁止 IP”、“禁止用户访问”，甚至可以让“版主”、“超级版主”等用户组访问无法访问任何页面，却偏偏没有对游客的限制。对于大多数开放的论坛并无所谓，但对于我们这种特殊的论坛，就只好自己修改代码了。来看看是如何修改的。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;以前搭建了一个供内部交流用的 Discuz! 论坛，不希望没有账号的人（包括搜索引擎）看到论坛内的任何信息（包括首页等等）。在管理员设置里找了半天，发现可以“禁止 IP”、“禁止用户访问”，甚至可以让“版主”、“超级版主”等用户组访问无法访问任何页面，却偏偏没有对游客的限制。对于大多数开放的论坛并无所谓，但对于我们这种特殊的论坛，就只好自己修改代码了。来看看是如何修改的。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;此次修改针对的是 Discuz!
7.0，其他版本可能也大同小异吧。只要改一点点就好了。&lt;/p&gt;
&lt;p&gt;文件 &lt;tt class="docutils literal"&gt;include/common.func.php&lt;/tt&gt; 中的代码几乎在访问论坛任何页面时都会被执行，它包含了很多对用户权限的控制，只要在恰当的位置添加对游客的访问限制即可。&lt;/p&gt;
&lt;p&gt;要关注的代码段落是 365 行至 378 行：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;365
366
367
368
369
370
371
372
373
374
375
376
377
378&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;if((!empty($_DCACHE[&amp;#39;advs&amp;#39;]) || $globaladvs) &amp;amp;&amp;amp; !defined(&amp;#39;IN_ADMINCP&amp;#39;)) {&lt;/span&gt;
&lt;span class="x"&gt;  require_once DISCUZ_ROOT.&amp;#39;./include/advertisements.inc.php&amp;#39;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;if(isset($allowvisit) &amp;amp;&amp;amp; $allowvisit == 0 &amp;amp;&amp;amp; !(CURSCRIPT == &amp;#39;member&amp;#39; &amp;amp;&amp;amp; ($action == &amp;#39;groupexpiry&amp;#39; || $action == &amp;#39;activate&amp;#39;))) {&lt;/span&gt;
&lt;span class="x"&gt;  showmessage(&amp;#39;user_banned&amp;#39;, NULL, &amp;#39;HALTED&amp;#39;);&lt;/span&gt;
&lt;span class="x"&gt;} elseif(!(in_array(CURSCRIPT, array(&amp;#39;logging&amp;#39;, &amp;#39;wap&amp;#39;, &amp;#39;seccode&amp;#39;, &amp;#39;ajax&amp;#39;)) || $adminid == 1)) {&lt;/span&gt;
&lt;span class="x"&gt;  if($bbclosed) {&lt;/span&gt;
&lt;span class="x"&gt;    clearcookies();&lt;/span&gt;
&lt;span class="x"&gt;    $closedreason = $db-&amp;gt;result_first(&amp;quot;SELECT value FROM {$tablepre}settings WHERE variable=&amp;#39;closedreason&amp;#39;&amp;quot;);&lt;/span&gt;
&lt;span class="x"&gt;    showmessage($closedreason ? $closedreason : &amp;#39;board_closed&amp;#39;, NULL, &amp;#39;NOPERM&amp;#39;);&lt;/span&gt;
&lt;span class="x"&gt;  }&lt;/span&gt;
&lt;span class="x"&gt;  periodscheck(&amp;#39;visitbanperiods&amp;#39;);&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;从 369 行开始的那段代码是对被禁止的用户组或者账户进行屏蔽，以及处理论坛暂时关闭的情况，就在它前面加上对游客的限制即可。判断是游客还是已登录用户的方法就是看有没有 uid 信息，游客是没有 uid 的。另外，虽然游客不能访问论坛的任何页面，但总要让他能够注册或者登录，所以要把相关页面的权限放开。除了 371 行所列的那几项之外，还需要开放 register，除非论坛注册也不对外开放。&lt;/p&gt;
&lt;p&gt;修改的内容如下，只是多加了一个判断而已：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;368a369,374
&amp;gt; /* Forbid tourists visiting the bbs. Add by calf, Apr 15, 2009 */
&amp;gt; if(!$discuz_uid &amp;amp;&amp;amp; !(defined(&amp;#39;CURSCRIPT&amp;#39;) &amp;amp;&amp;amp; in_array(CURSCRIPT, array(&amp;#39;logging&amp;#39;, &amp;#39;wap&amp;#39;, &amp;#39;seccode&amp;#39;, &amp;#39;ajax&amp;#39;, &amp;#39;register&amp;#39;)))) {
&amp;gt;   showmessage(&amp;#39;not_loggedin&amp;#39;, NULL, &amp;#39;NOPERM&amp;#39;);
&amp;gt; }
&amp;gt; /* End of Add */
&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样修改后，未登录状态下访问论坛会得到类似于“您无权进行当前操作，这可能因以下原因之一造成：对不起，您还没有登录，无法进行此操作。”的提示信息，并直接跳转到登录界面。&lt;/p&gt;
</content><category term="建站"></category><category term="Discuz!"></category></entry><entry><title>可以继承的 C++ Singleton 基类</title><link href="https://blog.gocalf.com/cpp-singleton" rel="alternate"></link><published>2011-08-12T23:20:00+08:00</published><updated>2011-08-22T00:32:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-08-12:/cpp-singleton</id><summary type="html">&lt;p class="first last"&gt;单例模式是设计模式中的一种，它用来保证系统中最多只能存在一个它的实例，其做法是由类自身来创建和持有它的对象实例，把对实例的创建权和管理权都控制在自己手中，以便控制实例数目。本文介绍可以继承的单例类。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;单例模式（Singleton
Pattern）是设计模式中的一种，它用来保证系统中最多只能存在一个它的实例，其做法是由类自身来创建和持有它的对象实例，把对实例的创建权和管理权都控制在自己手中，以便控制实例数目。&lt;/p&gt;
&lt;p&gt;关于如何在 C++ 中实现单例模式的讨论已经太多了，我只是简单介绍一下可以继承的单例类。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;首先介绍一下通常所见的单例类的写法，不妨设这个类叫做 Singleton。&lt;/p&gt;
&lt;p&gt;Singleton.h：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifndef _SINGLETON_H_&lt;/span&gt;
&lt;span class="cp"&gt;#define _SINGLETON_H_&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;GetInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Use auto_ptr to make sure that the allocated memory for instance&lt;/span&gt;
    &lt;span class="c1"&gt;// will be released when program exits (after main() ends).&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;auto_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s_instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;friend&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;auto_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Singleton.cpp：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;Singleton.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;boost/thread.hpp&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;boost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;auto_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;s_instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Construct Singleton&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;::~&lt;/span&gt;&lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Destruct Singleton&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;GetInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;mutex&lt;/span&gt; &lt;span class="n"&gt;s_mutex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s_instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;mutex&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;scoped_lock&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s_mutex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s_instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;s_instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// &amp;#39;lock&amp;#39; will be destructed now. &amp;#39;s_mutex&amp;#39; will be unlocked.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s_instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;这个类写的也不完美啦，比如双重判定也会有失效的时候，不过凑合用吧，哈哈。不过话说 boost 库里也有 singleton，我为什么要自己写个呢，无奈地飘过。&lt;/p&gt;
&lt;p&gt;废话不多说了，上面的单例类基本上解决了多线程安全问题、实例内存自动释放问题，算是一段可以使用的程序。不过如果系统中有大量单例类（这时候也得好好考虑一下 design 有没有问题），每个都要这么写一番岂不是很麻烦？要是可以写一个单例基类，以后再创造单例类的时候直接继承一下多方便啊。不过很明显的问题就在那个 static 对象指针，这个用来保存唯一实例的静态变量如果定义在基类里面，那所有的子类都只能用这同一个变量来保存它们各自的实例了，社会主义国家总得让每个子类都过上温饱生活吧！&lt;/p&gt;
&lt;p&gt;以前的时候我还真不知道该怎么解决这个问题，但 05 年用了 WTL（Windows
Template
Library）之后，我才意识到模板类可以帮助我（话说我真的是自己想到的，虽然现在搜一下能搜到一大堆）。这里要用的还不是普通的模板类，而是像 ATL、WTL 里面那样把要定义的类自身放入模板参数中，形如 &lt;code class="cpp"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;&lt;/code&gt;。这样做有很多优点啦，最显著的比如不需要虚表（节省内存哦）、多态函数的调用在编译时就确定了（既加快了运行速度，也有利于编译器对代码进行优化）。&lt;/p&gt;
&lt;p&gt;不妨把这个单例基类叫做 &lt;tt class="docutils literal"&gt;ISingleton&lt;/tt&gt; 吧，看起来好像是个 interface 呢。代码如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifndef _ISingleton_H_&lt;/span&gt;
&lt;span class="cp"&gt;#define _ISingleton_H_&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;boost/thread.hpp&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ISingleton&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;GetInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;boost&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;mutex&lt;/span&gt; &lt;span class="n"&gt;s_mutex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s_instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;boost&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;mutex&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;scoped_lock&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s_mutex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s_instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;s_instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="c1"&gt;// &amp;#39;lock&amp;#39; will be destructed now. &amp;#39;s_mutex&amp;#39; will be unlocked.&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s_instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;protected&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ISingleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;ISingleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="c1"&gt;// Use auto_ptr to make sure that the allocated memory for instance&lt;/span&gt;
    &lt;span class="c1"&gt;// will be released when program exits (after main() ends).&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;auto_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s_instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ISingleton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ISingleton&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;ISingleton&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;auto_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ISingleton&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;s_instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;要利用 &lt;tt class="docutils literal"&gt;ISingleton&lt;/tt&gt; 创建一个自己的单例类，比如 &lt;tt class="docutils literal"&gt;MySingleton&lt;/tt&gt;，可以使用如下的代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;Singleton.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;ISingleton.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MySingleton&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ISingleton&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MySingleton&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// blah blah&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;MySingleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Construct MySingleton&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;MySingleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Destruct MySingleton&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;friend&lt;/span&gt; &lt;span class="n"&gt;ISingleton&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MySingleton&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;friend&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;auto_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MySingleton&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;MySingleton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MySingleton&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;MySingleton&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MySingleton&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;最最重要的，千万不要忘了把 &lt;tt class="docutils literal"&gt;MySingleton&lt;/tt&gt; 的构造和析构函数弄成 &lt;tt class="docutils literal"&gt;private&lt;/tt&gt; 的，还要添加两个友元。有人说 &lt;tt class="docutils literal"&gt;ISingleton&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;MySingleton&lt;/tt&gt; 的析构函数都要加 &lt;tt class="docutils literal"&gt;virtual&lt;/tt&gt;，我倒是觉得没有必要呢，你说呢？另外要注意，&lt;tt class="docutils literal"&gt;MySingleton&lt;/tt&gt; 不能被继承哦。&lt;/p&gt;
</content><category term="程序开发"></category><category term="Interview Question"></category><category term="C++"></category><category term="Design Pattern"></category></entry><entry><title>星期万年历</title><link href="https://blog.gocalf.com/calendar-of-week" rel="alternate"></link><published>2011-08-10T22:25:00+08:00</published><updated>2011-08-10T22:25:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-08-10:/calendar-of-week</id><summary type="html">&lt;p class="first last"&gt;小学的时候看到过计算某年某月某日是星期几的方法，当时觉得好神奇啊，当时一直不明白为什么一个简简单单的式子或者一张表格就能够算出任何一天是星期几呢。让我们回忆一下孩童时期的乐趣吧，或许以后可以用来逗孩子玩呢。&lt;/p&gt;
</summary><content type="html">
&lt;p&gt;还记得小学的时候看到过计算某年某月某日是星期几的方法，当时觉得好神奇啊，当时一直不明白为什么一个简简单单的式子或者一张表格就能够算出任何一天是星期几呢，这些方法伴随我度过了整个童年。&lt;/p&gt;
&lt;p&gt;长大后就知道了它们的原理，因为星期是七天为一个周期，只要已知某一天是星期几，要算任何一天是星期几只要求出两个日子之间的天数就可以了。现在的编程语言几乎全都包含了获得星期的方法，程序员们再也不用为此发愁。但还是让我们回忆一下孩童时期的乐趣吧，或许以后可以用来逗孩子玩呢。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;公式法计算星期几&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这是我最早知道的计算某一天是星期几的方法，还曾经在同学的 Casio 可编程计算器上做了个简单的程序来自动计算，真是有趣的回忆。&lt;/p&gt;
&lt;p&gt;设 Y 是公元年数（比如今年的话，Y 等于 2011），D 是从同年元旦到指定的这天未为止的天数（包含这一天，比如 1 月 1 号的话，D 就是 1），那么指定日期的星期数为：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
W=\left((Y-1)+\left\lfloor\frac{Y-1}{4}\right\rfloor-\left\lfloor\frac{Y-1}{100}\right\rfloor+\left\lfloor\frac{Y-1}{400}\right\rfloor+D\right)\bmod7
\end{equation*}
&lt;/div&gt;
&lt;p&gt;结果 0 代表周日，1～6 分别代表星期一～星期六。&lt;/p&gt;
&lt;p&gt;以今天为例，2011 年 8 月 10 日，先求出今年元旦到今天有多少天（包含今天），显然 D=31+28+31+30+31+30+31+10=222，代入公式得到：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{array}{rcl}
W &amp;amp; = &amp;amp; \left((2011-1)+\left\lfloor\frac{2011-1}{4}\right\rfloor-\left\lfloor\frac{2011-1}{100}\right\rfloor+\left\lfloor\frac{2011-1}{400}\right\rfloor+222\right)\bmod7 \\
&amp;amp; = &amp;amp; (2010+502-20+5+222)\bmod7 \\
&amp;amp; = &amp;amp; 2719\bmod7 \\
&amp;amp; = &amp;amp; 3
\end{array}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;今天是周三，没错呢。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;表格法计算星期几&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上面的公式虽然简单明了，但对于小学时候的我却还是非常头疼的，四则运算不过关的人伤不起啊！下面这个表格法则没有任何计算了，我还特意添加了 JavaScript 使得它更容易使用。&lt;/p&gt;
&lt;p&gt;使用方法非常简单，比如还是看今天是星期几，按照以下三步进行：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;在百年数区域里找到 20，在年份后两位数字区域里找到 11。由 20 所在横行向右，11 所在竖行向下，交于 F。&lt;/li&gt;
&lt;li&gt;在月份区域里找到 8，向左在同一横行里找到 F。&lt;/li&gt;
&lt;li&gt;在日期区域里找到 10，在同一横行向左，同时由（第 2 步中找到的）F 所在竖行向下，与 10 所在横行相交于星期区域里的“三”。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可见同样求出今天是星期三。&lt;/p&gt;
&lt;p&gt;另外注意在月份区域中的 1' 和 2' 分别表示闰年的 1 月和 2 月。比如算 2000 年 1 月某天是星期几，就要在月份区域里选择 1'。&lt;/p&gt;
&lt;p&gt;猛烈点击 &lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/08/calendar_week.htm"&gt;这里（calendar_week.html）&lt;/a&gt; 可以在新的页面中打开星期万年历表格。如果你的浏览器支持 IFRAME，可以在文章底部看到同样的表格。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;啰嗦两句&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;根据公式或者表格都可以算出公元 1 年 1 月 1 日是星期一，那天到底是不是星期一呢？我不知道，而且也没有实际的意义，因为这个历法是罗马教皇格里高利十三世在 1582 年 10 月 15 日启用的，而英国及其殖民地直到 1752 年 9 月 14 日才使用现在的历法，所以算这之前甚至公元前某日是星期几毫无意义。另外，1582 年 2 月 24 日教皇下令去除 1582 年 10 月 5 日至 14 日，1752 年英国国会下令去除 1752 年 9 月 3 日至 13 日，所以 1752 年 9 月 14 日是星期四，但 1752 年 9 月 2 日却是星期三而不是星期六。
这也是为什么我在表格的百年数区域里从 15 开始写。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="iframe"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;附：放在 IFRAME 里面的星期万年历表格&lt;/a&gt;&lt;/h2&gt;
&lt;iframe frameborder="0" height="1060" name="星期万年历" scrolling="yes" src="https://blog.gocalf.com/assets/2011/08/calendar_week.htm" title="Week Calendar" width="100%"&gt;&lt;/iframe&gt;&lt;/div&gt;
</content><category term="有用知识"></category><category term="Perpetual Calendar"></category></entry><entry><title>C++ 中的常量指针和指针常量</title><link href="https://blog.gocalf.com/cpp-const-and-pointer" rel="alternate"></link><published>2011-08-04T23:39:00+08:00</published><updated>2011-08-18T14:06:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-08-04:/cpp-const-and-pointer</id><summary type="html">&lt;p class="first last"&gt;仔细回忆一下 C++ 中的指针常量与常量指针的区别，记录于此。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;太久不用 C++ 了，竟然连最基本的东西都记不清楚了。今天干活的时候突然想要用指针常量，但突然就忘了指针常量跟常量指针的区别。花了一点儿时间仔细回想了一下几年前上课时老师讲的，总算又回忆起来了，赶紧记录下来备忘。&lt;/p&gt;
&lt;p&gt;这可能会被当作面试题，不过不是算法，故而不放在面试算法题系列中。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;我觉得容易混淆的罪魁祸首在于中文的翻译问题，如果改叫“常量的指针”和“指针常量”可能会好些。先不管这些，看看英文的叫法：Pointer
to Const 和 Const Pointer。&lt;/p&gt;
&lt;p&gt;Pointer to
Const，顾名思义就是一个指针，指向的数据不能被修改，C++ 语法是 &lt;code class="cpp"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;/code&gt;。怎么记忆呢，非常简单，记住要从右往左解读即可。首先这是个变量（&lt;code class="cpp"&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;/code&gt;）；然后发现它是个指针（&lt;code class="cpp"&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;/code&gt;）；接下来看到它所指向的数据是不可修改的（&lt;code class="cpp"&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;/code&gt;）；最后这个指针所指向的空间存放的是整数（&lt;code class="cpp"&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;Const
Pointer，也是个指针，但这个指针的值不能被修改（不能再指向其他地方），C++ 语法是 &lt;code class="cpp"&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;/code&gt;。同样从右往左读，变量（&lt;code class="cpp"&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;/code&gt;）；变量的值不能被修改（&lt;code class="cpp"&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;/code&gt;）；是个指针（&lt;code class="cpp"&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;/code&gt;）；这个指针所指向的空间存放的是整数（&lt;code class="cpp"&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;可见 const 修饰的是它右边紧邻的元素，如果右边是指针 *，就表明指针指向的是常量，不能被修改；如果右边是变量，就变明这个变量自身不能被修改。&lt;/p&gt;
&lt;p&gt;下面这段 C++ 程序示意了两种指针的区别，其中被注释掉的两行（高亮显示）是因为会无法编译。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pointer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pointerToConst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;constPointer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;pointer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;pointerToConst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="c1"&gt;//constPointer = &amp;amp;c2;  // the pointer cannot be moved&lt;/span&gt;
&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pointer&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="c1"&gt;//*pointerToConst += 100;  // the pointed data cannot be changed&lt;/span&gt;
&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;constPointer&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*pointer = &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pointer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*pointerToConst = &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pointerToConst&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*constPointer = &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;constPointer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;显然程序的输出应该是：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*pointer = 110
*pointerToConst = 20
*constPointer = 103
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;对英文名称理解清楚了，记不记中文名字也就无所谓了吧。我的记忆方法就是“Pointer
to Const”翻译为“常量的指针”，简称“常量指针”；“Const
Pointer”翻译为“指针常量”。&lt;/p&gt;
&lt;p&gt;最后简单总结一下跟 const 相关的变量的写法：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// An int that cannot be changed.&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;constNumber_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;constNumber_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//constNumber_1 = 10;&lt;/span&gt;

&lt;span class="c1"&gt;// A pointer that can be repointed to an int that cannot be changed.&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pointerToConst_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pointerToConst_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;pointerToConst_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//*pointerToConst_1 = 10;&lt;/span&gt;

&lt;span class="c1"&gt;// A pointer that cannot be moved to an integer that may be changed.&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;constPointer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//constPointer = &amp;amp;b;&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;constPointer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// A pointer that cannot be moved to an integer that cannot be changed.&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;constPointerToConst_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;constPointerToConst_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//constPointerToConst_1 = &amp;amp;b;&lt;/span&gt;
&lt;span class="c1"&gt;//*constPointerToConst_1 = 10;&lt;/span&gt;

&lt;span class="c1"&gt;// Error, const applied to int twice.&lt;/span&gt;
&lt;span class="c1"&gt;// (warning C4114: same type qualifier used more than once).&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pointerToTwiceConst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;pointerToTwiceConst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//*pointerToTwiceConst = 10;&lt;/span&gt;

&lt;span class="c1"&gt;// A pointer that may be repointed. It points to a pointer that cannot be moved to&lt;/span&gt;
&lt;span class="c1"&gt;// an int that may be modified.&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pointerToConstPointer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pa&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;pointerToConstPointer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//*pointerToConstPointer = pb;&lt;/span&gt;
&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;pointerToConstPointer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><category term="程序开发"></category><category term="Interview Question"></category><category term="C++"></category></entry><entry><title>利用等概率 Rand5 产生等概率 Rand3</title><link href="https://blog.gocalf.com/build-rand3-from-rand5" rel="alternate"></link><published>2011-08-02T23:10:00+08:00</published><updated>2013-11-07T22:00:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-08-02:/build-rand3-from-rand5</id><summary type="html">&lt;p class="first last"&gt;问题描述：现在有一个叫做 Rand5 的函数，可以生成等概率的 [0, 5) 范围内的随机整数，要求利用此函数写一个 Rand3 函数（除此之外，不能再使用任何能产生随机数的函数或数据源），生成等概率的 [0, 3) 范围内的随机整数。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;问题本身很明确，但不知道起个什么题目好，姑且先这么说吧。&lt;/p&gt;
&lt;p&gt;问题描述：现在有一个叫做 Rand5 的函数，可以生成等概率的 [0,
5) 范围内的随机整数，要求利用此函数写一个 Rand3 函数（除此之外，不能再使用任何能产生随机数的函数或数据源），生成等概率的 [0,
3) 范围内的随机整数。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;我第一次遇到这个问题的时候，着实犯了一回傻，自以为是地证明了这个题目是无解的。其实从概率的角度来看，题目的要求就是，利用一个 1/5 的概率源，通过某种方式产生出 1/3 的概率输出。我们都知道，概率运算法则有加法和乘法，而在我的记忆中，算法是“在有限步骤内求解某一问题所使用的一组定义明确的规则”，算法的一个重要特征就是有穷性，即一个算法必须保证执行有限步之后结束。那么有限多个 1/5 通过加法和乘法是不可能的到 1/3 这个数值的，因为加法和乘法都不会给分母带来新的因子，那么分母中的 3 根本就不可能出现。&lt;/p&gt;
&lt;p&gt;然而我忽略了这样一个式子：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\sum_{i=0}^\infty \left(\frac{2}{5}\right)^i = \frac{1}{1-\frac{2}{5}} = \frac{5}{3}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;基于这个想法，我们来看看这个算法是什么样子的：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Rand3&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Rand5&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Rand3&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Rand5&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;算法很简单，x 是我们最终要输出的数字，只要它不在 [0,
3) 范围内，就不断地调用 Rand5 来更新它。直观地看，算法输出的数字只有 0、1、2 这三个，而且对任何一个都没有偏袒，那么显然每个数字的概率都是 1/3，那让我们来严格地计算一下。&lt;/p&gt;
&lt;p&gt;以输出 0 为例，看看概率是多少。x 的第一个有效数值是通过 Rand5 得到的。Rand5 返回 0 的概率是 1/5，如果这事儿发生了，我们就得到了 0，否则只有当 Rand5 返回 3 或 4 的时候，我们才有机会再次调用它来得到新的数据。第二次调用 Rand5 之后，又是有 1/5 的概率得到 0，2/5 的概率得到 3 或 4 导致循环继续执行下去，如此反复。因此概率的计算公式为：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{array}{rcl}
p &amp;amp; = &amp;amp; \frac{1}{5}+\frac{2}{5}\times\left(\frac{1}{5}+\frac{2}{5}\times\left(\frac{1}{5}+\frac{2}{5}\times\left(\cdots\right)\right)\right) \\
&amp;amp; = &amp;amp; \frac{1}{5}\times\sum_{i=0}^\infty \left(\frac{2}{5}\right)^i \\
&amp;amp; = &amp;amp; \frac{1}{5}\times\frac{1}{1-\frac{2}{5}} \\
&amp;amp; = &amp;amp; \frac{1}{5}\times\frac{5}{3} \\
&amp;amp; = &amp;amp; \frac{1}{3} \end{array}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;喏，计算表明，Rand3 输出 0 的概率确实是 1/3，对于另外两个数字也是一样的。&lt;/p&gt;
&lt;p&gt;那么这段代码是不是一个算法呢，它是否满足算法的有穷性呢？我不能确定，虽然它不停机的概率是 0，然而这个概率是一个极限值，唉，回去复习极限知识先。&lt;/p&gt;
&lt;p&gt;【2013 年 11 月 7 日添加】今天想到，对于上面那个函数，需要再了解一下它消耗的时间。具体来讲，就是要知道平均每调用一次 Rand3，相当于调用了多少次 Rand5。根据算法可以知道，Rand3 函数执行一次，有 3/5 的概率是只调用一次 Rand5 就能停机；刚好调用两次 Rand5 后停机的概率是 (2/5) * (3/5)。类推下去，刚好调用 k 次 Rand5 后停机的概率应该是 (2/5) ^ (k-1) * (3/5)。根据这个概率分布，可以计算出停机前 Rand5 被调用次数的数学期望，即&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\sum_{k=1}^{\infty}{k\times p(k)}
=\sum_{k=1}^{\infty}k \frac{3}{5} \left(\frac{2}{5}\right)^{k-1}
=\frac{3}{5}\times\frac{1}{\left(1-\frac{2}{5}\right)^2}
=\frac{5}{3}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;可见，Rand3 函数每运行一次，平均需要调用 1.67 次 Rand5。&lt;/p&gt;
&lt;p&gt;更一般地，当我们依据上述算法，将一种分布的随机信号转换成另外一种随机信号时，如果每消耗 m 个源信号，就有 p 的概率可以产生一个目标信号，那么平均来讲，停机前需要使用的源信号数据个数的期望为：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\sum_{k=1}^{\infty}k\cdot m\cdot p\cdot (1-p)^{k-1}=\frac{m}{p}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;【2013 年 11 月 7 日添加结束】&lt;/p&gt;
&lt;p&gt;改变一下题目，如果要求利用 Rand5 编写 Rand7 怎么办？很简单，用两个 Rand5 可以拼出 Rand25，然后就用前面的方法即可：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Rand7&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Rand5&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Rand5&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Rand7&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Rand5&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Rand5&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;【2013 年 11 月 7 日】可以直接算出，按照这种方法，平均每运行一次 Rand7，需要调用 Rand5 的次数。这里 m 等于 2，p 等于 21/25，所以最后的结果是 50/21，大约是 2.38。&lt;/p&gt;
</content><category term="算法"></category><category term="Probability"></category><category term="Interview Question"></category></entry><entry><title>解决 BlueHost 邮箱无法接收邮件的问题</title><link href="https://blog.gocalf.com/bluehost-mailbox" rel="alternate"></link><published>2011-07-31T22:04:00+08:00</published><updated>2011-08-03T22:33:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-07-31:/bluehost-mailbox</id><summary type="html">&lt;p class="first last"&gt;在之前的一篇文章中提到 GoCalf 网站的 Email 部分还没弄好，当时遇到的问题是可以发出邮件，却无法接收邮件。问题根源在于 DNS 没有设置好（空间跟域名来自不同的提供商），今天花了一点儿时间把这个问题解决了。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;在之前的 &lt;a class="reference external" href="https://blog.gocalf.com/lets-start"&gt;一篇文章&lt;/a&gt; 中提到 &lt;a class="reference external" href="http://www.gocalf.com/"&gt;GoCalf&lt;/a&gt; 网站的 Email 部分还没弄好，当时遇到的问题是可以发出邮件，却无法接收邮件。问题根源在于 DNS 没有设置好（空间跟域名来自不同的提供商），今天花了一点儿时间把这个问题解决了。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;我的域名是 &lt;a class="reference external" href="http://www.godaddy.com"&gt;GoDaddy&lt;/a&gt; 提供的，而服务器空间则在 &lt;a class="reference external" href="http://www.bluehost.com/"&gt;BlueHost&lt;/a&gt; 上，域名解析（DNS）是在 GoDaddy 上进行的。之前已经将二级域名 mail 的 A 记录指向 GoCalf 空间的 IP 地址了，可以登录邮箱，能发出邮件，但怎么都收不到信。在 Gmail（或别的邮件服务器）中给 BlueHost 上的邮件帐户发邮件，会收到无法送达的失败提示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Delivery to the following recipient failed permanently:&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&amp;nbsp; &amp;nbsp; &lt;a class="reference external" href="mailto:xxx&amp;#64;xxxxxxxx.com"&gt;xxx&amp;#64;xxxxxxxx.com&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Technical details of permanent failure:&lt;/div&gt;
&lt;div class="line"&gt;Google tried to deliver your message, but it was rejected by the
recipient domain. We recommend contacting the other email provider
for further information about the cause of this error. The error
that the other server returned was: 550 550 #5.1.0 Address rejected
&lt;a class="reference external" href="mailto:xxx&amp;#64;xxxxxxxx.com"&gt;xxx&amp;#64;xxxxxxxx.com&lt;/a&gt; (state 14).&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;看起来应该是 DNS 的问题（跨服务商就是这点比较麻烦啊）。仔细察看了 GoDaddy 上 DNS
Manager 里面的内容，发现 Mail
Exchanger（MX）的配置内容有问题，并没有指向 GoCalf 的空间地址，因此将 MX 记录改为指向 mail.gocalf.com。改动大概需要一个小时才能生效，生效之后再次发送邮件就可以在 BlueHost 里收到了。&lt;/p&gt;
&lt;p&gt;附 GoDaddy 里面 DNS 设置截图：&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="GoDaddy 中 DNS 设置" src="https://blog.gocalf.com/images/2011/07/godaddy_dns.png" /&gt;
&lt;p class="caption"&gt;将二级域名 mail 指向 &amp;#64; 地址；MX 记录指向 mail.&amp;lt;yourdomain&amp;gt;.com&lt;/p&gt;
&lt;/div&gt;
</content><category term="建站"></category><category term="BlueHost"></category><category term="Mail Exchanger"></category></entry><entry><title>关于安装 MathJax 后占用文件过多的问题</title><link href="https://blog.gocalf.com/mathjax-numerous-files" rel="alternate"></link><published>2011-07-28T22:39:00+08:00</published><updated>2011-08-03T22:26:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-07-28:/mathjax-numerous-files</id><summary type="html">&lt;p class="first last"&gt;MathJax 在安装目录下有三万多个文件，百分之九十九以上都是由图片字体 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;mathjax/fonts/HTML-CSS/TeX/png&lt;/span&gt;&lt;/tt&gt; 贡献的，这些图片是为不支持的 Web Font 的浏览器准备的。如果太多的文件影响到服务器空间，可以按照本文的方法删掉以节省空间，减少文件总数。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;在 &lt;a class="reference external" href="https://blog.gocalf.com/latex-wordpress"&gt;WordPress 数学公式插件 LaTeX&lt;/a&gt; 中介绍了 GoCalf 博客中使用的 LaTeX 插件，是 Zhiqiang 开发的 &lt;a class="reference external" href="http://wordpress.org/extend/plugins/latex/"&gt;LaTeX for WordPress&lt;/a&gt; 插件。这个插件利用 MathJax 来渲染 LaTeX 公式，效果非常好，后来我在自己的空间里安装了 MathJax 引擎。可是前两天发现我的空间里竟然有五万多个文件，几乎就要收到 BlueHost 的警告了，查看了一下文件分布，发现光 MathJax 就有三万多个文件！怎么能减少文件数目呢？&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;对 MathJax 的安装路径扫描了一下，发现 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;mathjax/fonts/HTML-CSS/TeX/png&lt;/span&gt;&lt;/tt&gt; 下面有无数的小文件，都是图片，每个图片是一个字符。非常奇怪，MathJax 不是用 JavaScript、CSS 和 Web
Font 来显示公式么，怎么会有这么多图片格式的字符。&lt;/p&gt;
&lt;p&gt;带着这个疑问到 MathJax 官方网站上看了看，果然找到了这样一个 FAQ：&lt;a class="reference external" href="http://www.mathjax.org/resources/faqs/#fonts-too-big"&gt;The MathJax font folder is too big. Is there any way to compress it?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原来这些图片格式的字符是为了让那些古老的不支持 Web
Font 的浏览器也可以正常地显示 LaTeX 公式，好吧，可怕的向下兼容。在 MathJax 将其改进之前，我决定先删掉这些图片。先要关闭这种图片字体的功能，直接修改插件的源代码 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;blog/wp-content/plugins/latex/latex.php&lt;/span&gt;&lt;/tt&gt;，找到关于 MathJax 配置的代码，修改为：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;function add_latex_mathjax_code(){
    echo &amp;#39;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/x-mathjax-config&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;MathJax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Hub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;HTML-CSS&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="hll"&gt;                &lt;span class="nx"&gt;imageFont&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;/span&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;#39;.get_option(&amp;quot;&lt;/span&gt;&lt;span class="na"&gt;mathjax_server&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;).&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&amp;#39;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;其中第 6 行就是新添加的内容（还有第 5 行末尾的逗号），这样 MathJax 就不会再使用图片字体，然后把上面提到的那个目录整个删掉就可以了。当然 TeX 目录下还有其他几个文件夹，如 eot、otf 和 svg，这些可不要删，要不然在什么浏览器上都无法显示公式了。&lt;/p&gt;
&lt;p&gt;试了一下，至少 IE6+、Chrome、FireFox、Safari（包括 iPhone、iPad 版）都可以正常显示公式。&lt;/p&gt;
&lt;p&gt;呼，一下子清理掉三万多文件，不错。&lt;/p&gt;
</content><category term="建站"></category><category term="MathJax"></category></entry><entry><title>纸张的尺寸</title><link href="https://blog.gocalf.com/about-paper-size" rel="alternate"></link><published>2011-07-27T22:11:00+08:00</published><updated>2013-10-30T16:48:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-07-27:/about-paper-size</id><summary type="html">&lt;p class="first last"&gt;小时候常说的 16 开、32 开的纸是多大？现在打印复印用的 A3、A4、B5 纸又分别是多大？看到书架里高矮宽窄各不同的书本，赶紧上网查了一番，总结于此。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;记得小时候买书本，都会提到多少多少开，成语词典好像是 64 开，小学课本是 32 开，到高中教材改革，课本变成了 16 开。随着打印机、复印机的广泛应用，现在似乎很少说多少开了，张口就是 A4 纸，A3 纸，还有 B5、C5 之类的。它们的尺寸分别是多少？大小关系呢？&lt;/p&gt;
&lt;p&gt;看到书架里高矮宽窄各不同的书本，赶紧上网查了一番，总结于此。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;先说现在的复印纸。有 A、B、C 三个系列，它们的尺寸遵循国际标准 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/A4_paper"&gt;ISO 216&lt;/a&gt; 和 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/ISO_269"&gt;ISO 269&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;A 系列从 A0 开始，这是一整张纸，将其沿长边对折，每半都是 A1，继续沿长边对折得到 A2，以此类推。由于每次对折之后，纸张的长宽比保持不变，可知（a、b 分别代表短边、长边） &lt;span class="math"&gt;\(a:b=\frac{b}{2}:a\Rightarrow a:b=1:\sqrt2\)&lt;/span&gt;。A0 的面积是 &lt;span class="math"&gt;\(1m^2\)&lt;/span&gt;，由此可以推算出其尺寸为 841x1189（单位是毫米，下同）：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\left\{\begin{matrix} \sqrt{10^6/\sqrt2}\approx 841\\ \sqrt2\sqrt{10^6/\sqrt2}\approx 1189 \end{matrix} \right.
\end{equation*}
&lt;/div&gt;
&lt;p&gt;将 A0 纸张长边减半，就可以得到 A1 的尺寸（不能整除时下取整），为 594x841。常用的 A3 纸是 297x420，A4 纸是 210x297。维基百科上还给出了边长的通项公式：纸张 An 的尺寸是 &lt;span class="math"&gt;\(a_n \times a_{n+1}\)&lt;/span&gt;，其中 &lt;span class="math"&gt;\(a_n=\left \lfloor 1000\times 2^{1/4-n/2}+0.2 \right \rfloor\)&lt;/span&gt;，是一个等比数列（这里加 0.2 下取整是使得 A0 的面积尽可能接近一平米，其他编号的纸张面积最接近但不超过前一编号纸张的一半）。&lt;/p&gt;
&lt;p&gt;B 系列的尺寸被定义为相同编号的 A 系列纸张，与前一编号的 A 系列纸张的几何平均（乘积的开方）。即 B1 的尺寸是 A1 和 A0 的几何平均。直接根据 A0 的通项公式可以得到纸张 Bn 的尺寸是 &lt;span class="math"&gt;\(b_n\times b_{n+1}\)&lt;/span&gt;，其中 &lt;span class="math"&gt;\(b_n=\left \lfloor 1000\times 2^{1/2-n/2}+0.2 \right \rfloor\)&lt;/span&gt;。可见 B 纸的边长是相同编号的 A 纸的 &lt;span class="math"&gt;\(\sqrt[4]{2}\)&lt;/span&gt; 倍，面积是 &lt;span class="math"&gt;\(\sqrt2\)&lt;/span&gt; 倍。B0 的尺寸是 1000x1414，B4 是 250x353。&lt;/p&gt;
&lt;p&gt;C 系列是信封系列，其尺寸是相同编号的 A 纸与 B 纸的几何平均。可以推算出其通项公式为 &lt;span class="math"&gt;\(c_n=\left \lfloor 1000\times 2^{3/8-n/2}+0.2 \right \rfloor\)&lt;/span&gt;。C0 的尺寸是 917x1297，C4 为 229x324。C4 刚好比 A4 大一点儿，正好可以给 A4 纸当信封。&lt;/p&gt;
&lt;p&gt;下面这个表列出了 A、B、C 三个系列纸张的尺寸：&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="13%" /&gt;
&lt;col width="20%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="23%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="20%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head" colspan="2"&gt;A 系列&lt;/th&gt;
&lt;th class="head" colspan="2"&gt;B 系列&lt;/th&gt;
&lt;th class="head" colspan="2"&gt;C 系列&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;A0&lt;/td&gt;
&lt;td&gt;841x1189&lt;/td&gt;
&lt;td&gt;B0&lt;/td&gt;
&lt;td&gt;1000x1414&lt;/td&gt;
&lt;td&gt;C0&lt;/td&gt;
&lt;td&gt;917x1297&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;A1&lt;/td&gt;
&lt;td&gt;594x841&lt;/td&gt;
&lt;td&gt;B1&lt;/td&gt;
&lt;td&gt;707x1000&lt;/td&gt;
&lt;td&gt;C1&lt;/td&gt;
&lt;td&gt;648x917&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;A2&lt;/td&gt;
&lt;td&gt;420x594&lt;/td&gt;
&lt;td&gt;B2&lt;/td&gt;
&lt;td&gt;500x707&lt;/td&gt;
&lt;td&gt;C2&lt;/td&gt;
&lt;td&gt;458x648&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;A3&lt;/td&gt;
&lt;td&gt;297x420&lt;/td&gt;
&lt;td&gt;B3&lt;/td&gt;
&lt;td&gt;353x500&lt;/td&gt;
&lt;td&gt;C3&lt;/td&gt;
&lt;td&gt;324x458&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;A4&lt;/td&gt;
&lt;td&gt;210x297&lt;/td&gt;
&lt;td&gt;B4&lt;/td&gt;
&lt;td&gt;250x353&lt;/td&gt;
&lt;td&gt;C4&lt;/td&gt;
&lt;td&gt;229x324&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;A5&lt;/td&gt;
&lt;td&gt;148x210&lt;/td&gt;
&lt;td&gt;B5&lt;/td&gt;
&lt;td&gt;176x250&lt;/td&gt;
&lt;td&gt;C5&lt;/td&gt;
&lt;td&gt;162x229&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;A6&lt;/td&gt;
&lt;td&gt;105x148&lt;/td&gt;
&lt;td&gt;B6&lt;/td&gt;
&lt;td&gt;125x176&lt;/td&gt;
&lt;td&gt;C6&lt;/td&gt;
&lt;td&gt;114x162&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;A7&lt;/td&gt;
&lt;td&gt;74x105&lt;/td&gt;
&lt;td&gt;B7&lt;/td&gt;
&lt;td&gt;88x125&lt;/td&gt;
&lt;td&gt;C7&lt;/td&gt;
&lt;td&gt;81x114&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;A8&lt;/td&gt;
&lt;td&gt;52x74&lt;/td&gt;
&lt;td&gt;B8&lt;/td&gt;
&lt;td&gt;62x88&lt;/td&gt;
&lt;td&gt;C8&lt;/td&gt;
&lt;td&gt;57x81&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;A9&lt;/td&gt;
&lt;td&gt;37x52&lt;/td&gt;
&lt;td&gt;B9&lt;/td&gt;
&lt;td&gt;44x62&lt;/td&gt;
&lt;td&gt;C9&lt;/td&gt;
&lt;td&gt;40x57&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;A10&lt;/td&gt;
&lt;td&gt;26x37&lt;/td&gt;
&lt;td&gt;B10&lt;/td&gt;
&lt;td&gt;31x44&lt;/td&gt;
&lt;td&gt;C10&lt;/td&gt;
&lt;td&gt;28x40&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;本来想下载 ISO 216 标准完整版阅读一下，没想到很贵呢，要 &lt;a class="reference external" href="http://webstore.ansi.org/RecordDetail.aspx?sku=ISO+216%3a2007"&gt;七十多美元&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;再来看小时候常说的开本，什么 16 开、32 开。其实很容易理解啦，16 开就是把一张大纸裁成 16 等份（对折 4 次，类似于 A4），32 开就是把 16 开纸再对折 1 次（类似于 A5）。而整张的大纸的尺寸在我国也有好几种，最常见的有（宽长比差不多都是 &lt;span class="math"&gt;\(1:\sqrt2\)&lt;/span&gt;）：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;787 号纸（正度纸）：787x1092&lt;/li&gt;
&lt;li&gt;850 号纸（大度纸）：850x1168&lt;/li&gt;
&lt;li&gt;880 号纸：880x1230&lt;/li&gt;
&lt;li&gt;889 号纸（也有说这个是大度纸，搞不清楚）：889x1194&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过如果按照对折的办法去算开纸的尺寸，比如 787 号纸的 16 开是 196x273，这个尺寸一般要比 16 开的书大，因为书籍还要修边裁剪啥的。比如我手边的交规课本就是 787 号纸 16 开的，实际尺寸是 186x259。除了常见的对开（就是 2 开）、4 开、8 开、16 开、32 开、64 开（袖珍手册），偶尔也能看到其他开本。比如我手边有一本讲 PPT 的书是 889 号纸 24 开的，实际尺寸是 180x210，貌似是把 4 开本沿短边对折后再沿长边三折：&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;object data="https://blog.gocalf.com/images/2011/07/paper_24k.svg" style="width: 346px;" type="image/svg+xml"&gt;
paper_24k&lt;/object&gt;
&lt;p class="caption"&gt;889x1194 24 开本&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;对于给定的原始尺寸，可以用下面这段程序（Python）来算出 1～10 次对折后的尺寸：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Kai&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="n"&gt;Kai&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;841&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1189&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;下面的表格列出了这四种纸张各个开本的未修边尺寸（有些格子里列出了常见的修边后的尺寸）：&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="14%" /&gt;
&lt;col width="22%" /&gt;
&lt;col width="22%" /&gt;
&lt;col width="20%" /&gt;
&lt;col width="20%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;开本&lt;/th&gt;
&lt;th class="head"&gt;787 号纸&lt;/th&gt;
&lt;th class="head"&gt;850 号纸&lt;/th&gt;
&lt;th class="head"&gt;880 号纸&lt;/th&gt;
&lt;th class="head"&gt;889 号纸&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;全张&lt;/td&gt;
&lt;td&gt;787x1092&lt;/td&gt;
&lt;td&gt;850x1168&lt;/td&gt;
&lt;td&gt;880x1230&lt;/td&gt;
&lt;td&gt;889x1194&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2 开&lt;/td&gt;
&lt;td&gt;546x787&lt;/td&gt;
&lt;td&gt;584x850&lt;/td&gt;
&lt;td&gt;615x880&lt;/td&gt;
&lt;td&gt;597x889&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4 开&lt;/td&gt;
&lt;td&gt;393x546&lt;/td&gt;
&lt;td&gt;425x584&lt;/td&gt;
&lt;td&gt;440x615&lt;/td&gt;
&lt;td&gt;444x597&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;8 开&lt;/td&gt;
&lt;td&gt;273x393
(260x368)&lt;/td&gt;
&lt;td&gt;292x425
(285x420)&lt;/td&gt;
&lt;td&gt;307x440&lt;/td&gt;
&lt;td&gt;298x444&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;16 开&lt;/td&gt;
&lt;td&gt;196x273
(184x260)&lt;/td&gt;
&lt;td&gt;212x292
(210x285)&lt;/td&gt;
&lt;td&gt;220x307&lt;/td&gt;
&lt;td&gt;222x298&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;32 开&lt;/td&gt;
&lt;td&gt;136x196
(130x184)&lt;/td&gt;
&lt;td&gt;146x212
(140x203)&lt;/td&gt;
&lt;td&gt;153x220&lt;/td&gt;
&lt;td&gt;149x222&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;64 开&lt;/td&gt;
&lt;td&gt;98x136&lt;/td&gt;
&lt;td&gt;106x146&lt;/td&gt;
&lt;td&gt;110x153&lt;/td&gt;
&lt;td&gt;111x149&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;128 开&lt;/td&gt;
&lt;td&gt;68x98&lt;/td&gt;
&lt;td&gt;73x106&lt;/td&gt;
&lt;td&gt;76x110&lt;/td&gt;
&lt;td&gt;74x111&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="有用知识"></category><category term="Paper Size"></category></entry><entry><title>Dell E6400 安装 MacOS 雪豹 10.6</title><link href="https://blog.gocalf.com/dell-e6400-install-mac" rel="alternate"></link><published>2011-07-24T18:08:00+08:00</published><updated>2012-03-02T21:46:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-07-24:/dell-e6400-install-mac</id><summary type="html">&lt;p class="first last"&gt;半年前在 Dell Latitude E6400 上安装了 Mac OS X Snow Leopard 10.6（与 Windows 7 并存），除了 WiFi 之外都挺好的，折腾了好久才搞定，现在又有些记不清了，所以要赶紧留下印记，以免过几天就忘光了。&lt;/p&gt;
</summary><content type="html">
&lt;p&gt;半年前在 Dell Latitude E6400 上安装了 Mac OS X Snow Leopard 10.6（与 Windows
7 并存），除了 WiFi 之外都挺好的，折腾了好久才搞定，现在又有些记不清了，所以要赶紧留下印记，以免过几天就忘光了。&lt;/p&gt;
&lt;p&gt;不知道为什么，这次装 10.6 非常的费劲，尝试了好几个不同的版本（包括原版、iAntares、精简版等等），尝试了光盘安装、硬盘安装，尝试了 BootThink 引导、变色龙引导，用了一周多的时间才搞成功。相比之下，之前装 10.5.5～10.5.7 都非常容易呢。&lt;/p&gt;
&lt;p&gt;在 PC 上装 Mac 的教程满天飞，这里不打算详细讲述，就以跟 Dell
E6400 有关的部分和遇到的一些问题为主吧，这款机器似乎是最难装 Mac 的机器之一。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class="section" id="dell-latitude-e6400"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Dell Latitude E6400 硬件配置&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为 PC 装 Mac 系统最头疼的当然是硬件驱动了，所以在安装前要先搞清楚机器的硬件情况。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Chip set&lt;ul&gt;
&lt;li&gt;North Bridge: Intel Cantiga PM45&lt;/li&gt;
&lt;li&gt;Source Bridge: Intel 82801 IEM ICH9M-E&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BIOS: Phoenix 05/11/09&lt;/li&gt;
&lt;li&gt;CPU: Intel Core2 Duo P9600 2800MHz (10.5 x 267)&lt;/li&gt;
&lt;li&gt;Memory: 2G*2, 800MHz Dual&lt;/li&gt;
&lt;li&gt;Storage: Intel ICH9M-E/M SATA AHCI Controller&lt;/li&gt;
&lt;li&gt;Video: nVIDIA Quadro NVS160M (256MB)&lt;/li&gt;
&lt;li&gt;Audio:  IDT 92HD 71B7 @ Intel 82801 IB ICH9 - High Definition Audio
Controller [A-3] PCI&lt;/li&gt;
&lt;li&gt;Display: 1440x900&lt;/li&gt;
&lt;li&gt;Network&lt;ul&gt;
&lt;li&gt;Ethernet: Intel 82567LG Gigabit Network Connection&lt;/li&gt;
&lt;li&gt;WiFi: Intel WiFi Link 5300 AGN（最让人头疼的硬件，驱动无解）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;工具和准备工作&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;下载了 Mac OS X
10.6 原版光盘镜像（尝试了很多其他处理好的镜像，全都无法正常安装，最后还是选择用原版），我用的是 snowleopard_10a432_userdvd.dmg（网上到处都能下载，我就不发链接了），6.13G。这么大就不刻盘了，用光盘装还慢呢。&lt;/p&gt;
&lt;p&gt;用硬盘安装的话，一般要给磁盘上新建两个分区，一个放安装盘镜像，一个装 Mac。前者 6.3G 左右（不要格式化），后者视个人需要，一般至少 20G（NTFS 格式）。我用的 BootThink 引导似乎要求被引导的系统（包括安装镜像和已经装好的系统）在主分区上，但我的硬盘上没有那么多主分区可以用了（一块硬盘最多可以有四个主分区，我已经有了三个，分别是 Win
7 保留分区，Win
7 系统分区，数据分区），因此就把最后一个主分区名额留给了 Mac 系统，而把安装盘镜像放到了移动硬盘上。同样注意放安装盘镜像的分区不要格式化。&lt;/p&gt;
&lt;p&gt;接下来安装 HFS-Explorer（v0.21），运行，按 Ctrl+O（菜单 File-&amp;gt;Load file
system from
file...），选择下载的安装盘镜像，在弹出的对话框里选择 Apple_HFS 那项。加载之后点击菜单 Tool-&amp;gt;Create
disk image...，将生成的文件（.dmg）保存在某个 NTFS 分区上即可。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="hfs_explorer_hfs" src="https://blog.gocalf.com/images/2011/07/hfs_explorer_hfs.png"/&gt;
&lt;p class="caption"&gt;HFS-Explorer 选择 Partition&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="hfs_explorer_view" src="https://blog.gocalf.com/images/2011/07/hfs_explorer_view.png"/&gt;
&lt;p class="caption"&gt;在 HFS-Explorer 中查看安装盘镜像&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;使用 HFS-Explorer 把下载的安装盘镜像处理一下生成另外一个镜像，主要有三个作用：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;有些镜像格式无法被后面用到的安装助手识别，这个工具可以做一次格式转换；&lt;/li&gt;
&lt;li&gt;去掉原镜像的写保护，以便稍后替换 OSInstall（也可以直接下载一个别人替换过的镜像，那就不用装这个工具了，也可以跳过后面的 MacDriver）；&lt;/li&gt;
&lt;li&gt;可以对原镜像文件做检验。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来就要祭出 Leopard 硬盘安装助手（v0.3）了。它不需要安装，但在 Win
7 系统中必须以管理员身份运行（右键点击，选择 Run as
administrator）。载入刚才用 HFS-Explorer 生成的镜像文件，选择之前分好的 6.3G 左右未格式化的分区，并去掉三个复选框的勾（在 boot.ini 中加入 tboot；强制加入引导及启动代码；PC_EFI
V8）。点击“开始！”按钮，然后耐心等待。当进度条走满，日志中出现“Change
partition type to AF: Success”、“All done, have fun!”时就算成功了。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="lepoard-inshelper" src="https://blog.gocalf.com/images/2011/07/lepoard-inshelper.png"/&gt;
&lt;p class="caption"&gt;Leopard 硬盘安装助手&lt;/p&gt;
&lt;/div&gt;
&lt;div class="compound"&gt;
&lt;p class="compound-first"&gt;接下来要替换 OSInstall，这需要安装工具 MacDriver（v8.0.4.10），这是个收费软件。装好之后重启系统，就可以进入刚才用硬盘安装助手写入的 HFS 安装分区了。让 Windows 显示隐藏文件和系统文件，下载一个 PC 用的 OSInstall，替换掉&lt;/p&gt;
&lt;div class="compound-middle"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;X:\System\Library\PrivateFrameworks\Install.framework\Frameworks\OSInstall.framework\Versions\A\
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;p class="compound-last"&gt;里面的同名文件。这样做的目的是使得 Mac 可以安装在 MBR 分区表下（否则 Mac 只能装在 GPT（GUID）分区表下，但 Windows 默认都是用 MBR）。（还是直接下载一个已经替换好了的镜像吧，省的麻烦。）&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;最后还要装引导程序。以前我用的是变色龙引导程序，但这次总是出错，就改用 BootThink 了。觉得这个比变色龙还要好些吧。不过如果原有系统是 Win
7 的话，还稍微有一点儿麻烦，就是 Win
7 那个令人恶心的保留分区。虽然我们一般都把 Win
7 装在 C 盘，但在安装过程中，它会在 C 盘前面保留一个 100MB 左右的 NTFS 分区（卷标一般就叫 System
Reserved），而这个分区默认是不显示出来的（没有分配盘符）。如果把 BootThink 装在 C 盘，那有可能会无法进行引导。所以要把它装在那个保留分区里（幸好它体积不是很大）。在磁盘管理中找到那个保留分区，给它指定一个盘符（我习惯用 B），然后把 BootThink 装在这个分区中。（有人说把 C 盘标记为活动分区就可以启动 BootThink，但我没有成功。）安装之后在目标分区的根目录应该有一个文件夹 Darwin 和两个文件 btldr（系统文件）、btldr.mbr。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;准备驱动程序&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;网上那些破解过的 Mac 安装镜像里面通常都包含了各种驱动程序，在安装的时候选择需要的就可以了，但不知道为什么我这次怎么都装不成功，所以才用了原版的镜像。但原版镜像里没有 PC 的驱动程序，这就要借助 BootThink 了。用 BootThink 引导刚才制作的替换了 OSInstall 的硬盘安装分区，它就可以从 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\Darwin\System\LibrarySL\Extensions\&lt;/span&gt;&lt;/tt&gt; （我的是 &lt;tt class="docutils literal"&gt;B:\&lt;/tt&gt;）里面加载放在那里的驱动程序和补丁（不同版本的 Mac
OS 对应的目录也不太一样，这里就不多说了）。&lt;/p&gt;
&lt;p&gt;驱动的选择至关重要啊，选择的不好，轻则某个硬件不工作，重则四国、五国、风火轮（在系统加载时出现用四国或者五国文字写的提示信息，或者风火轮图标一直转却无法进入系统）。这里列出我选择的驱动和补丁。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;系统补丁&lt;ul&gt;
&lt;li&gt;fakesmc.kext：模拟苹果机的 SMC，必须的！&lt;/li&gt;
&lt;li&gt;NullCPUPowerManagement.kext：禁用电源管理，解决 IntelCPUPowerManagement.kext 的 HPET 错误。&lt;/li&gt;
&lt;li&gt;OpenHaltRestart.kext：解决重启或关机问题。&lt;/li&gt;
&lt;li&gt;OSXRestart.kext：解决重启问题。&lt;/li&gt;
&lt;li&gt;PlatformUUID.kext：解决 UUID 错误。&lt;/li&gt;
&lt;li&gt;Disabler.kext：屏蔽不能正常启动的补丁。&lt;/li&gt;
&lt;li&gt;IOAHCIBlockStorageInjector.kext：解决本地硬盘图标为橙色的补丁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Video&lt;ul&gt;
&lt;li&gt;NVinject.kext&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Audio&lt;ul&gt;
&lt;li&gt;IOAudioFamily.kext&lt;/li&gt;
&lt;li&gt;HDAEnabler.kext&lt;/li&gt;
&lt;li&gt;VoodooHDA.kext&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ethernet&lt;ul&gt;
&lt;li&gt;IONetworkingFamily.kext&lt;/li&gt;
&lt;li&gt;Intel82566MM.kext&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WiFi&lt;ul&gt;
&lt;li&gt;:-( 我那无解的无线网卡，凑合用了个 LegacyAppleAirPortBrcm4311.kext，不五国，也没效果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PS/2（鼠标、键盘、触摸板）&lt;ul&gt;
&lt;li&gt;ApplePS2Controller.kext（或者 VoodoPS2Controller.kext）&lt;/li&gt;
&lt;li&gt;AppleACPIPS2Nub.kext&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Battery&lt;ul&gt;
&lt;li&gt;VoodooBattery.kext&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bluetooth&lt;ul&gt;
&lt;li&gt;DellBluetoothHCI.kext&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SD Reader&lt;ul&gt;
&lt;li&gt;VoodooSDHC.kext&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PCMCIA&lt;ul&gt;
&lt;li&gt;IOPCIFamily.kext&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chip set&lt;ul&gt;
&lt;li&gt;AHCIPortInjector.kext：可以识别 Intel 芯片组的 AHCI。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;风扇&lt;ul&gt;
&lt;li&gt;IOACPIFamily.kext：解决部分笔记本风扇不正常问题，只支持 32 位。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;还有几个已经不记得是干什么用的了&lt;ul&gt;
&lt;li&gt;AppleRTC.kext&lt;/li&gt;
&lt;li&gt;OSvKernDSPLib.kext&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;安装&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;动手安装之前还要注意几件事情。&lt;/p&gt;
&lt;p&gt;首先是 Snow
Lopard 需要 SATA 硬盘支持，所以要确认 BIOS 中 SATA 模式设定为 AHCI（默认可能是 IRRT）。&lt;/p&gt;
&lt;p&gt;BootThink 的一些操作：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;c：Leopard 原版光盘启动；&lt;/li&gt;
&lt;li&gt;Alt：进入 startup manager，选取启动分区；&lt;/li&gt;
&lt;li&gt;Shift：安全模式；&lt;/li&gt;
&lt;li&gt;Ctrl+V（或 -v）：Verbose 模式；&lt;/li&gt;
&lt;li&gt;Ctrl+S：单用户模式；&lt;/li&gt;
&lt;li&gt;#g=WxHxDEPTH（如 1440x900x32）：设置分辨率；&lt;/li&gt;
&lt;li&gt;#g=~：取消分辨率设置；&lt;/li&gt;
&lt;li&gt;-32：以 32 位模式启动。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我的 E6400 用 64 位总是有些驱动有问题，只好用 32 位了。在安装和启动 Mac 的时候，都要在 BootThink 里输入 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-x32&lt;/span&gt;&lt;/tt&gt;，或者修改 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;B:\Darwin\com.apple.Boot.plist&lt;/span&gt;&lt;/tt&gt;，添加 Kernel
Flags，值为 &lt;tt class="docutils literal"&gt;arch=i386&lt;/tt&gt;。我的此文件内容如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;plist&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;EthernetBuiltIn&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Yes&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Graphics Mode&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;1440x900x32&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;GraphicsEnabler&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;y&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Instant Menu&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;No&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Kernel&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;mach_kernel&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Kernel Flags&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;arch=i386&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Timeout&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;UHCIreset&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Yes&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;device-properties&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;好了，重启电脑，进入 BootThink 引导，选择启动 Mac 安装盘分区。成功话可以看到苹果图标和风火轮，选择语言，然后就进入安装界面。这时候要对目标分区做格式化，点击菜单“实用工具 -&amp;gt; 磁盘工具...”，在对话框中选择之前格式化成 NTFS 的空白分区，将选择模式“Mac
OS 扩展（日志式）”，填写卷标，点击“抹掉”。成功之后关闭窗口，继续安装，接受软解许可协议，然后就是选择安装组件。有人建议不用选“打印机支持”，太占体积了。选好之后继续，选择刚才格式化好的目标分区，点击安装。&lt;/p&gt;
&lt;p&gt;如果是用硬盘安装的话，不用等太久就装好了。装好之后会自动重启，不过由于安装过程中，Windows 系统盘的活动分区属性被取消了，如果直接重启将无法进入 Windows，可以利用重启前的一点时间处理一下。点击菜单“实用工具 -&amp;gt; 终端”，用 diskutil 命令来设置活动分区。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# diskutil list
... blah blah ...（查看 C:\ 在哪里，比如我的在 /dev/disk0 分区 1）
# fdisk -e /dev/disk0
f 1
w
y
quit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重启电脑，进入 BootThink，这时候就可以看到安装好的 Mac 系统分区了，引导它启动即可（如果装的是 32 位，也没改 &lt;tt class="docutils literal"&gt;com.apple.Boot.plist&lt;/tt&gt;，就需要输入 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-x32&lt;/span&gt;&lt;/tt&gt; 以 32 位模式启动）。&lt;/p&gt;
&lt;p&gt;运气不背的话就可以顺利进入 Mac 系统了，声音、图像、有线网络、触摸板等全都正常，唯一的遗憾是无线网卡不能使用（也不知道这半年来出了新的驱动没）。可以买个 USB/PCMCIA 无线网卡，也可以像我一样扯根网线。&lt;/p&gt;
&lt;/div&gt;
</content><category term="操作系统"></category><category term="Hackintosh"></category></entry><entry><title>Google 图标：动态雕塑家 Calder 诞辰 113 周年</title><link href="https://blog.gocalf.com/google-doodle-calder" rel="alternate"></link><published>2011-07-22T18:33:00+08:00</published><updated>2011-08-03T21:45:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-07-22:/google-doodle-calder</id><summary type="html">&lt;p class="first last"&gt;现在 Google 经常会在它的 Doodle 中加入各种有趣的元素，今天这个就用到了 HTML5 的 Canvas，在支持 HTML5 Canvas 的浏览器里，可以看到 3D 的动态 Doodle，还可以拖动哦。为了便于以后查看和保存，我把这个 Doodle 相关的脚本扒下来，在此留存。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;现在 Google 经常会在它的 Doodle 中加入各种有趣的元素，今天这个就用到了 HTML5 的 Canvas，在支持 HTML5
Canvas 的浏览器里，可以看到 3D 的动态 Doodle，还可以拖动哦。为了便于以后查看和保存，我把这个 Doodle 相关的脚本扒下来，在此留存。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;今天（2011 年 7 月 22 日）是伟大的动态雕塑发明人 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Alexander_Calder"&gt;亚历山大·考尔德&lt;/a&gt; （&lt;a class="reference external" href="https://artsy.net/artist/alexander-calder"&gt;Alexander
Calder&lt;/a&gt;）诞辰 113 周年，Google 用它的 Doodle 为大家在浏览器上展示了 Calder 的动态雕塑作品 The
Star (1960)。原作如下图示。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="calder_the_star" src="https://blog.gocalf.com/images/2011/07/calder_the_star.jpg" /&gt;
&lt;p class="caption"&gt;亚历山大 · 考尔德动态雕塑作品 The Star (1960)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;当然我对艺术是一窍不通了，对 HTML5
Canvas 也一无所知。就像电视上有个广告词：“我们不生产水，我们只是大自然的搬运工”。我今天也只是把这个 Doodle 从 Google 主页上搬下来，以满足收藏的欲望。由于没有搜索框，我把雕塑阴影的位置调高了一些。&lt;/p&gt;
&lt;p&gt;注意，在 IE8 或 IE6（该淘汰了）中是无法看到 Canvas 的，只能看到静态的图片，请使用其他浏览器。另外可以点击 &lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/07/doodle_0722.html"&gt;doodle_0722_html&lt;/a&gt; 在单独的 HTML 页面中查看（方便下载）。&lt;/p&gt;
&lt;iframe frameborder="0" height="320" scrolling="no" src="https://blog.gocalf.com/assets/2011/07/doodle_0722.html" title="The Star" width="100%"&gt;&lt;/iframe&gt;</content><category term="互联网"></category><category term="Google"></category><category term="Doodle"></category></entry><entry><title>时针，分针，相对运动</title><link href="https://blog.gocalf.com/clock-hands-relative-motion" rel="alternate"></link><published>2011-07-18T21:29:00+08:00</published><updated>2011-08-03T20:59:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-07-18:/clock-hands-relative-motion</id><summary type="html">&lt;p class="first last"&gt;某人 6 点多从家出发，出门时时针和分针是 110 度角，7 点前回到家，时针和分针还是 110 度角。问这人出门多久？本文以这个简单的问题入手，介绍了利用相对运动解决时针、分针相关问题的方法。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;注意：本文涉及到的是小学、初中级别的问题，请高智商同学自动绕行。&lt;/p&gt;
&lt;p&gt;不知道为什么，我从小就对时钟感觉到头疼，类似于时针、分针在什么时刻重合、什么时候成九十度角之类的问题尤其感到无从下手。今天这篇文章用来纪念懵懂的曾经。&lt;/p&gt;
&lt;p&gt;感谢 Chunxu 同学提供的题目：&lt;/p&gt;
&lt;blockquote&gt;
某人 6 点多从家出发，出门时时针和分针是 110 度角，7 点前回到家，时针和分针还是 110 度角。问这人出门多久？&lt;/blockquote&gt;
&lt;!-- more --&gt;
&lt;p&gt;这个问题非常简单，设出门时间是 6 点 x 分，回家时间是 6 点 y 分，根据时针分针的旋转速度列出方程，联列求解，最后求出 y-x 便是答案。&lt;/p&gt;
&lt;p&gt;然而更简单的方法是借助于相对运动。分针每小时转一圈，其转速为 6 度/分；时针 12 小时转一圈，转速为 0.5 度/分。所以相对于时针而言，分针的转速是 6
- 0.5 =
5.5 度/分。根据题目，出门的时候分针比时针落后（顺时针方向为前方）110 度，而回家时超前时针 110 度，那么相对于时针，分针一共转了 220 度。因此经过的时间就是 220
/ 5.5 = 40 分钟。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="clock_40mins" src="https://blog.gocalf.com/images/2011/07/clock_40mins.png" /&gt;
&lt;p class="caption"&gt;6:12:44 至 6:52:44 是此人回家路上所经历的时间段&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;用类似的方法求解时针与分针的重合时刻也是非常简单的。比如问四点到五点之间，分针何时与时针重合。因为四点整的时候分针在时针后面 120 度，当二者重合时，分针相对于时针旋转了 120 度，耗时 120
/ 5.5 = 21 分 49.09 秒。所以重合的时刻是 4 点 21 分 49.09 秒（如下图示）。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;object data="https://blog.gocalf.com/images/2011/07/4h21m49s.svg" style="width: 284px;" type="image/svg+xml"&gt;
4 点 21 分 49.09 秒，时针与分针重合&lt;/object&gt;
&lt;p class="caption"&gt;4:21:49.09，时针与分针重合&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;据说微软也曾经拿时针、分针、秒针当过面试题，这东西确实非常简单，但有时候也确实挺让人头疼的。希望以后不会再被类似的问题困扰。&lt;/p&gt;
</content><category term="数学"></category><category term="Puzzle"></category><category term="Interview Question"></category></entry><entry><title>隐藏磁盘分区 Q</title><link href="https://blog.gocalf.com/hide-drive-q" rel="alternate"></link><published>2011-07-15T23:34:00+08:00</published><updated>2011-08-03T20:57:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-07-15:/hide-drive-q</id><summary type="html">&lt;p class="first last"&gt;本文介绍如果隐藏 Windows 7 中那讨厌的无法访问的磁盘分区 Q。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;在 Windows 7 操作系统中，有些用户可能会在我的电脑（My
Computer）中看到一个盘符为 &lt;strong&gt;Q&lt;/strong&gt; 的本地磁盘分区，在磁盘管理中看不到它，无法访问它，也无法删除它。这个恼人的分区图标虽然不会有什么实际的影响，但似乎总是在眼前晃悠，不得不让人想要立刻干掉它。其实要去掉它是非常容易的，让我们一起来看一下。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class="figure"&gt;
&lt;img alt="disk-q-unaccess" src="https://blog.gocalf.com/images/2011/07/disk-q-unaccess.png" /&gt;
&lt;p class="caption"&gt;无法访问的虚拟磁盘分区 Q&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;这个磁盘分区 Q 是 Microsoft Application Virtualization
Desktop（App-V）使用的一个虚拟分区，我也不记得是装了什么之后它就出现了。要隐藏它只要以下几个简单的步骤：&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="disk-q-registry" src="https://blog.gocalf.com/images/2011/07/disk-q-registry.png" /&gt;
&lt;p class="caption"&gt;修改注册表，添加高亮的两个 DWORD 值&lt;/p&gt;
&lt;/div&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;按 Win+R，输入 regedit 并回车，打开注册表编辑器；&lt;/li&gt;
&lt;li&gt;找到 HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer&lt;/li&gt;
&lt;li&gt;在 Explorer 这个键值下添加如下两个 DWORD（32 位）值：&lt;ol class="arabic"&gt;
&lt;li&gt;第一个名为 &lt;tt class="docutils literal"&gt;NoDrives&lt;/tt&gt;，值为 16 进制的 &lt;tt class="docutils literal"&gt;10000&lt;/tt&gt;，也就是十进制的 &lt;tt class="docutils literal"&gt;65536&lt;/tt&gt;；&lt;/li&gt;
&lt;li&gt;第二个名为 &lt;tt class="docutils literal"&gt;NoViewOnDrive&lt;/tt&gt;，值同样是 16 进制的 &lt;tt class="docutils literal"&gt;10000&lt;/tt&gt;；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;重启一下 explorer 即可。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;再次进入我的电脑，就可以看到那讨厌的 Q 分区消失了。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="disk-q-hidden" src="https://blog.gocalf.com/images/2011/07/disk-q-hidden.png" /&gt;
&lt;p class="caption"&gt;虚拟分区 Q 被隐藏&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;如果对注册表不是非常熟悉的话，请千万谨慎操作。另外可以参考微软官方文档 &lt;a class="reference external" href="http://support.microsoft.com/kb/931626/en-us"&gt;How to hide and to restrict access to the App-V (SoftGrid) client drive letter&lt;/a&gt;，这里有更加细致入微的步骤说明，以及其他殊途同归的方法。&lt;/p&gt;
&lt;p&gt;有人或许会对上面添加的两个 16 进制 10000 感兴趣，为什么是这个数，它有什么特殊含义？其实 IT 人很容易发现这个数在二进制中就是 1 后面跟 16 个零，如果看作 bit
mask 的话，就是从最低位开始的第 17 位；而 Q 在字母表中恰好也是第 17 个字母。所以如果想要隐藏别的分区（Why?
:-p），就根据分区盘符的字母顺序修改上述两个 16 进制数值即可。比如改成 16 进制的 4（bit
mask 第三位），那 C 盘就消失了：&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="disk-c-hidden" src="https://blog.gocalf.com/images/2011/07/disk-c-hidden.png" /&gt;
&lt;p class="caption"&gt;用 16 进制 4 隐藏磁盘分区 C&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在微软的 Knowledge
Base 中也提供了类似的隐藏磁盘分区的方法，其中也有详细的磁盘分区盘符与二进制数之间的对应关系，详情请见 &lt;a class="reference external" href="http://support.microsoft.com/kb/231289"&gt;Using Group Policy Objects to hide specified drives&lt;/a&gt;。&lt;/p&gt;
</content><category term="操作系统"></category><category term="Windows 7"></category></entry><entry><title>Windows 7 上帝模式</title><link href="https://blog.gocalf.com/win7-god-mode" rel="alternate"></link><published>2011-07-14T17:48:00+08:00</published><updated>2011-08-03T20:57:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-07-14:/win7-god-mode</id><summary type="html">&lt;p class="first last"&gt;在 Windows 7 里，“上帝” 能做什么？&lt;/p&gt;
</summary><content type="html">&lt;p&gt;在 Windows 7 里，“上帝” 能做什么？&lt;/p&gt;
&lt;p&gt;一个简单的方法就可以调出调整 Windows 7 系统里全部功能的面板，这个小小的技巧可以让你控制你电脑中的一切。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;启动“上帝模式”的方法非常简单，随便找个地方建立一个文件夹，将其命名为 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;GodMode.{ED7BA470-8E54-465E-825C-99712043E01C}&lt;/span&gt;&lt;/tt&gt;，当然这里的“GodMode”不是必须的，可以选择任何喜欢的名字，起作用的是小数点后面的 GUID。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="创建 GodMode 文件夹" src="https://blog.gocalf.com/images/2011/07/godmode1.png" /&gt;
&lt;p class="caption"&gt;创建 GodMode 文件夹&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;回车之后，“上帝”就现身了。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="创建 GodMode 文件夹" src="https://blog.gocalf.com/images/2011/07/godmode2.png" /&gt;
&lt;p class="caption"&gt;Win7 God Mode Overview&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;进入此文件夹，一坨坨系统设置就在那里恭候大驾了。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="创建 GodMode 文件夹" src="https://blog.gocalf.com/images/2011/07/godmode3.png" /&gt;
&lt;p class="caption"&gt;Windows 7 上帝模式&lt;/p&gt;
&lt;/div&gt;
</content><category term="操作系统"></category><category term="Windows 7"></category></entry><entry><title>数学趣题 WWWDOT-GOOGLE=DOTCOM</title><link href="https://blog.gocalf.com/puzzle-wwwdot-google-dotcom" rel="alternate"></link><published>2011-07-13T22:49:00+08:00</published><updated>2011-08-03T20:56:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-07-13:/puzzle-wwwdot-google-dotcom</id><summary type="html">&lt;p class="first last"&gt;一道关于 Google 的数字游戏题。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;以前见到一道关于 Google 的数字游戏题目，要求解开隐秘的等式 &lt;tt class="docutils literal"&gt;WWWDOT - GOOGLE = DOTCOM&lt;/tt&gt;，每个字母代表十个阿拉伯数字中的一个且各不相同，每个六位数字最高位都不是 0，当然显而易见地，E 和 M 是可以互换的。对于一个程序员，解决这个问题是很容易的，但今天我要讲讲小学生是怎么解决这个问题的。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;把目标等式写成小学生习惯的竖式：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{matrix}
&amp;amp; W &amp;amp; W &amp;amp; W &amp;amp; D &amp;amp; O &amp;amp; T\\
- &amp;amp; G &amp;amp; O &amp;amp; O &amp;amp; G &amp;amp; L &amp;amp; E\\
\hline &amp;amp; D &amp;amp; O &amp;amp; T &amp;amp; C &amp;amp; O &amp;amp; M
\end{matrix}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;先罗嗦一下，对于竖式中的任何一列，X - Y = Z，只有四种情况：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;没有被低位借位，也不向高位借位，也就是真正的 X - Y = Z；&lt;/li&gt;
&lt;li&gt;没有被低位借位，但向高位借了一位，即 (10+X) - Y = Z，或记做 &lt;span class="math"&gt;\(X_{+} - Y = Z\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;被低位借位，但不向高位借位，即 (X-1) - Y = Z，或记做 &lt;span class="math"&gt;\(X^{-} - Y = Z\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;被低位借位，也向高位借位，即 (10+X-1) - Y = Z，或记做 &lt;span class="math"&gt;\(X^{-}_{+} - Y = Z\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来就找竖式中的特殊情况。先看十位 O - L = O，在上述四种情况中，只有两种是可能的，即 &lt;span class="math"&gt;\(O^{-}_{+} - L = O\Rightarrow L=9\)&lt;/span&gt; 和 &lt;span class="math"&gt;\(O - L = O \Rightarrow L=0\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;然后看千位和万位，被减数都是 W，减数都是 O，但结果却不同，说明在这两位的借位情况肯定不一样，也就只有两种可能，再结合前面提到的十位上的两种情况，可以得到：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;span class="math"&gt;\(W_{+}-O=T\)&lt;/span&gt;，&lt;span class="math"&gt;\(W^{-}_{+}-O=O\)&lt;/span&gt;，&lt;span class="math"&gt;\(W^{-}-G=D\)&lt;/span&gt;&lt;ol class="arabic"&gt;
&lt;li&gt;L = 0，T - E = M，D - G = C；&lt;/li&gt;
&lt;li&gt;L = 9，&lt;span class="math"&gt;\(T_{+} - E = M\)&lt;/span&gt;，&lt;span class="math"&gt;\(D^{-} - G = C\)&lt;/span&gt;；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(W^{-}-O=T\)&lt;/span&gt;，W - O = O，W - G = D`&lt;ol class="arabic"&gt;
&lt;li&gt;L = 0，T - E = M，&lt;span class="math"&gt;\(D_{+} - G = C\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;L = 9，&lt;span class="math"&gt;\(T_{+} - E = M\)&lt;/span&gt;，&lt;span class="math"&gt;\(D^{-}_{+} - G = C\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;先看情况 1，可以推出：T = O + 1， W = 2 * O - 9，G + D = W - 1，G &amp;lt; D（因为百位上的减法没有向千位借位）。再根据 W、O、D 都不能为零，因此有 1
&amp;lt;= G &amp;lt; D &amp;lt;= W - 2 &amp;lt;= 7，4 &amp;lt;= G + D + 1 = W = 2 * O - 9 &amp;lt;=
8，于是 7 &amp;lt;= O &amp;lt;= 8，这样的话：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;如果 O = 7，那么 G + D = 2 * O - 10 =
4，得到 G = 1，D = 3。那如果 L =
9，就有 C = (D - 1) - G = 1 =
G，不符合题目。如果 L = 0，则 C =
2，E + M = T = O + 1 = 8 = (1 + 7) or (2 + 6) or (3 +
5)，无法给 E、M 找到不重复的数字。&lt;/li&gt;
&lt;li&gt;因此只能是 O = 8，T = 9，L = 0，又有 G + D = 5，D -
G = C，可以得到 G、D、C 分别是 1、5、4。于是 E + M = T =
9，得到 E、M 分别为 3、6 或者 6、3。得到此题的一组解。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用同样的方法分析情况 2，可以得到 W = 2 * O，T = O - 1，G + D = W，G
&amp;gt; D&amp;nbsp;，因此有 1 &amp;lt;= D &amp;lt; G &amp;lt;= W - 1 &amp;lt;= 8，3 &amp;lt;= D +
E &amp;lt;= W = 2 * O &amp;lt;= 9，得到 2 &amp;lt;= O &amp;lt;=
4。但是根据 C 与 D 和 G 的关系不难发现，不论 O、L 取什么值，都无法找到不重复的 C 值。因此第二种情况无解。&lt;/p&gt;
&lt;div class="compound"&gt;
&lt;p class="compound-first"&gt;综上，可以得到此问题唯一的一对解：O = 8，T = 9，W = 7，G = 1，D =
5，L = 0，C = 4，{E, M} = {3, 6}，代入原方程得到：&lt;/p&gt;
&lt;div class="compound-middle math"&gt;
\begin{equation*}
\begin{matrix}
&amp;amp; 7 &amp;amp; 7 &amp;amp; 7 &amp;amp; 5 &amp;amp; 8 &amp;amp; 9\\
- &amp;amp; 1 &amp;amp; 8 &amp;amp; 8 &amp;amp; 1 &amp;amp; 0 &amp;amp; 3\\
\hline &amp;amp; 5 &amp;amp; 8 &amp;amp; 9 &amp;amp; 4 &amp;amp; 8 &amp;amp; 6
\end{matrix}
\end{equation*}
&lt;/div&gt;
&lt;p class="compound-middle"&gt;或者&lt;/p&gt;
&lt;div class="compound-last math"&gt;
\begin{equation*}
\begin{matrix}
&amp;amp; 7 &amp;amp; 7 &amp;amp; 7 &amp;amp; 5 &amp;amp; 8 &amp;amp; 9\\
- &amp;amp; 1 &amp;amp; 8 &amp;amp; 8 &amp;amp; 1 &amp;amp; 0 &amp;amp; 6\\
\hline &amp;amp; 5 &amp;amp; 8 &amp;amp; 9 &amp;amp; 4 &amp;amp; 8 &amp;amp; 3
\end{matrix}
\end{equation*}
&lt;/div&gt;
&lt;/div&gt;
</content><category term="数学"></category><category term="Puzzle"></category><category term="Google"></category></entry><entry><title>关于 LaTeX 插件再啰嗦几句</title><link href="https://blog.gocalf.com/latex-plugin-more" rel="alternate"></link><published>2011-07-11T23:43:00+08:00</published><updated>2011-08-03T20:52:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-07-11:/latex-plugin-more</id><summary type="html">&lt;p class="first last"&gt;对 LaTeX for WordPress 插件做了一点小小的改动，修复了在启用 MathJax 时无法显示公式源码的问题。还将公式的 shortcode 限定为 latex。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;在 &lt;a class="reference external" href="https://blog.gocalf.com/latex-wordpress"&gt;WordPress 数学公式插件 LaTeX&lt;/a&gt; 中推荐了 Zhiqiang 同学的 WordPress 插件 &lt;a class="reference external" href="http://wordpress.org/extend/plugins/latex/"&gt;LaTeX for WordPress&lt;/a&gt;，这个插件可以方便地以 MathJax 或者图片方式展示文章中的 LaTeX 公式，效果美观，使用方便。&lt;/p&gt;
&lt;p&gt;不过由于使用习惯不同，我在使用这个插件的过程中也遇到了一些问题，于是对这个插件做了一点小小的修改，记录在此。&lt;/p&gt;
&lt;p&gt;这次修改主要要解决两个问题：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;在启用 MathJax 的情况下，修复 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$$...!$$&lt;/span&gt;&lt;/tt&gt; 无法显示公式源码的问题。&lt;/li&gt;
&lt;li&gt;限制公式的修饰符为 &lt;tt class="docutils literal"&gt;[latex]&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;[/latex]&lt;/tt&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- more --&gt;
&lt;p&gt;根据 &lt;a class="reference external" href="http://wordpress.org/extend/plugins/latex/"&gt;LaTeX for WordPress&lt;/a&gt; 主页上的说明，如果不想对公式进行渲染，只显示公式的源码，需要在第二个 &lt;tt class="docutils literal"&gt;$$&lt;/tt&gt; 前面加 &lt;tt class="docutils literal"&gt;!&lt;/tt&gt;。但在实际使用中发现开启了 MathJax 的时候无法实现这一效果。仔细看了一下 MathJax 的文档，原来虽然插件把 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$$a^2+b^2+c^2!$$&lt;/span&gt;&lt;/tt&gt; 这样的代码转换成了 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\(a^2+b^2+c^2!\)&lt;/span&gt;&lt;/tt&gt;，但后者又被 MathJax 的 JavaScript 给渲染成 &lt;span class="math"&gt;\(a^2+b^2+c^2\)&lt;/span&gt; 了。而要解决这个问题也很简单，只要给页面的 &lt;tt class="docutils literal"&gt;body&lt;/tt&gt; 标签添加一个 &lt;tt class="docutils literal"&gt;tex2jax_ignore&lt;/tt&gt; 的 class，就可以阻止 MathJax 的处理（参见 &lt;a class="reference external" href="http://www.mathjax.org/docs/1.1/options/tex2jax.html"&gt;The tex2jax Preprocessor&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;以我现在使用的 LightWord 主题为例，修改 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wp-content/themes/lightword/header.php&lt;/span&gt;&lt;/tt&gt;，把 &lt;code class="php"&gt;&lt;span class="x"&gt;&amp;lt;body &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nx"&gt;body_class&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; 改成 &lt;code class="php"&gt;&lt;span class="x"&gt;&amp;lt;body &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nx"&gt;body_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'tex2jax_ignore'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; 即可。&lt;/p&gt;
&lt;p&gt;至于公式的修饰符，插件支持 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\(...\)&lt;/span&gt;&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\[...\]&lt;/span&gt;&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$$...$$&lt;/span&gt;&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[latex]...[/latex]&lt;/span&gt;&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[tex]...[/tex]&lt;/span&gt;&lt;/tt&gt;，但我还是担心这样的代码在一些程序源代码中也很容易出现（比如正则表达式），所以还是决定只用 latex 作为标记。这个修改很简单，只要对 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/wp-content/plugins/latex/latex.php&lt;/span&gt;&lt;/tt&gt; （v3.1）做如下改动即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;108c108,109
&amp;lt; $regex = &amp;#39;#\$\$(.*?)\$\$#si&amp;#39;;
&lt;span class="gd"&gt;---&lt;/span&gt;
&amp;gt; // $regex = &amp;#39;#\$\$(.*?)\$\$#si&amp;#39;;
&amp;gt; $regex = &amp;#39;#\[latex\](.*?)\[/latex\]#si&amp;#39;;
110c111
&amp;lt; $toParse = str_replace(array(&amp;quot;\(&amp;quot;, &amp;quot;\)&amp;quot;, &amp;quot;\[&amp;quot;, &amp;quot;\]&amp;quot;, &amp;quot;[latex]&amp;quot;, &amp;quot;[tex]&amp;quot;, &amp;quot;[/latex]&amp;quot;, &amp;quot;[/tex]&amp;quot;), array(&amp;quot;$$&amp;quot;, &amp;quot; $$&amp;quot;, &amp;quot;$$!&amp;quot;, &amp;quot; $$&amp;quot;, &amp;quot;$$&amp;quot;, &amp;quot; $$&amp;quot;, &amp;quot;$$&amp;quot;, &amp;quot; $$&amp;quot;), $toParse);
&lt;span class="gd"&gt;---&lt;/span&gt;
&amp;gt; // $toParse = str_replace(array(&amp;quot;\(&amp;quot;, &amp;quot;\)&amp;quot;, &amp;quot;\[&amp;quot;, &amp;quot;\]&amp;quot;, &amp;quot;[latex]&amp;quot;, &amp;quot;[/latex]&amp;quot;, &amp;quot;[tex]&amp;quot;, &amp;quot;[/tex]&amp;quot;), array(&amp;quot;$$&amp;quot;, &amp;quot; $$&amp;quot;, &amp;quot;$$!&amp;quot;, &amp;quot; $$&amp;quot;, &amp;quot;$$&amp;quot;, &amp;quot; $$&amp;quot;, &amp;quot;$$&amp;quot;, &amp;quot; $$&amp;quot;), $toParse);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样修改之后，依旧支持插件原本的 inline、single
line 以及显示源码的处理。要在单独的一行中显示公式，就在 &lt;tt class="docutils literal"&gt;[latex]&lt;/tt&gt; 后面加 &lt;tt class="docutils literal"&gt;!&lt;/tt&gt;；如果要显示公式源码，就在 &lt;tt class="docutils literal"&gt;[/latex]&lt;/tt&gt; 前面加 &lt;tt class="docutils literal"&gt;!&lt;/tt&gt;。&lt;/p&gt;
&lt;p&gt;当然也期待 Zhiqiang 进一步完善插件，给用户提供更方便的设置选项。&lt;/p&gt;
</content><category term="建站"></category><category term="WordPress LaTeX"></category><category term="WordPress Plugin"></category></entry><entry><title>iPad 2 iOS 4.3.3 可以越狱了</title><link href="https://blog.gocalf.com/ipad2-433-jailbreak" rel="alternate"></link><published>2011-07-07T14:32:00+08:00</published><updated>2011-08-03T20:41:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-07-07:/ipad2-433-jailbreak</id><summary type="html">&lt;p class="first last"&gt;iOS 4.3.3 可以越狱了。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;原以为 iPad
2 的越狱会遥遥无期，没想到突然就传出已经可以越狱的消息，大神 Comex 又一次找到了 PDF 漏洞，跟去年的 iPhone4 越狱一样，无需连接电脑只要有 WiFi 就可以。&lt;/p&gt;
&lt;p&gt;不过现在还只有 iOS 4.3.3 可以越狱，低版本没有这个漏洞。低版本的就备份一下 shsh 之后赶紧升级吧。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;步骤非常简单：&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;确认当前固件版本是 iOS 4.3.3 (8J2)（Settings-&amp;gt;General-&amp;gt;About-&amp;gt;Version）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;开启浏览器 Safari。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;在地址栏中敲入 &lt;a class="reference external" href="http://www.jailbreakme.com"&gt;http://www.jailbreakme.com&lt;/a&gt; （上次 iPhone
4 也是这样的），打开页面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;在左侧 Cydia 图标下方可以看到有个 FREE 按钮（据说以后 iOS 越狱将要收费，似乎看到前兆了），点击。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;FREE 按钮变成 INSTALL，再点击。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Safari 被自动关闭，在桌面上可以看到出现了 Cydia 的图标，并且正在下载中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;等待下载完成，打开 Cydia，越狱成功。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.gocalf.com/images/2011/07/cydia-ipad2-ios433.jpg"&gt;&lt;img alt="cydia-ipad2-ios433" src="https://blog.gocalf.com/images/2011/07/cydia-ipad2-ios433-225x300.jpg" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;Cydia on iPad2 iOS 4.3.3&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;如果想装盗版的软件，可以添加 hackluo.us 源，地址是 &lt;a class="reference external" href="http://cydia.hackluo.us"&gt;http://cydia.hackluo.us&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;在这个源中找到 AppSync for
4.0+，安装即可。&lt;a class="reference external" href="http://bbs.weiphone.com"&gt;weiphone 网&lt;/a&gt; 上说安装威锋源 &lt;a class="reference external" href="http://apt.weiphone.com"&gt;http://apt.weiphone.com&lt;/a&gt; 的 AppSync-for-4.0+，不过很多人都反映这个在安装的时候会出现 Size
Mismatch。我还是推荐从 hackluo.us 源安装。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;另外还可以安装 Installous
4（也在 hackluo.us 源中），利用这个软件就可以方便地搜索、下载、安装和更新盗版的 app 了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;最后还是要罗嗦一句，提倡正版。大多数 apps 都不贵，如果觉得好就买一个吧。越狱是为了把 iPad 玩的更好，而不仅仅是为了装盗版软件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content><category term="数码电子"></category><category term="iOS JailBreak"></category></entry><entry><title>为你的 WordPress 站点添加 LaTeX 支持</title><link href="https://blog.gocalf.com/wordpress-latex-old" rel="alternate"></link><published>2011-07-02T23:55:00+08:00</published><updated>2011-08-03T22:20:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-07-02:/wordpress-latex-old</id><summary type="html">&lt;p class="first last"&gt;如果你的博客跟我们这个一样，也是用 WordPress 系统搭建的；如果你跟我一样，也希望可以在 Blog 中用 LaTeX 书写数学公式，那么这篇文章或许对你有所帮助。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;注：本文是通过 Google
Reader 从已故的博客 &lt;a class="reference external" href="http://www.zhongqingju.com"&gt;钟磬居&lt;/a&gt;（链接已失效）中恢复出来的（原文地址 &lt;a class="reference external" href="http://www.zhongqingju.com/?p=604"&gt;http://www.zhongqingju.com/?p=604&lt;/a&gt;）。目前在 GoCalf 博客中效力的 LaTeX 插件是 &lt;a class="reference external" href="http://zhiqiang.org/"&gt;Zhiqiang&lt;/a&gt; 开发的 &lt;a class="reference external" href="http://wordpress.org/extend/plugins/latex/"&gt;LaTeX for WordPress&lt;/a&gt;。相关内容请见：&lt;a class="reference external" href="https://blog.gocalf.com/latex-wordpress"&gt;WordPress 数学公式插件 LaTeX&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;======== 分隔符 ========&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;关键词：WordPress，Blog，LaTeX，插件；&lt;/li&gt;
&lt;li&gt;适用人群：了解 LaTex，需要在 WordPress 搭建的 Blog 内用 LaTeX 书写数学公式的人；&lt;/li&gt;
&lt;li&gt;平台：WordPress 2.x。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你的博客跟我们这个一样，也是用 WordPress 系统搭建的；如果你跟我一样，也希望可以在 Blog 中用 LaTeX 书写数学公式，那么这篇文章或许对你有所帮助。&lt;/p&gt;
&lt;p&gt;我们这个博客没有内建的对 LaTeX 的支持，为了能够在文章中显示数学公式，有三种方法可以使用：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;利用 LaTeX 软件或在线服务（如 &lt;a class="reference external" href="http://www.forkosh.com/mimetex.html"&gt;mimetex&lt;/a&gt;，&lt;a class="reference external" href="http://www.codecogs.com/components/equationeditor/equationeditor.php"&gt;LaTeX Equation Editor&lt;/a&gt;）生成公式的图片，将图片上传到自己的站点或者 PicasaWeb，然后在文章中插入该图片；&lt;/li&gt;
&lt;li&gt;为自己的站点安装 LaTeX 的相关软件，使其可以解析 LaTeX 并生成图片；&lt;/li&gt;
&lt;li&gt;利用插件（&lt;a class="reference external" href="http://en.dahnielson.com/2006/09/mimetex-plugin.html"&gt;dahnielson_mimetex&lt;/a&gt;），动态地向公开的服务发出请求，获取公式图片并显示。&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- more --&gt;
&lt;p&gt;如果你一年也写不了一两个数学公式，那么用第一种方法最方便了，避免了在服务器上安装各种各样的软件或插件。但如果需要频繁写公式，那这个方法显然太麻烦，每个公式要到生成一张图片，上传，插入；修改公式的时候还要再重复一遍。&lt;/p&gt;
&lt;p&gt;第二个方法比较可靠的，但也相当麻烦（对于我这种新手来说）。需要在服务器上安装 LaTeX 和 ImageMagick 这两个软件，然后 &lt;a class="reference external" href="http://sixthform.info/steve/wordpress/wp-content/uploads/wp-latexrender.zip"&gt;下载 wp-latexrender 插件&lt;/a&gt; 并安装，进行一系列配置之后，你的站点就可以解析 LaTeX 并生成图片了。如果你的服务器上已经装了这两个软件，那就不用等了，直接用吧，要不然的话还是看看下一个方法。&lt;/p&gt;
&lt;p&gt;第三个方法是用 &lt;a class="reference external" href="http://en.dahnielson.com/2006/09/mimetex-plugin.html"&gt;dahnielson_mimetex&lt;/a&gt; 插件，它会向指定的服务器发送请求，获取公式所对应的图片。可惜插件默认使用的服务失效了，如果你的站点可以执行 cgi 程序，那么可以访问 &lt;a class="reference external" href="http://www.forkosh.com/mimetex.html"&gt;这里&lt;/a&gt; 了解如何安装 cgi
mimetex。如果你的站点没法执行 cgi 程序，那么可以试一试我现在使用的方法：&lt;/p&gt;
&lt;p&gt;wordpress.com 的用户都可以在博客中使用一对 &lt;tt class="docutils literal"&gt;$&lt;/tt&gt; 来书写 LaTeX，在 &lt;a class="reference external" href="http://support.wordpress.com/latex/"&gt;http://support.wordpress.com/latex/&lt;/a&gt; 中有介绍。我的方法就是修改 dahnielson_mimetex，让其调用 wordpress.com 的 LaTeX 服务来生成图片。由于后者比 mimetex 多了一些控制图片颜色和大小的参数，因此要在 dahnielson_mimetex 中做出相应的修改。&lt;/p&gt;
&lt;p&gt;首先下载 &lt;a class="reference external" href="http://en.dahnielson.com/2006/09/mimetex-plugin.html"&gt;dahnielson_mimetex v1.2&lt;/a&gt;，将其安装到博客上，然后对其进行如下的编辑。&lt;/p&gt;
&lt;p&gt;一共只有五处简单的修改，第一处是修改 description，把新加的参数写进去，以免日后忘记：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;5,7c5,7
&amp;lt; Description: Use &amp;amp;lt;tex&amp;amp;gt;&amp;amp;lt;/tex&amp;amp;gt; tags to embed LaTeX math in posts, see the &amp;lt;a href=&amp;quot;http://www.forkosh.com/mimetex.html&amp;quot;&amp;gt;mimeTeX manual&amp;lt;/a&amp;gt; for details.
&amp;lt; Version: 1.2
&amp;lt; Author: Anders Dahnielson
&lt;span class="gd"&gt;---&lt;/span&gt;
&amp;gt; Description: Use &amp;amp;lt;tex bg=&amp;quot;000000~ffffff&amp;quot; fg=&amp;quot;000000~ffffff&amp;quot; sz=&amp;quot;-4~4&amp;quot; escaped=&amp;quot;true|false&amp;quot;&amp;amp;gt;&amp;amp;lt;/tex&amp;amp;gt; tags to embed LaTeX math in posts.
&amp;gt; Version: 1.2.1
&amp;gt; Author: Anders Dahnielson; Modified by calf (April 12, 2009)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个插件最初的语法只是 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;tex&amp;gt;&amp;lt;/tex&amp;gt;&lt;/span&gt;&lt;/tt&gt;，我给它添加了四个参数：&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;bg&lt;/dt&gt;
&lt;dd&gt;设定图片的背景色，格式为六个十六进制字符，范围 000000 到 ffffff，默认值为 ffffff 即白色&lt;/dd&gt;
&lt;dt&gt;fg&lt;/dt&gt;
&lt;dd&gt;设定图片的前景色，格式为六个十六进制字符，范围 000000 到 ffffff，默认值为 000000 即黑色&lt;/dd&gt;
&lt;dt&gt;sz&lt;/dt&gt;
&lt;dd&gt;设定图片的大小，格式为整数，范围 -4 到 4，默认值为 0 即正常大小&lt;/dd&gt;
&lt;dt&gt;escaped&lt;/dt&gt;
&lt;dd&gt;设定公式中的 &amp;lt;、&amp;gt;、&amp;amp; 等符号是否是 html 转义的（即用 &amp;amp;lt;、&amp;amp;gt;、&amp;amp;amp; 表示），可取值为 true 或 false，默认值为 false 即未转义的&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;第二处修改是正则表达式，在 dahnielson_mimetex 类的 parse 函数中，修改过的正则表达式可以匹配刚刚提到的四个参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;32c32,33
&amp;lt; $regex = &amp;#39;#&amp;lt;tex&amp;gt;(.*?)&amp;lt;/tex&amp;gt;#si&amp;#39;;
&lt;span class="gd"&gt;---&lt;/span&gt;
&amp;gt; $regex = &amp;#39;#&amp;lt;tex(?:s|bg=[&amp;quot;&amp;#39;]([w]+)[&amp;quot;&amp;#39;]|fg=[&amp;quot;&amp;#39;]([w]+)[&amp;quot;&amp;#39;]|&amp;#39;.
&amp;gt; &amp;#39;sz=[&amp;quot;&amp;#39;]([0-9+-]+)[&amp;quot;&amp;#39;]|escaped=[&amp;quot;&amp;#39;](true|false)?[&amp;quot;&amp;#39;])*&amp;gt;(.*?)&amp;lt;/tex&amp;gt;#si&amp;#39;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第三处修改是提取公式文本和参数，也就是对上面正则表达式的匹配结果做处理：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;38,40c39,50
&amp;lt; $formula_text = $match[1];
&amp;lt; $formula_hash = md5($formula_text);
&amp;lt; $formula_filename = &amp;#39;tex_&amp;#39;.$formula_hash.&amp;#39;.gif&amp;#39;;
&lt;span class="gd"&gt;---&lt;/span&gt;
&amp;gt; $formula_bg = $match[1];
&amp;gt; if (!$formula_bg) $formula_bg = &amp;#39;ffffff&amp;#39;;
&amp;gt; $formula_fg = $match[2];
&amp;gt; if (!$formula_fg) $formula_fg = &amp;#39;000000&amp;#39;;
&amp;gt; $formula_sz = $match[3];
&amp;gt; if (!$formula_sz) $formula_sz = &amp;#39;0&amp;#39;;
&amp;gt; $escaped = $match[4];
&amp;gt; $formula_text = $match[5];
&amp;gt; if ($escaped == &amp;#39;true&amp;#39;) $formula_text = htmlspecialchars_decode($formula_text);
&amp;gt; $formula_text_html = htmlspecialchars($formula_text);
&amp;gt; $formula_hash = md5($formula_text.&amp;#39;_&amp;#39;.$formula_bg.&amp;#39;_&amp;#39;.$formula_fg.&amp;#39;_&amp;#39;.$formula_sz.&amp;#39;_1.2.1&amp;#39;);
&amp;gt; $formula_filename = &amp;#39;tex_&amp;#39;.$formula_hash.&amp;#39;.png&amp;#39;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里我添加了一个变量 &lt;tt class="docutils literal"&gt;$formula_text_html&lt;/tt&gt;，用来记录 html 转义过的公式内容，稍后会看到这样做的目的。&lt;/p&gt;
&lt;p&gt;第四处是设置 LaTeX 服务地址，原先 forkosh.dreamhost.com 的服务已经不能用了（很简短的公式还行，稍微复杂的公式都没法得到想要的结果），改成 l.wordpress.com 的服务：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;49c59,61
&amp;lt; $mimetex_host = curl_init(&amp;#39;http://www.forkosh.dreamhost.com/cgi-bin/mimetexpublic.cgi?formdata=&amp;#39;.urlencode($formula_text));
&lt;span class="gd"&gt;---&lt;/span&gt;
&amp;gt; $req_url = &amp;#39;http://l.wordpress.com/latex.php?latex=&amp;#39;.urlencode($formula_text).
&amp;gt; &amp;#39;&amp;amp;bg=&amp;#39;.urlencode($formula_bg).&amp;#39;&amp;amp;fg=&amp;#39;.urlencode($formula_fg).&amp;#39;&amp;amp;s=&amp;#39;.urlencode($formula_sz);
&amp;gt; $mimetex_host = curl_init($req_url);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后一处修改是展示获取到的图片。我给 img 标签加了 class 属性，便于修改样式。添加了 title 属性，当鼠标放在图片上时，可以看到公式内容。注意这里 alt 和 title 都是用 html 转义后的公式内容，这样可以避免公式中的一些特殊字符把 html 结构搞乱：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;58c70
&amp;lt; return &amp;quot;&amp;lt;img src=&amp;quot;$cache_formula_url&amp;quot; alt=&amp;quot;$formula_text&amp;quot; /&amp;gt;&amp;quot;;
&lt;span class="gd"&gt;---&lt;/span&gt;
&amp;gt; return &amp;quot;&amp;lt;img class=&amp;quot;mimetex&amp;quot; src=&amp;quot;$cache_formula_url&amp;quot; alt=&amp;quot;$formula_text_html&amp;quot; title=&amp;quot;$formula_text_html&amp;quot; /&amp;gt;&amp;quot;;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;下载 &lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/07/dahnielson_mimetex_v12.zip"&gt;修改前的插件&lt;/a&gt;（MD5：61aa23a9907c8fb777ef61c186070878）；&lt;/li&gt;
&lt;li&gt;下载 &lt;a class="reference external" href="https://blog.gocalf.com/assets/2011/07/dahnielson_mimetex_v121.zip"&gt;修改后的插件&lt;/a&gt;（MD5：3d17d45b6f2375d9ded05988bfa470c0）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改好后就可以使用了，如果是第一次用这个插件，别忘了给你的站点开一个有写权限的 cache 目录（/wp-content/cache/）。&lt;/p&gt;
&lt;p&gt;试用一下吧，在文章中输入这样的内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;tex fg=&amp;quot;0000ff&amp;quot; sz=&amp;quot;2&amp;quot;&amp;gt;&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;array&lt;span class="nb"&gt;}{&lt;/span&gt;rcl&lt;span class="nb"&gt;}&lt;/span&gt;
p &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; = &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;1&lt;span class="nb"&gt;}{&lt;/span&gt;5&lt;span class="nb"&gt;}&lt;/span&gt;+&lt;span class="k"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;2&lt;span class="nb"&gt;}{&lt;/span&gt;5&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\times\left&lt;/span&gt;(&lt;span class="k"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;1&lt;span class="nb"&gt;}{&lt;/span&gt;5&lt;span class="nb"&gt;}&lt;/span&gt;+&lt;span class="k"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;2&lt;span class="nb"&gt;}{&lt;/span&gt;5&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\times\left&lt;/span&gt;(&lt;span class="k"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;1&lt;span class="nb"&gt;}{&lt;/span&gt;5&lt;span class="nb"&gt;}&lt;/span&gt;+&lt;span class="k"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;2&lt;span class="nb"&gt;}{&lt;/span&gt;5&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\times\left&lt;/span&gt;(&lt;span class="k"&gt;\cdots\right&lt;/span&gt;)&lt;span class="k"&gt;\right&lt;/span&gt;)&lt;span class="k"&gt;\right&lt;/span&gt;) &lt;span class="k"&gt;\\&lt;/span&gt;
&lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; = &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;1&lt;span class="nb"&gt;}{&lt;/span&gt;5&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\times\sum&lt;/span&gt;&lt;span class="nb"&gt;_{&lt;/span&gt;i=0&lt;span class="nb"&gt;}^&lt;/span&gt;&lt;span class="k"&gt;\infty&lt;/span&gt; &lt;span class="k"&gt;\left&lt;/span&gt;(&lt;span class="k"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;2&lt;span class="nb"&gt;}{&lt;/span&gt;5&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\right&lt;/span&gt;)&lt;span class="nb"&gt;^&lt;/span&gt;i &lt;span class="k"&gt;\\&lt;/span&gt;
&lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; = &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;1&lt;span class="nb"&gt;}{&lt;/span&gt;5&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\times\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;1&lt;span class="nb"&gt;}{&lt;/span&gt;1-&lt;span class="k"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;2&lt;span class="nb"&gt;}{&lt;/span&gt;5&lt;span class="nb"&gt;}}&lt;/span&gt; &lt;span class="k"&gt;\\&lt;/span&gt;
&lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; = &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;1&lt;span class="nb"&gt;}{&lt;/span&gt;5&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\times\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;5&lt;span class="nb"&gt;}{&lt;/span&gt;3&lt;span class="nb"&gt;}&lt;/span&gt; &lt;span class="k"&gt;\\&lt;/span&gt;
&lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; = &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;1&lt;span class="nb"&gt;}{&lt;/span&gt;3&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;array&lt;span class="nb"&gt;}&lt;/span&gt;&amp;lt;/tex&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以得到图片：&lt;/p&gt;
&lt;img alt="0313Freq.gif" src="https://blog.gocalf.com/images/2011/07/0313Freq.gif" /&gt;
</content><category term="建站"></category><category term="WordPress LaTeX"></category><category term="WordPress Plugin"></category></entry><entry><title>WordPress 数学公式插件 LaTeX</title><link href="https://blog.gocalf.com/latex-wordpress" rel="alternate"></link><published>2011-07-02T22:32:00+08:00</published><updated>2011-08-03T20:19:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-07-02:/latex-wordpress</id><summary type="html">&lt;p class="first last"&gt;为 WordPress 添加数学公式。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;几年前在我与几个同学一起维护的博客 &lt;a class="reference external" href="http://www.zhongqingju.com"&gt;钟磬居&lt;/a&gt;（链接已失效）中，我们使用了 &lt;a class="reference external" href="http://en.dahnielson.com/2006/09/mimetex-plugin.html"&gt;dahnielson_mimetex&lt;/a&gt;（链接已失效）来渲染 LaTeX 公式（原博文备份至：&lt;a class="reference external" href="https://blog.gocalf.com/wordpress-latex-old"&gt;为你的 WordPress 站点添加 LaTeX 支持&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;当时提到三种在博客文章中显示 LaTex 公式的方法：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;利用 LaTeX 软件或在线服务（如 &lt;a class="reference external" href="http://www.forkosh.com/mimetex.html"&gt;mimetex&lt;/a&gt;，&lt;a class="reference external" href="http://www.codecogs.com/components/equationeditor/equationeditor.php"&gt;LaTeX Equation Editor&lt;/a&gt;）生成公式的图片，将图片上传到自己的站点或者 PicasaWeb，然后在文章中插入该图片；&lt;/li&gt;
&lt;li&gt;为自己的站点安装 LaTeX 的相关软件，使其可以解析 LaTeX 并生成图片；&lt;/li&gt;
&lt;li&gt;利用插件（&lt;a class="reference external" href="http://en.dahnielson.com/2006/09/mimetex-plugin.html"&gt;dahnielson_mimetex&lt;/a&gt;），动态地向公开的服务发出请求，获取公式图片并显示。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这次还是采用第三种方法，只是改用了更为方便强大的插件：&lt;a class="reference external" href="http://zhiqiang.org/"&gt;Zhiqiang&lt;/a&gt; 开发的 &lt;a class="reference external" href="http://wordpress.org/extend/plugins/latex/"&gt;LaTeX for WordPress&lt;/a&gt;（参见其博文：&lt;a class="reference external" href="http://zhiqiang.org/blog/it/latex-for-wordpress.html"&gt;在博客上写数学公式的插件 LaTeX for WordPress&lt;/a&gt;）。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;&lt;a class="reference external" href="http://wordpress.org/extend/plugins/latex/"&gt;LaTeX for WordPress&lt;/a&gt; 的使用非常简单，这里就直接从其 &lt;a class="reference external" href="http://wordpress.org/extend/plugins/latex/"&gt;主页&lt;/a&gt; 上抄袭过来：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can type the formula in LaTeX, in title, posts, pages and comments:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\(\alpha+\beta\geq\gamma\)&lt;/span&gt;&lt;/tt&gt; or&amp;nbsp;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$$\alpha+\beta\geq\gamma$$&lt;/span&gt;&lt;/tt&gt; add an inline formula&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\[\alpha+\beta\geq\gamma\]&lt;/span&gt;&lt;/tt&gt; or&amp;nbsp;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$$!\alpha+\beta\geq\gamma$$&lt;/span&gt;&lt;/tt&gt; add an latex equation in math mode (it will be displayed centerly in a single line).&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$$\alpha+\beta\geq\gamma!$$&lt;/span&gt;&lt;/tt&gt; display the source of the latex formula. Just add a&amp;nbsp;&lt;tt class="docutils literal"&gt;!&lt;/tt&gt; before the second&amp;nbsp;&lt;tt class="docutils literal"&gt;$$&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的公式显示为： &lt;span class="math"&gt;\(\alpha+\beta\geq\gamma\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;一个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;$$&lt;/span&gt;&lt;span class="nv"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{array}{rcl}&lt;/span&gt;
&lt;span class="nb"&gt;p &amp;amp; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt; &amp;amp; &lt;/span&gt;&lt;span class="nv"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="nv"&gt;\times\left&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="nv"&gt;\times\left&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;\cdots\right&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;\right&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nb"&gt; &lt;/span&gt;&lt;span class="nv"&gt;\\&lt;/span&gt;&lt;span class="nb"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;&amp;amp; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt; &amp;amp; &lt;/span&gt;&lt;span class="nv"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="nv"&gt;\times\sum&lt;/span&gt;&lt;span class="nb"&gt;_{i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="nb"&gt;}^&lt;/span&gt;&lt;span class="nv"&gt;\infty&lt;/span&gt;&lt;span class="nb"&gt; &lt;/span&gt;&lt;span class="nv"&gt;\left&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="nv"&gt;\right&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;^i &lt;/span&gt;&lt;span class="nv"&gt;\\&lt;/span&gt;&lt;span class="nb"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;&amp;amp; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt; &amp;amp; &lt;/span&gt;&lt;span class="nv"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="nv"&gt;\times\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="nb"&gt;}} &lt;/span&gt;&lt;span class="nv"&gt;\\&lt;/span&gt;&lt;span class="nb"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;&amp;amp; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt; &amp;amp; &lt;/span&gt;&lt;span class="nv"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="nv"&gt;\times\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="nb"&gt;} &lt;/span&gt;&lt;span class="nv"&gt;\\&lt;/span&gt;&lt;span class="nb"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;&amp;amp; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt; &amp;amp; &lt;/span&gt;&lt;span class="nv"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{array}&lt;/span&gt;&lt;span class="s"&gt;$$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{array}{rcl}
p &amp;amp; = &amp;amp; \frac{1}{5}+\frac{2}{5}\times\left(\frac{1}{5}+\frac{2}{5}\times\left(\cdots\right)\right) \\
&amp;amp; = &amp;amp; \frac{1}{5}\times\sum_{i=0}^\infty \left(\frac{2}{5}\right)^i \\
&amp;amp; = &amp;amp; \frac{1}{5}\times\frac{1}{1-\frac{2}{5}} \\
&amp;amp; = &amp;amp; \frac{1}{5}\times\frac{5}{3} \\
&amp;amp; = &amp;amp; \frac{1}{3}
\end{array}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;另外这个插件默认并且推荐使用 &lt;a class="reference external" href="http://www.mathjax.org/"&gt;MathJax&lt;/a&gt; 来渲染公式。&lt;a class="reference external" href="http://www.mathjax.org/"&gt;MathJax&lt;/a&gt; 是一个开源的基于 JavaScript 的公式渲染引擎。它使用 CSS 和网页中的字体来显示公式，而不是图片或者 Flash。这带来的好处是公式内的文字是可以选取的，而且在缩放网页的时候，公式的字体也可同时被缩放。而且利用它的 JavaScript 还可以很方便地对整个公式进行缩放和拷贝。可以在 MathJax 网站上查看（&lt;a class="reference external" href="http://www.mathjax.org/demos/copy-and-paste/"&gt;http://www.mathjax.org/demos/copy-and-paste/&lt;/a&gt;）如何把 MathJax 渲染出来的公式复制到 Mathematica、Microsoft
Word、MathType 和 Wikipeida 中。这里简单概括一下：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Mathematica：复制公式的 MathML 源代码（右键点击公式，选择 Format-&amp;gt;MathML，然后点击 Show
Source，在弹出的代码窗口中全选复制），在 Mathematica 中粘贴，软件将会自动识别出这是一个公式。&lt;/li&gt;
&lt;li&gt;Microsoft
Word：将公式的 MathML 源代码粘贴到 Word 中，然后在粘贴选择器（Paste
Options）中选取仅保留文本（Paste Text Only）。&lt;/li&gt;
&lt;li&gt;MathType：将公式的 TeX 源代码（在右键菜单中选择 Format-&amp;gt;TeX）粘贴到 MathType 中即可。&lt;/li&gt;
&lt;li&gt;Wikipedia：将公式的 TeX 源码粘贴到 Wikipedia 编辑窗口中，放在 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;math&amp;gt;&amp;lt;/math&amp;gt;&lt;/span&gt;&lt;/tt&gt; 内即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果是在 Google
Reader 中查看公式的文章，MathJax 无法被载入，这种情况下插件还会提供图片格式的公式以便阅读。&lt;/p&gt;
&lt;p&gt;另外插件提供了方便的后台设置，在博客后台可以直接修改公式图片和 MathJax 的服务器地址，可以设置打开或者关闭 MathJax。&lt;/p&gt;
&lt;p&gt;如果怕公开的 LaTeX 公式图片服务器或者 MathJax 服务器访问速度慢、被封、关闭等情况，也可以自己搭建相关的服务，然后在插件的设置中修改服务器地址即可。&lt;/p&gt;
</content><category term="建站"></category><category term="WordPress LaTeX"></category><category term="WordPress Plugin"></category></entry><entry><title>电影《源代码》（Source Code）</title><link href="https://blog.gocalf.com/movie-source-code" rel="alternate"></link><published>2011-06-30T23:52:00+08:00</published><updated>2011-08-03T20:12:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-06-30:/movie-source-code</id><summary type="html">&lt;p class="first last"&gt;一篇物理学家写的关于电影《源代码》的文章，觉得非常不错，转载于此。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;昨天无意间看到一个视频，名字叫“源代码”。第一反应是网友恶搞的关于 IT 民工的短片，可是看到时间轴上显示总长为九十多分钟，才反应过来这是个电影。可依旧以为是 IT 民工相关的东西。看了几分钟之后发现是一部关于平行宇宙的科幻电影。&lt;/p&gt;
&lt;p&gt;现在关于时间旅行的故事主要有两种吧。一种我称之为“宿命论”，它严格遵守了时空旅行不能改变历史的规律，主角们在回到过去的时候不论做了什么，都无法改变已经发生的事实，因为事实就是在过去的那个时候，有人从未来回来做了一些事情。如果一个人试图回到过去杀害他的祖父，那一定不会成功，或者如果成功了则会发现，啊，原来死了的人其实不是他的亲生祖父……&lt;/p&gt;
&lt;p&gt;另一种就是像 Source
Code 这样的，平行宇宙论。一个人回到过去，其实是回到了一个平行宇宙中（应该是在他回到过去的那一瞬间分裂出来的一个新的宇宙吧），他在这个世界中做任何事，都不会影响到他来自的那个世界已经发生过的事情。&lt;/p&gt;
&lt;p&gt;看到了一篇物理学家写的关于这个电影的文章，觉得非常不错，他对电影中一些现象的理解跟我的理解也很接近。转载于此留个印记。&lt;/p&gt;
&lt;p&gt;附：在线观看电影《源代码》地址 &lt;a class="reference external" href="http://video.sina.com.cn/v/b/55050458-1650913383.html"&gt;http://video.sina.com.cn/v/b/55050458-1650913383.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注：以下内容有剧透。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;======== 分隔符 ========&lt;/p&gt;
&lt;p&gt;以下内容转载自 &lt;a class="reference external" href="http://blogs.discovermagazine.com/cosmicvariance/2011/04/12/guest-post-jim-kakalios-on-the-quantum-mechanics-of-source-code/"&gt;http://blogs.discovermagazine.com/cosmicvariance/2011/04/12/guest-post-jim-kakalios-on-the-quantum-mechanics-of-source-code/&lt;/a&gt;。&lt;/p&gt;
&lt;div class="section" id="jim-kakalios-on-the-quantum-mechanics-of-source-code"&gt;
&lt;h2&gt;Jim Kakalios on the Quantum Mechanics of Source Code&lt;/h2&gt;
&lt;p&gt;by&amp;nbsp;&lt;a class="reference external" href="http://blogs.discovermagazine.com/cosmicvariance/author/scarroll/"&gt;Sean&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jim Kakalios of the University of Minnesota has achieved internet
demi-fame — he has&amp;nbsp;&lt;a class="reference external" href="http://www.youtube.com/watch?v=zmj1rpzDRZ0"&gt;a YouTube video&lt;/a&gt; with over a million and a half
views. It's on the science of&amp;nbsp;&lt;em&gt;Watchmen&lt;/em&gt;, the movie based on Alan
Moore's graphic novel. Jim got that sweet gig because he wrote a great
book called&amp;nbsp;&lt;a class="reference external" href="http://www.amazon.com/Physics-Superheroes-Spectacular-Second/dp/1592405088/"&gt;&lt;em&gt;The Science of Superheroes&lt;/em&gt;&lt;/a&gt; — what better credentials
could you ask for?&lt;/p&gt;
&lt;p&gt;More recently Jim has written another book,
&lt;a class="reference external" href="http://www.amazon.com/Amazing-Story-Quantum-Mechanics-Exploration/dp/1592404790/"&gt;&lt;em&gt;The Amazing Story of Quantum Mechanics&lt;/em&gt;&lt;/a&gt;.
But even without superheroes in the title,
everything Jim thinks about ends up being relevant to movies before too
long. The new movie&amp;nbsp;&lt;a class="reference external" href="http://www.imdb.com/title/tt0945513/"&gt;&lt;em&gt;Source Code&lt;/em&gt;&lt;/a&gt; features a twist at the end that
involves — you guessed it — quantum mechanics. Jim has applied his
physicist super-powers to unraveling what it all means, and was kind
enough to share his thoughts with us in this guest post.&lt;/p&gt;
&lt;p&gt;——————————————————————-&lt;/p&gt;
&lt;p&gt;There is&amp;nbsp;&lt;a class="reference external" href="http://www.ropeofsilicon.com/article/spoiler-talk-is-the-ending-of-source-code-open-to-interpretation"&gt;an interesting discussion taking place on the internets&lt;/a&gt;
concerning the ending of the newly released film SOURCE CODE, that
suggests that the film concludes with a paradox. I believe that any such
paradox can be resolved – with Physics!&lt;/p&gt;
&lt;p&gt;This entire post is one big honkin' SPOILER, so if you want to read
about the final twist ending of a film without having seen said film –
by all means, read on, MacDuff!&lt;/p&gt;
&lt;p&gt;In SOURCE CODE, Jake Gyllenhaal plays US helicopter pilot Colter
Stevens, whose consciousness is inserted into another man's body (Sean
Fentress, a school teacher in Chicago) through a procedure that requires
a miracle exception from the laws of nature (involving quantum mechanics
and &amp;quot;parabolic calculus&amp;quot; – by the way, there is no such thing as
parabolic calculus). Thanks to some technobabble (or as Q-Bert on
Futurama would describe it – weapons grade bolognium) Colter's mind can
only enter Sean's body in the last eight minutes of Sean's life. As Sean
is sitting on a city bound Chicago commuter train, on which a bomb will
explode at 7:58 AM, killing everyone aboard, the goal is for Colter to
ascertain who planted the bomb. He cannot stop it from exploding, he is
told, because that has already happened. He cannot affect the past, but
he can bring information obtained in the past back to his present time.
Learning the identity of the bomber would enable the authorities to
prevent the detonation of a threatened second &amp;quot;dirty atomic&amp;quot; bomb is
downtown Chicago.&lt;/p&gt;
&lt;p&gt;While the above can be discerned from the movie trailer, what I am going
to discuss next involves the actual ending of the film, and if you do
not want this ending spoiled, you should stop reading now.&lt;/p&gt;
&lt;p&gt;Colter learns that the reason his last memory is being attacked in his
helicopter in Afghanistan is that he in fact died in the crash. His
mangled body is kept artificially alive, and his brain can be activated,
and sent to inhabit the body of Sean Fentress (who happens to be a
neurological match). At the end of the film, after multiple failed
attempts, Colter manages to identify the bomber. Providing this
information to Col. Goodwin (a military officer played by Vera Farmiga)
and Prof. Rutlidge (the great Jeffrey Wright), the scientist who
designed the Source Code project, the terrorist is caught before he can
set off the second bomb, but after, of course, the first bomb on the
Chicago train explodes.&lt;/p&gt;
&lt;p&gt;It is left somewhat vague as to whether Colter is going to parallel
realities, a la the Many World's interpretation of Quantum Mechanics, or
whether he is engaging in a quantum/ neurological simulation. If the
former (which seems to be borne out by the ending) then this would tie
into notions of time travel being explored in the context of quantum
gravity. That is, if one could time travel into the past, you need not
fear any Grandfather paradox (what if you killed your ancestor –
preventing your birth, but then you would not be able to travel back in
time to ice Grandpa). Some physicists argue that time travel is only
possible via parallel realities. You do not go back in time in your own
reality, but to an alternate Earth's past. You can thus kill as many
grandparents as you have bullets, remaining safe in your own timeline.
In any event it is assumed that the bomber is the same person every time
Colter enters the Source Code.&lt;/p&gt;
&lt;p&gt;While everyone is celebrating the capture of the bomber, the first
successful trial of the Source Code project, Colter convinces Goodwin to
send him back one last time, to try to save the passengers on the train.
At the end of the eight minutes, he convinces Goodwin to terminate his
life support, allowing him to die in actuality, as the world and his
father believe happened months ago in Afghanistan. Needless to say, he
manages to stop the first bomb from exploding on the train, hands the
bomber to the authorities, and kisses his love interest just as the
eight minute mark is reached. We see Goodwin make good on her promise
and end his life support at that moment, at which point she is arrested
my the military police for acting against Rutlidge's instructions.&lt;/p&gt;
&lt;p&gt;On the train however, Sean/Colter is still alive after the kiss. The
film implies that he goes on to live happily ever after in Sean's body,
with Colter's mind, while Colter's deformed body remains at the Nellis
laboratory on life support. As the bomb never went off on the Chicago
train – there was no reason to activate Coulter and send him into the
Source Code, and the project awaits its first true trial by fire. Thus
it is indicated that we are witnessing two alternate realities – one
where Goodwin is arrested after pulling the plug on Colter following the
successful application of the Source Code, and the other where
Sean/Colter is still alive, where the Source Code project has not been
activated.&lt;/p&gt;
&lt;p&gt;Among the many discussions I've noted on the web about the ending of
this film, I wish to address two particular issues that are being
debated by the Hive Mind. In the film's final reality, where the bomb
does not explode on the train – does Colter's consciousness reside in
two places at once? And, what happens to Sean Fentriss' consciousness in
this final reality?&lt;/p&gt;
&lt;p&gt;Reasonable people may reach different conclusions concerning these two
points. As I am a physics professor – I will tell you the RIGHT answers!&lt;/p&gt;
&lt;p&gt;(1) In the final reality – Colter is NOT consciousness in two places at
once. He is awake and aware in Sean's body and at the same time his
damaged body is in the Nellis lab – IN A NON-CONSCIOUS STATE. He is not
awake and aware in the lab at Nellis, he can not initiate motion or form
an independent coherent thought. He is in essence brain dead, kept
artificially alive until there is a time and need for him to be
activated (if there is a terrorist attack).&lt;/p&gt;
&lt;p&gt;Even if he is activated – this would NOT influence or affect Colter in
Sean's body, as it would take place in Sean/Colter's FUTURE. Remember he
was sent back to Chicago at 7:50 AM – the bomb exploded at 7:58. Time
progresses forward for both Sean/Colter and Nellis/Colter at the same
rate. This was why Goodwin and Rutlidge were upset about how many trials
it was taking – for each trial burned up a minimum of eight minutes, and
brought the second explosion closer to happening.&lt;/p&gt;
&lt;p&gt;What you are doing and thinking now is not affected by what you will be
doing and thinking several hours from now. Do you know what you will be
thinking about several hours from now (ok – for the guys this is an easy
one). Nellis/Colter may not be activated for weeks/months/years later.
But even if he is – Sean/Coulter can live his life, unaffected by what
is happening in his future. There is no paradox, for Colter in Sean's
body is only awake and conscious at one point in time. Colter is NOT
like Schrodinger's cat, in two different conscious states
simultaneously, as they are separated in time.&lt;/p&gt;
&lt;p&gt;(2) What happened to Sean's consciousness? Here there is a potential
problem. Basically I believe Sean is dead. When Colter's mind jumps into
his body, it over-writes Sean's consciousness. Rutlidge probably knows
this, and ignores the ethical issues. Sean will be dead when the bomb
explodes after all, and Rutlidge believes that cannot be changed. By
sending Colter into Sean's body, he robs Sean of the last eight minutes
of his life. As Sean is unaware that a bomb will explode, killing him
and everyone on board, he would not do anything extraordinary in those
eight minutes. Rutlidge probably believes that it is acceptable to
sacrifice the last eight minutes of one man's life in order to save
millions of lives if they can prevent the second bomb blast in downtown
Chicago. Every time Coulter enters the Source Code at 7:50 AM, he
essentially kills Sean. Sean will die in every reality where Colter does
not enter the code, and he will also die in all N – 1 realities where he
does – so this is an ethical problem of order 1/N where N goes to
infinity.&lt;/p&gt;
&lt;p&gt;Alternatively, Sean may be alive in Colter's damaged body – but there
was no suggestion that something like that was happening. Here I'm
taking the Quantum Leap analogy too literally. (There is a wonderful tip
of the hat to Quantum Leap – listen carefully to Coulter's Dad).&lt;/p&gt;
&lt;p&gt;Sorry this is so long. Never ask a professor a simple question – you
always get a lecture in reply!&lt;/p&gt;
&lt;/div&gt;
</content><category term="影视音乐"></category><category term="Movie"></category><category term="Science Fiction"></category></entry><entry><title>解决 WordPress 中文 title 无法显示的问题</title><link href="https://blog.gocalf.com/wordpress-chinese-title" rel="alternate"></link><published>2011-06-30T22:50:00+08:00</published><updated>2011-08-03T20:10:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-06-30:/wordpress-chinese-title</id><summary type="html">&lt;p class="first last"&gt;如果在 WordPress 主题中使用了 Cufón，中文标题有可能无法显示，这时候只能忍痛割爱，关掉 Cufón。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;博客刚刚开张，就遇到了第一个问题，中文标题无法显示。&lt;/p&gt;
&lt;p&gt;建好 WordPress 之后，系统自动发了一篇名为 Hello
world! 的文章（为程序员量身定制的么？），当时一切正常。但当我发了一篇中文标题的文章后，总觉得怪怪的，原来中文标题没有显示出来。于是查看网页源码，又 Google 了一下，发现是 Cufon 造成的。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Cufon（应该写做 Cufón）是通过 JavaScript 在网页中进行文字渲染的，可通过以下两个链接了解它：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Scalable_Inman_Flash_Replacement"&gt;http://en.wikipedia.org/wiki/Scalable_Inman_Flash_Replacement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://cufon.shoqolate.com/generate/"&gt;http://cufon.shoqolate.com/generate/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关键问题是 Cufon 对中文字体的支持不是很理想（不是做不到，只是中文字体包实在太大了）。目前的 work
around 就是暂时禁用 Cufon。我现在使用的主题是大名鼎鼎的 LightWord，它使用了 Cufon。不过在它的配置项中有关于 Cufon 的设置，非常方便，在后台进入 Appearance-&amp;gt;LightWord
Settings，在 General settings 中就可以看到 Cufon
settings，改为 Disabled 即可。&lt;/p&gt;
&lt;p&gt;关闭 Cufon 之后，明显感觉到英文标题没有以前好看了，不过为了能显示中文，只好先忍痛割爱了。当然如果愿意，也可以准备一个中文字体，在上面提到的第二个链接中可以自行创建。在 WordPress 的安装目录 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;./wp-content/themes/lightword/js/&lt;/span&gt;&lt;/tt&gt; 中可以看到相关 JavaScript，比如 LightWord 主题使用的是 vera 字体，在目录中可以看到 &lt;tt class="docutils literal"&gt;vera.font.js&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;vera\_extra.font.js&lt;/tt&gt; 两个文件。&lt;/p&gt;
</content><category term="建站"></category><category term="WordPress Theme"></category></entry><entry><title>要不就先开始吧</title><link href="https://blog.gocalf.com/lets-start" rel="alternate"></link><published>2011-06-28T23:33:00+08:00</published><updated>2011-08-03T20:04:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-06-28:/lets-start</id><summary type="html">&lt;p class="first last"&gt;GoCalf 博客正式开张，顺带介绍一下建站的初始步骤。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;像我这种很懒又很挑剔的人，最大的痛苦就是 to-do
list 越来越长。然则我已经懒到这所谓的 to-do
list 只是隐约显于心中，并非实际存在。&lt;/p&gt;
&lt;p&gt;唯一的避免方法就是尽快行动起来，切不可一再拖拉。&lt;/p&gt;
&lt;p&gt;GoCalf 的 blog 和 wiki 就此开张吧。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;今天就先记录一下建站的初始步骤：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;在 GoDaddy 购买域名，在 BlueHost 购买空间，去 GoDaddy 里把域名的 ip 地址指向 BlueHost 空间。GoDaddy 域名赠送的小空间留作他用。&lt;/li&gt;
&lt;li&gt;Default web root: &lt;tt class="docutils literal"&gt;$HOME/public_html/&lt;/tt&gt;。&lt;/li&gt;
&lt;li&gt;在 web root 中 &lt;tt class="docutils literal"&gt;mkdir blog&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;mkdir wiki&lt;/tt&gt;。&lt;/li&gt;
&lt;li&gt;在 cPanel 中开通子域名 blog、wiki，分别指向相应的目录。&lt;/li&gt;
&lt;li&gt;在 GoDaddy 中开通相同的子域名指向 A 地址。&lt;/li&gt;
&lt;li&gt;在 cPanel 中安装 WordPress、MediaWiki 至相应目录。&lt;/li&gt;
&lt;li&gt;在 cPanel 中添加 redirect：&lt;ul&gt;
&lt;li&gt;blog.gocalf.com -&amp;gt; gocalf.com/blog&lt;/li&gt;
&lt;li&gt;wiki.gocalf.com -&amp;gt; gocalf.com/wiki&lt;/li&gt;
&lt;li&gt;gocalf.com -&amp;gt; www.gocalf.com&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为防止 web root 混乱：&lt;tt class="docutils literal"&gt;mkdir &amp;lt;sitename&amp;gt;&lt;/tt&gt;，在 &lt;tt class="docutils literal"&gt;.htaccess&lt;/tt&gt; 中添加重定向：&lt;ul&gt;
&lt;li&gt;www.gocalf.com/* -&amp;gt; www.gocalf.com/&amp;lt;sitename&amp;gt;/$1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;mkdir ~/local&lt;/tt&gt; 作为安装软件目录。&lt;/li&gt;
&lt;li&gt;安装 SVN（略去若干字）。&lt;ul&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;mkdir ~/public_html/svn&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;svnserve &lt;span class="pre"&gt;-d&lt;/span&gt; &lt;span class="pre"&gt;-r&lt;/span&gt; ~/public_html/svn&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;不过现在外部无法访问此 SVN，需要独立 IP 且开放端口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全站禁止 list directory，在 &lt;tt class="docutils literal"&gt;.htaccess&lt;/tt&gt; 中添加：&lt;tt class="docutils literal"&gt;Options &lt;span class="pre"&gt;-Indexes&lt;/span&gt;&lt;/tt&gt;，并禁止访问 svn 目录。&lt;/li&gt;
&lt;li&gt;Setting Email：Not Finished.&lt;/li&gt;
&lt;li&gt;显示中文界面：Not Started.&lt;/li&gt;
&lt;/ol&gt;
</content><category term="建站"></category><category term="Hosting"></category><category term="Blog"></category></entry><entry><title>你好，世界！</title><link href="https://blog.gocalf.com/hello-world" rel="alternate"></link><published>2011-01-07T09:11:00+08:00</published><updated>2011-08-03T19:52:00+08:00</updated><author><name>Calf</name></author><id>tag:blog.gocalf.com,2011-01-07:/hello-world</id><summary type="html">&lt;p class="first last"&gt;欢迎使用 WordPress。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;欢迎使用 WordPress。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;这是系统自动生成的演示文章。编辑或者删除它，然后开始您的博客！&lt;/p&gt;
</content><category term="建站"></category><category term="WordPress"></category></entry></feed>